//! # Trident Generated Types
//!
//! This file is automatically generated by Trident.
//! **DO NOT EDIT THIS FILE MANUALLY**

#![allow(dead_code)]
#![allow(unused_imports)]

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use trident_fuzz::fuzzing::*;

// ============================================================================
// PROGRAM MODULES
// ============================================================================

// ----------------------------------------------------------------------------
// Program: hello_world
// ----------------------------------------------------------------------------
pub mod hello_world {
    use super::*;

    // ------------------------------------------------------------------------
    // Program ID
    // ------------------------------------------------------------------------

    /// Returns the program ID for hello_world
    pub fn program_id() -> Pubkey {
        pubkey!("FtevoQoDMv6ZB3N9Lix5Tbjs8EVuNL8vDSqG9kzaZPit")
    }

    // ------------------------------------------------------------------------
    // Instructions
    // ------------------------------------------------------------------------

    // ....................................................................
    // Instruction: InitializeFn
    // ....................................................................

    /// Main instruction struct for InitializeFn
    pub struct InitializeFnInstruction {
        pub accounts: InitializeFnInstructionAccountMetas,
        pub data: InitializeFnInstructionData,
        pub remaining_accounts: Vec<AccountMeta>,
    }

    /// Account metadata for InitializeFn instruction
    #[derive(Debug, Clone, Default)]
    pub struct InitializeFnInstructionAccountMetas {
        pub author: AccountMeta,

        pub hello_world_account: AccountMeta,

        pub system_program: AccountMeta,
    }

    /// Account pubkeys for InitializeFn instruction
    #[derive(Debug, Clone)]
    pub struct InitializeFnInstructionAccounts {
        pub author: Pubkey,

        pub hello_world_account: Pubkey,
    }

    impl InitializeFnInstructionAccounts {
        pub fn new(author: Pubkey, hello_world_account: Pubkey) -> Self {
            Self {
                author,

                hello_world_account,
            }
        }
    }

    /// Instruction data for InitializeFn
    #[derive(Debug, BorshDeserialize, BorshSerialize, Clone)]
    pub struct InitializeFnInstructionData {
        pub input: u8,
    }

    impl InitializeFnInstructionData {
        pub fn new(input: u8) -> Self {
            Self { input }
        }
    }

    /// Implementation for InitializeFnInstruction
    impl InitializeFnInstruction {
        fn discriminator() -> [u8; 8] {
            [18u8, 187u8, 169u8, 213u8, 94u8, 180u8, 86u8, 152u8]
        }

        pub fn data(data: InitializeFnInstructionData) -> Self {
            Self {
                accounts: InitializeFnInstructionAccountMetas::default(),
                data,
                remaining_accounts: Vec::new(),
            }
        }

        pub fn accounts(mut self, accounts: InitializeFnInstructionAccounts) -> Self {
            self.accounts.author = AccountMeta::new(accounts.author, true);

            self.accounts.hello_world_account =
                AccountMeta::new(accounts.hello_world_account, false);

            self.accounts.system_program =
                AccountMeta::new_readonly(pubkey!("11111111111111111111111111111111"), false);

            self
        }

        pub fn remaining_accounts(mut self, accounts: Vec<AccountMeta>) -> Self {
            self.remaining_accounts = accounts;
            self
        }

        fn to_account_metas(&self) -> Vec<AccountMeta> {
            let mut metas = Vec::new();

            metas.push(self.accounts.author.clone());

            metas.push(self.accounts.hello_world_account.clone());

            metas.push(self.accounts.system_program.clone());

            metas.extend(self.remaining_accounts.clone());
            metas
        }

        pub fn instruction(&self) -> Instruction {
            let mut buffer: Vec<u8> = Vec::new();

            buffer.extend_from_slice(&Self::discriminator());

            self.data.serialize(&mut buffer).unwrap();

            Instruction::new_with_bytes(program_id(), &buffer, self.to_account_metas())
        }
    }

    // ------------------------------------------------------------------------
    // Composite Accounts
    // ------------------------------------------------------------------------
}

// ============================================================================
// CUSTOM TYPES
// ============================================================================

/// Custom struct: StoreHelloWorld
#[derive(Debug, BorshDeserialize, BorshSerialize, Clone)]
pub struct StoreHelloWorld {
    pub input: u8,
}

impl StoreHelloWorld {
    pub fn new(input: u8) -> Self {
        Self { input }
    }
}

// ============================================================================
// END OF GENERATED FILE
// ============================================================================
