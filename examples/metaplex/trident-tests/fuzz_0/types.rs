//! # Trident Generated Types
//!
//! This file is automatically generated by Trident.
//! **DO NOT EDIT THIS FILE MANUALLY**

#![allow(dead_code)]
#![allow(unused_imports)]

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use trident_fuzz::fuzzing::*;

// ============================================================================
// PROGRAM MODULES
// ============================================================================

// ----------------------------------------------------------------------------
// Program: metaplex
// ----------------------------------------------------------------------------
pub mod metaplex {
    use super::*;

    // ------------------------------------------------------------------------
    // Program ID
    // ------------------------------------------------------------------------

    /// Returns the program ID for metaplex
    pub fn program_id() -> Pubkey {
        pubkey!("H2XPhu8mmGDZioamVp2C5bDWXSSKn6bDdhpiUqWqPmLS")
    }

    // ------------------------------------------------------------------------
    // Instructions
    // ------------------------------------------------------------------------

    // ....................................................................
    // Instruction: Initialize
    // ....................................................................

    /// Main instruction struct for Initialize
    pub struct InitializeInstruction {
        pub accounts: InitializeInstructionAccountMetas,
        pub data: InitializeInstructionData,
        pub remaining_accounts: Vec<AccountMeta>,
    }

    /// Account metadata for Initialize instruction
    #[derive(Debug, Clone, Default)]
    pub struct InitializeInstructionAccountMetas {
        pub signer: AccountMeta,

        pub mint: AccountMeta,

        pub metadata_account: AccountMeta,

        pub mpl_token_metadata: AccountMeta,

        pub system_program: AccountMeta,

        pub token_program: AccountMeta,
    }

    /// Account pubkeys for Initialize instruction
    #[derive(Debug, Clone)]
    pub struct InitializeInstructionAccounts {
        pub signer: Pubkey,

        pub mint: Pubkey,

        pub metadata_account: Pubkey,

        pub token_program: Pubkey,
    }

    impl InitializeInstructionAccounts {
        pub fn new(
            signer: Pubkey,

            mint: Pubkey,

            metadata_account: Pubkey,

            token_program: Pubkey,
        ) -> Self {
            Self {
                signer,

                mint,

                metadata_account,

                token_program,
            }
        }
    }

    /// Instruction data for Initialize
    #[derive(Debug, BorshDeserialize, BorshSerialize, Clone)]
    pub struct InitializeInstructionData {
        pub input: u8,

        pub name: String,

        pub symbol: String,

        pub uri: String,
    }

    impl InitializeInstructionData {
        pub fn new(input: u8, name: String, symbol: String, uri: String) -> Self {
            Self {
                input,

                name,

                symbol,

                uri,
            }
        }
    }

    /// Implementation for InitializeInstruction
    impl InitializeInstruction {
        fn discriminator() -> [u8; 8] {
            [175u8, 175u8, 109u8, 31u8, 13u8, 152u8, 155u8, 237u8]
        }

        pub fn data(data: InitializeInstructionData) -> Self {
            Self {
                accounts: InitializeInstructionAccountMetas::default(),
                data,
                remaining_accounts: Vec::new(),
            }
        }

        pub fn accounts(mut self, accounts: InitializeInstructionAccounts) -> Self {
            self.accounts.signer = AccountMeta::new(accounts.signer, true);

            self.accounts.mint = AccountMeta::new(accounts.mint, true);

            self.accounts.metadata_account = AccountMeta::new(accounts.metadata_account, false);

            self.accounts.mpl_token_metadata = AccountMeta::new_readonly(
                pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"),
                false,
            );

            self.accounts.system_program =
                AccountMeta::new_readonly(pubkey!("11111111111111111111111111111111"), false);

            self.accounts.token_program = AccountMeta::new_readonly(accounts.token_program, false);

            self
        }

        pub fn remaining_accounts(mut self, accounts: Vec<AccountMeta>) -> Self {
            self.remaining_accounts = accounts;
            self
        }

        fn to_account_metas(&self) -> Vec<AccountMeta> {
            let mut metas = Vec::new();

            metas.push(self.accounts.signer.clone());

            metas.push(self.accounts.mint.clone());

            metas.push(self.accounts.metadata_account.clone());

            metas.push(self.accounts.mpl_token_metadata.clone());

            metas.push(self.accounts.system_program.clone());

            metas.push(self.accounts.token_program.clone());

            metas.extend(self.remaining_accounts.clone());
            metas
        }

        pub fn instruction(&self) -> Instruction {
            let mut buffer: Vec<u8> = Vec::new();

            buffer.extend_from_slice(&Self::discriminator());

            self.data.serialize(&mut buffer).unwrap();

            Instruction::new_with_bytes(program_id(), &buffer, self.to_account_metas())
        }
    }

    // ------------------------------------------------------------------------
    // Composite Accounts
    // ------------------------------------------------------------------------
}

// ============================================================================
// CUSTOM TYPES
// ============================================================================

// ============================================================================
// END OF GENERATED FILE
// ============================================================================
