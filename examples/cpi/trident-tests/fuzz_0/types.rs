//! # Trident Generated Types
//!
//! This file is automatically generated by Trident.
//! **DO NOT EDIT THIS FILE MANUALLY**

#![allow(dead_code)]
#![allow(unused_imports)]

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use trident_fuzz::fuzzing::*;

// ============================================================================
// PROGRAM MODULES
// ============================================================================

// ----------------------------------------------------------------------------
// Program: cpi
// ----------------------------------------------------------------------------
pub mod cpi {
    use super::*;

    // ------------------------------------------------------------------------
    // Program ID
    // ------------------------------------------------------------------------

    /// Returns the program ID for cpi
    pub fn program_id() -> Pubkey {
        pubkey!("77skervubsozZaRdojomG7FK8T2QQppxtSqG8ag9D4qV")
    }

    // ------------------------------------------------------------------------
    // Instructions
    // ------------------------------------------------------------------------

    // ....................................................................
    // Instruction: InitializeCaller
    // ....................................................................

    /// Main instruction struct for InitializeCaller
    pub struct InitializeCallerInstruction {
        pub accounts: InitializeCallerInstructionAccountMetas,
        pub data: InitializeCallerInstructionData,
        pub remaining_accounts: Vec<AccountMeta>,
    }

    /// Account metadata for InitializeCaller instruction
    #[derive(Debug, Clone, Default)]
    pub struct InitializeCallerInstructionAccountMetas {
        pub signer: AccountMeta,

        pub program: AccountMeta,
    }

    /// Account pubkeys for InitializeCaller instruction
    #[derive(Debug, Clone)]
    pub struct InitializeCallerInstructionAccounts {
        pub signer: Pubkey,
    }

    impl InitializeCallerInstructionAccounts {
        pub fn new(signer: Pubkey) -> Self {
            Self { signer }
        }
    }

    /// Instruction data for InitializeCaller
    #[derive(Debug, BorshDeserialize, BorshSerialize, Clone)]
    pub struct InitializeCallerInstructionData {
        pub input: u16,
    }

    impl InitializeCallerInstructionData {
        pub fn new(input: u16) -> Self {
            Self { input }
        }
    }

    /// Implementation for InitializeCallerInstruction
    impl InitializeCallerInstruction {
        fn discriminator() -> [u8; 8] {
            [204u8, 76u8, 200u8, 172u8, 185u8, 14u8, 99u8, 166u8]
        }

        pub fn data(data: InitializeCallerInstructionData) -> Self {
            Self {
                accounts: InitializeCallerInstructionAccountMetas::default(),
                data,
                remaining_accounts: Vec::new(),
            }
        }

        pub fn accounts(mut self, accounts: InitializeCallerInstructionAccounts) -> Self {
            self.accounts.signer = AccountMeta::new_readonly(accounts.signer, true);

            self.accounts.program = AccountMeta::new_readonly(
                pubkey!("CWjKHxkHU7kqRKqNutPAbxogKg3K1crH61gwwzsHjpC4"),
                false,
            );

            self
        }

        pub fn remaining_accounts(mut self, accounts: Vec<AccountMeta>) -> Self {
            self.remaining_accounts = accounts;
            self
        }

        fn to_account_metas(&self) -> Vec<AccountMeta> {
            let mut metas = Vec::new();

            metas.push(self.accounts.signer.clone());

            metas.push(self.accounts.program.clone());

            metas.extend(self.remaining_accounts.clone());
            metas
        }

        pub fn instruction(&self) -> Instruction {
            let mut buffer: Vec<u8> = Vec::new();

            buffer.extend_from_slice(&Self::discriminator());

            self.data.serialize(&mut buffer).unwrap();

            Instruction::new_with_bytes(program_id(), &buffer, self.to_account_metas())
        }
    }

    // ------------------------------------------------------------------------
    // Composite Accounts
    // ------------------------------------------------------------------------
}

// ----------------------------------------------------------------------------
// Program: callee
// ----------------------------------------------------------------------------
pub mod callee {
    use super::*;

    // ------------------------------------------------------------------------
    // Program ID
    // ------------------------------------------------------------------------

    /// Returns the program ID for callee
    pub fn program_id() -> Pubkey {
        pubkey!("CWjKHxkHU7kqRKqNutPAbxogKg3K1crH61gwwzsHjpC4")
    }

    // ------------------------------------------------------------------------
    // Instructions
    // ------------------------------------------------------------------------

    // ....................................................................
    // Instruction: InitializeCallee
    // ....................................................................

    /// Main instruction struct for InitializeCallee
    pub struct InitializeCalleeInstruction {
        pub accounts: InitializeCalleeInstructionAccountMetas,
        pub data: InitializeCalleeInstructionData,
        pub remaining_accounts: Vec<AccountMeta>,
    }

    /// Account metadata for InitializeCallee instruction
    #[derive(Debug, Clone, Default)]
    pub struct InitializeCalleeInstructionAccountMetas {
        pub signer: AccountMeta,
    }

    /// Account pubkeys for InitializeCallee instruction
    #[derive(Debug, Clone)]
    pub struct InitializeCalleeInstructionAccounts {
        pub signer: Pubkey,
    }

    impl InitializeCalleeInstructionAccounts {
        pub fn new(signer: Pubkey) -> Self {
            Self { signer }
        }
    }

    /// Instruction data for InitializeCallee
    #[derive(Debug, BorshDeserialize, BorshSerialize, Clone)]
    pub struct InitializeCalleeInstructionData {
        pub input: u16,
    }

    impl InitializeCalleeInstructionData {
        pub fn new(input: u16) -> Self {
            Self { input }
        }
    }

    /// Implementation for InitializeCalleeInstruction
    impl InitializeCalleeInstruction {
        fn discriminator() -> [u8; 8] {
            [164u8, 75u8, 79u8, 32u8, 57u8, 23u8, 116u8, 175u8]
        }

        pub fn data(data: InitializeCalleeInstructionData) -> Self {
            Self {
                accounts: InitializeCalleeInstructionAccountMetas::default(),
                data,
                remaining_accounts: Vec::new(),
            }
        }

        pub fn accounts(mut self, accounts: InitializeCalleeInstructionAccounts) -> Self {
            self.accounts.signer = AccountMeta::new_readonly(accounts.signer, true);

            self
        }

        pub fn remaining_accounts(mut self, accounts: Vec<AccountMeta>) -> Self {
            self.remaining_accounts = accounts;
            self
        }

        fn to_account_metas(&self) -> Vec<AccountMeta> {
            let mut metas = Vec::new();

            metas.push(self.accounts.signer.clone());

            metas.extend(self.remaining_accounts.clone());
            metas
        }

        pub fn instruction(&self) -> Instruction {
            let mut buffer: Vec<u8> = Vec::new();

            buffer.extend_from_slice(&Self::discriminator());

            self.data.serialize(&mut buffer).unwrap();

            Instruction::new_with_bytes(program_id(), &buffer, self.to_account_metas())
        }
    }

    // ------------------------------------------------------------------------
    // Composite Accounts
    // ------------------------------------------------------------------------
}

// ============================================================================
// CUSTOM TYPES
// ============================================================================

// ============================================================================
// END OF GENERATED FILE
// ============================================================================
