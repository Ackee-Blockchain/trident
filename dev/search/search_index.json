{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Trident","text":"Trident <p>Rust-based Fuzzing framework for Solana programs to help you ship secure code.</p> <ul> <li> <p> Getting Started</p> <p>Install the Trident Fuzz Testing Framework</p> <p>Installation</p> </li> <li> <p> Start Fuzzing</p> <p>Focus on security and start fuzzing immediately</p> <p>Start Fuzzing</p> </li> <li> <p> Check the GitHub for unreleased features</p> <p>Check our GitHub repository to see the unreleased features</p> <p>Trident Repository</p> </li> <li> <p> Trident by Examples</p> <p>Try the Fuzzing Examples</p> <p>Trident Examples</p> </li> </ul>"},{"location":"#what-is-fuzzing","title":"What is Fuzzing ?","text":"<p>\"Fuzz testing is an automated technique that provides generated random, invalid, or unexpected input data to your program. This helps discover unknown bugs and vulnerabilities, potentially preventing zero-day exploits.\"</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning (SemVer).</p> <p>Note: Version 0 of Semantic Versioning is handled differently from version 1 and above. The minor version will be incremented upon a breaking change and the patch version will be incremented for features.</p>"},{"location":"CHANGELOG/#dev-unreleased","title":"[dev] - Unreleased","text":"<p>Added</p> <ul> <li>added methods to check if account storage is empty (258)</li> <li>added support for post-instruction behavior (257)</li> </ul> <p>Removed</p> <p>Changed</p>"},{"location":"CHANGELOG/#090-2025-01-15","title":"[0.9.0] - 2025-01-15","text":"<p>Added</p> <ul> <li>added support for composite accounts (245)</li> <li>Trident SVM + AFL (see the PR for more details) (234)</li> </ul> <p>Removed</p> <ul> <li>removed fuzz_iteration from test_fuzz.rs (243)</li> </ul> <p>Changed</p> <ul> <li>renamed Config to TridentConfig (246)</li> <li>errors are simplified and transaction error contains only transaction error (244)</li> </ul>"},{"location":"CHANGELOG/#081-2024-11-14","title":"[0.8.1] - 2024-11-14","text":"<p>Removed</p> <ul> <li>removed unnecesarry deserialization with AccountsSnapshots, to deserialize data implementation AccountDeserialize can be used (221)</li> </ul> <p>Changed</p> <ul> <li>improve AccountsStorage module structure and remove unnecessary methods in FuzzClient (223)</li> <li>improve manipulations with AccountsStorages in get_accounts() function (219)</li> </ul> <p>Added</p> <ul> <li>add pre_sequence!, middle_sequence! and post_sequence! for easier sequence definition (220)</li> <li>add/ add support for Clock sysvar manipulations with the client(i.e. warp to slot/epoch and forward in time) (217)</li> </ul>"},{"location":"CHANGELOG/#080-2024-10-21","title":"[0.8.0] - 2024-10-21","text":"<p>Added</p> <ul> <li>impr/ allow to specify programs and accounts in the Trident Manifest (207)</li> <li>impr/ added get_program_id function to the IxOps and FuzzTestExecutor (199)</li> </ul> <p>Changed</p> <ul> <li>impr/ improve init command, modify program manifest automatically, add init force, add howto subcommand (208)</li> <li>impr/ allow to derive AccountsSnapshots for empty Account Context (209)</li> <li>impr/ fuzz flags are read at start of fuzzing session from Config instead of env variable and transaction dispatch was added to increase FuzzTestExecutor readability (204)</li> <li>impr/ allow various instructions to be generated in case of multiple programs in the Anchor workspace (200)</li> <li>feat/ option to add account into Fuzz Test environment with base64 data (197)</li> <li>impr/ instead of parsing source code and creating our IDL, read anchor IDL (198)</li> </ul> <p>Removed</p> <ul> <li>del/remove integration tests supported by Trident, this feature adds more unnecessary overhead compared to its value (196)</li> </ul>"},{"location":"CHANGELOG/#070-2024-08-14","title":"[0.7.0] - 2024-08-14","text":"<p>Added</p> <ul> <li>impr/ add feature flag to the AccountsSnapshots macro (183)</li> <li>feat/ add Support for CPI (182)</li> <li>feat/ add option to initialize Trident with Macro/File (for Snapshots) option based on preference (179)</li> <li>feat/create AccountsSnapshots derive macro for Snapshots creation (#177)</li> <li>feat/fuzzing moved to separate crate trident-fuzz (#175)</li> <li>feat/unify dependencies provided by the Trident (#172)</li> <li>feat/fuzzer-stats-logging, an optional statistics output for fuzzing session (#144)</li> </ul> <p>Fixed</p> <ul> <li>fix/in case of fuzzing failure throw error instead of only printing message (#167)</li> <li>fix/snapshot's zeroed account as optional (#170)</li> </ul> <p>Removed</p> <ul> <li>del/remove localnet subcommand (178)</li> <li>del/remove unnecessary fuzzing feature as trident is mainly fuzzer (#176)</li> <li>del/remove Trident explorer (#171)</li> </ul>"},{"location":"CHANGELOG/#060-2024-05-20","title":"[0.6.0] - 2024-05-20","text":"<p>Added</p> <ul> <li>feat/anchor 0.30.0 support (#148)</li> <li>fix/allow to process duplicate transactions (#147)</li> <li>feat/possibility to implement custom transaction error handling (#145)</li> <li>feat/support of automatically obtaining fully qualified paths of Data Accounts Custom types for <code>accounts_snapshots.rs</code> (#141)</li> <li>feat/allow direct accounts manipulation and storage (#142)</li> <li>feat/support of non-corresponding instruction and context names (#130)</li> <li>feat/refactored and improved program flow during init and build, added activity indicator (#129)</li> <li>feat/allow solana versions up to v1.17.* and pin Rust 1.77 nightly compiler (#128)</li> <li>feat/new init command option to initialize fuzz or poc tests only (#124)</li> <li>feat/debug-mode detailed output (#125)</li> <li>feat/anchor 0.29.0 support (#121)</li> <li>doc/add help comment + update documentation (#120)</li> <li>feat/fuzzer error handling (#118)</li> <li>feat/convert fuzz Pubkey to AccountId (#116)</li> <li>feat/additional anchor types (#115)</li> <li>feat/import ToAccountInfo trait in fuzzing prelude (#113)</li> <li>test/added code generation and macros tests (#112)</li> <li>feat/fuzzer framework core, macros, helpers, templates, and examples. (#111)</li> <li>feat/improved trident-tests folder structure for PoC and Fuzz Tests (#109)</li> <li>feat/support for additional fuzzer parameters in Trident.toml config file (#107)</li> <li>feat/posibility to pass params to the fuzzer via Trident.toml config file (#106)</li> <li>feat/client now reads by default keypair from default location (#105)</li> <li>feat/added new --exit-code option to return corresponding exit code based on fuzz test result (#104)</li> <li>feat/removed/updated deprecated functions, removed allow deprecated macros (#103)</li> <li>feat/added new function to read keypair file generated by Anchor (#102)</li> <li>feat/clean command (#101)</li> <li>feat/improved program_client generated code (#100)</li> <li>feat/automatically add hfuzz_target to .gitignore file (#99)</li> <li>feat/support for dynamic templates. (#98)</li> </ul> <p>Fixed</p> <ul> <li>fix/refactored fuzz test executor error handling (#127)</li> <li>fix/warn user on composite accounts and continue fuzz test generation (#133)</li> <li>fix/progress bar loop lock release (#132)</li> <li>fix/fixed fuzz test generation with init-if-needed Anchor feature (#131)</li> <li>fix/program client custom types (#117)</li> <li>fix/check fuzz test name collision by checking the name against HashSet (#114)</li> </ul>"},{"location":"CHANGELOG/#050-2023-08-28","title":"[0.5.0] - 2023-08-28","text":"<p>Added</p> <ul> <li>cli: Added trident subcommand <code>fuzz</code> to run and debug fuzz tests using honggfuzz-rs.</li> <li>cli: Added trident <code>--skip-fuzzer</code> option for <code>init</code> subcommand to skip generation of fuzz test templates.</li> <li>client: Added new Cargo feature <code>fuzzing</code> that enables optional dependencies related to fuzz testing.</li> </ul>"},{"location":"CHANGELOG/#041-2023-08-21","title":"[0.4.1] - 2023-08-21","text":"<p>Changed</p> <ul> <li>Upgrade Solana (<code>=1.16.6</code>) and Anchor framework (<code>=0.28.0</code>) versions.</li> </ul> <p>Fixed</p> <ul> <li>Implemented Anchor Client logic was not able to work with newer version of Anchor. Fixed with <code>async_rpc</code> and <code>async</code> feature.</li> <li>Trident init IDL Parse Error on newer version of Rust, fixed with updated <code>accounts</code> token.</li> </ul>"},{"location":"CHANGELOG/#030-2022-09-23","title":"[0.3.0] - 2022-09-23","text":"<p>Changed</p> <ul> <li>Upgrade Solana (<code>~1.10</code>) and Anchor framework (<code>~0.25</code>) versions</li> </ul> <p>Added</p> <ul> <li>Custom Solana RPC error reporter. If the Solana RPC error is thrown, the error code, message and data (logs) are reported to the output.</li> <li>Custom imports in the <code>.program_client</code>. User is able to import custom types and structures into program client. The import part of the code would not be re-generated.</li> </ul>"},{"location":"CHANGELOG/#020-2022-07-27","title":"[0.2.0] - 2022-07-27","text":"<p>Added</p> <ul> <li>Trident is now configurable. This requires <code>Trident.toml</code> file to exist in the project's root directory - without this file the execution will fail. To solve this re-run <code>trident init</code> or just create an empty <code>Trident.toml</code> file in the project's root directory.</li> </ul>"},{"location":"commands/commands/","title":"Commands","text":""},{"location":"commands/commands/#trident-init","title":"trident init","text":"<pre><code>trident init\n</code></pre> <ul> <li> <p>This command Initializes Trident Workspace and generates new Fuzz Test Template.</p> </li> <li> <p>The command will generate the following folder structure: <pre><code>project-root\n\u251c\u2500\u2500 trident-tests\n\u2502   \u251c\u2500\u2500 fuzz_tests # fuzz tests folder\n\u2502   \u2502   \u251c\u2500\u2500 fuzz_0 # particular fuzz test\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 test_fuzz.rs # the binary target of your fuzz test\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 fuzz_instructions.rs # the definition of your fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 fuzz_1\n\u2502   \u2502   \u251c\u2500\u2500 fuzz_X # possible multiple fuzz tests\n\u2502   \u2502   \u251c\u2500\u2500 fuzzing # compilations and crashes folder\n\u2502   \u2502   \u2514\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 Trident.toml\n\u2514\u2500\u2500 ...\n</code></pre></p> </li> </ul>"},{"location":"commands/commands/#trident-how","title":"trident how","text":"<pre><code>trident how\n</code></pre> <ul> <li>Print How To message about how to start writting fuzz tests.</li> </ul>"},{"location":"commands/commands/#trident-fuzz","title":"trident fuzz","text":"<pre><code>trident fuzz &lt;subcommand&gt;\n</code></pre> <ul> <li>Behavior depends on the subcommands.</li> </ul>"},{"location":"commands/commands/#trident-fuzz-run-afl","title":"trident fuzz run-afl","text":"<p>Warning</p> <p>To execute and debug fuzz tests, navigate to the <code>trident-tests</code> directory.</p> <pre><code>trident fuzz run-afl &lt;fuzz_target&gt;\n</code></pre> <ul> <li>Run AFL on the specified Fuzz Target (i.e. the Fuzz Template, for example fuzz_0).</li> </ul>"},{"location":"commands/commands/#output","title":"Output","text":"<p>TBD</p>"},{"location":"commands/commands/#trident-fuzz-run-hfuzz","title":"trident fuzz run-hfuzz","text":"<p>Warning</p> <p>To execute and debug fuzz tests, navigate to the <code>trident-tests</code> directory.</p> <pre><code>trident fuzz run-hfuzz &lt;fuzz_target&gt;\n</code></pre> <ul> <li>Run Honggfuzz on the specified Fuzz Target (i.e. the Fuzz Template, for example fuzz_0).</li> </ul>"},{"location":"commands/commands/#output_1","title":"Output","text":"<p>Important</p> <p>The output provided by Honggfuzz is as follows:</p> <ol> <li>Number of Fuzzing Iterations.</li> <li>Feedback Driven Mode = Honggfuzz generates data based on the feedback (i.e. feedback based on Coverage progress).</li> <li>Average Iterations per second.</li> <li>Number of crashes it found (panics or failed invariant checks).</li> </ol> <pre><code>------------------------[  0 days 00 hrs 00 mins 01 secs ]----------------------\n  Iterations : 688 (out of: 1000 [68%]) # -- 1. --\n  Mode [3/3] : Feedback Driven Mode # -- 2. --\n      Target : trident-tests/fuzz_tests/fuzzing.....wn-linux-gnu/release/fuzz_0\n     Threads : 16, CPUs: 32, CPU%: 1262% [39%/CPU]\n       Speed : 680/sec [avg: 688] # -- 3. --\n     Crashes : 1 [unique: 1, blocklist: 0, verified: 0] # -- 4. --\n    Timeouts : 0 [10 sec]\n Corpus Size : 98, max: 1048576 bytes, init: 0 files\n  Cov Update : 0 days 00 hrs 00 mins 00 secs ago\n    Coverage : edge: 10345/882951 [1%] pc: 163 cmp: 622547\n---------------------------------- [ LOGS ] ------------------/ honggfuzz 2.6 /-\n</code></pre>"},{"location":"commands/commands/#trident-fuzz-debug-afl","title":"trident fuzz debug-afl","text":"<pre><code>trident fuzz debug-afl &lt;fuzz_target&gt; &lt;crash_file_path&gt;\n</code></pre> <ul> <li>Run AFL debug on the specified Fuzz Target (i.e. the Fuzz Template, for example fuzz_0), with specified crash file, to see where the crash file found an issue.</li> </ul>"},{"location":"commands/commands/#output_2","title":"Output","text":"<p>TBD</p>"},{"location":"commands/commands/#trident-fuzz-debug-hfuzz","title":"trident fuzz debug-hfuzz","text":"<pre><code>trident fuzz debug-hfuzz &lt;fuzz_target&gt; &lt;crash_file_path&gt;\n</code></pre> <ul> <li>Run Honggfuzz debug on the specified Fuzz Target (i.e. the Fuzz Template, for example fuzz_0), with specified crash file, to see where the crash file found an issue.</li> </ul>"},{"location":"commands/commands/#output_3","title":"Output","text":"<p>Important</p> <p>The debug output is at current development stage really verbose and contains lldb parts. We are working on improving this experience. In the picture below you can see an example of provided debug output.</p> <ol> <li>Series of Transaction Logs</li> <li>Structures of data send within the Instructions</li> <li>Panic or Crash, based on if the Fuzzing panicked within the Solana Program or Invariant Check failed.</li> </ol> <p></p>"},{"location":"commands/commands/#trident-fuzz-add","title":"trident fuzz add","text":"<pre><code>trident fuzz add\n</code></pre> <ul> <li>Adds new Fuzz Test Template.</li> </ul>"},{"location":"commands/commands/#trident-clean","title":"trident clean","text":"<pre><code>trident clean\n</code></pre> <ul> <li>Calls <code>anchor clean</code> and cleans targets created by the underlying Honggfuzz. Crashfiles and Fuzzing Inputs are preserved.</li> </ul>"},{"location":"examples/examples/","title":"Trident by Examples","text":"<ul> <li> <p> Hello World!</p> <p>Hello World example with Trident.</p> <p>Hello World!</p> </li> <li> <p> Possible vulnerabilities and bugs</p> <p>Check the possible attack vectors and bugs that can be detected using Trident.</p> <p>Unchecked Arithmetic</p> <p>Incorrect Instruction Sequence</p> <p>Unauthorized Access</p> <p>Incorrect Integer Arithmetic</p> </li> <li> <p> Customize with Arbitrary</p> <p>You can use Arbitrary crate to your advantage and limit or customize the data that are sent to the instructions.</p> <p>Custom Data Types</p> <p>Limiting Instructions Inputs</p> </li> <li> <p> Cross-Program Invocation</p> <p>Trident supports Cross-Program Invocation, you can fuzz your programs and create NFTs at the same time.</p> <p>Simple CPI</p> <p>CPI with Metaplex Metadata Program</p> </li> <li> <p> Benchmarking</p> <p>Trident contains benchmarks of Daedaluzz: A Benchmark Generator for Smart-Contract Fuzzers rewritten in Rust.</p> <p>Trident Benchmark</p> </li> </ul>"},{"location":"faq/faq/","title":"FAQ","text":""},{"location":"faq/faq/#is-trident-supported-only-with-anchor","title":"Is Trident supported only with Anchor ?","text":"<ul> <li>Currently yes, Trident under the hood obtains data from the IDL generated by Anchor.</li> </ul>"},{"location":"faq/faq/#i-created-the-fuzz-test-what-should-i-do-next","title":"I created the Fuzz Test what should I do next ?","text":"<ul> <li>Start here Writing Fuzz Tests. For additional features check Features. If you are not sure about anything check Get Help</li> </ul>"},{"location":"faq/faq/#my-program-instruction-contains-custom-type-such-as-struct-or-enum-on-its-input-but-it-does-not-derive-arbitrary","title":"My program Instruction contains custom type such as Struct or Enum on its input, but it does not derive Arbitrary.","text":"<ul> <li>In this case you need to specify same type in the Fuzz Test (with the same fields). And implement From Trait to convert to your type. Check Custom Data Types or Examples of Arbitrary.</li> </ul>"},{"location":"faq/faq/#is-trident-open-source","title":"Is Trident open-source ?","text":"<ul> <li>Yes, here Trident</li> </ul>"},{"location":"faq/faq/#i-would-like-to-report-issue-with-trident-what-should-i-do","title":"I would like to report Issue with Trident, what should I do ?","text":"<ul> <li>Write Issue Issues</li> </ul>"},{"location":"faq/faq/#is-trident-deployed-on-mainnet-devnet-testenet","title":"Is Trident deployed on Mainnet / Devnet / Testenet ?","text":"<ul> <li>No, Trident is Fuzz Testing Framework, not Solana Program.</li> </ul>"},{"location":"faq/faq/#what-type-of-fuzzer-trident-is","title":"What type of Fuzzer Trident is ?","text":"<ul> <li>Currently, we refer to it as \"coverage guided gray box fuzzer\".</li> </ul>"},{"location":"features/account-storages/","title":"Account Storages","text":"<p>Trident allows developers to generate random accounts for fuzzing.</p> <p>However, the fuzzer cannot generate account addresses completely randomly, as the address has 32 bytes; this means that the fuzzer will, in most cases, generate incorrect addresses.</p> <p>Thus, Trident generates random AccountIDs which are indexes to Account Storages. Each unique account contained within the Anchor-generated IDL has its own AccountStorage. The FuzzAccounts containing the Account Storages are global to all instructions.</p> <p>Important</p> <p>There are two types of Account Storages:</p> <ul> <li>KeypairStore (dedicated for Keypairs)</li> <li>PdaStore (dedicated for Program Derived Addresses)</li> </ul> <pre><code>pub struct FuzzAccounts {\n    signer: AccountsStorage&lt;KeypairStore&gt;,\n    some_pda: AccountsStorage&lt;PdaStore&gt;,\n    // ...\n}\n</code></pre> <p>Tip</p> <p>Keep in mind:</p> <ul> <li>You do not need to specify every <code>AccountStorage</code>; some accounts do not necessarily need to be stored in their corresponding storage.<ul> <li>For example, the <code>System Program</code> does not need to be stored and can be used from the <code>solana_sdk</code> as a constant account address.</li> </ul> </li> <li>If you are going to initialize an <code>Associated Token Account</code> in your Solana Program, use <code>PdaStore</code>.</li> <li>You can rename fields of <code>FuzzAccounts</code> to whatever you want. The default names are generated based on the Program's <code>IDL</code>.</li> </ul>"},{"location":"features/account-storages/#account-storage-methods","title":"Account Storage Methods","text":"<p>There are multiple methods to interact with Account Storages.</p>"},{"location":"features/account-storages/#get_or_create_account","title":"<code>get_or_create_account()</code>","text":"<p>Retrieves a record from AccountsStorage based on the entered <code>account_id</code>. If no record exists for the <code>account_id</code>, a new empty account is created.</p>"},{"location":"features/account-storages/#get","title":"<code>get()</code>","text":"<p>Retrieves a record from AccountsStorage based on the entered <code>account_id</code>. If no record exists for the <code>account_id</code>, a random public key is returned.</p>"},{"location":"features/account-storages/#get_or_create_token_account","title":"<code>get_or_create_token_account()</code>","text":"<p>Retrieves a record from AccountsStorage based on the entered <code>account_id</code>. If no record exists for the <code>account_id</code>, a new Token account is created.</p>"},{"location":"features/account-storages/#get_or_create_mint_account","title":"<code>get_or_create_mint_account()</code>","text":"<p>Retrieves a record from AccountsStorage based on the entered <code>account_id</code>. If no record exists for the <code>account_id</code>, a new Mint account is created.</p>"},{"location":"features/account-storages/#get_or_create_delegated_account","title":"<code>get_or_create_delegated_account()</code>","text":"<p>Retrieves a record from AccountsStorage based on the entered <code>account_id</code>. If no record exists for the <code>account_id</code>, a new Delegated account is created.</p>"},{"location":"features/account-storages/#get_or_create_initialized_account","title":"<code>get_or_create_initialized_account()</code>","text":"<p>Retrieves a record from AccountsStorage based on the entered <code>account_id</code>. If no record exists for the <code>account_id</code>, a new Initialized account is created.</p>"},{"location":"features/account-storages/#get_or_create_vote_account","title":"<code>get_or_create_vote_account()</code>","text":"<p>Retrieves a record from AccountsStorage based on the entered <code>account_id</code>. If no record exists for the <code>account_id</code>, a new Vote account is created.</p> <p>Tip</p> <p>Consider checking the Examples section for more tips.</p>"},{"location":"features/customize-ix-data/","title":"Customize Instruction Data","text":"<p>Trident allows you to customize instruction data.</p> <p>Trident by default generates random data for instructions, however, you can customize the data to select specific values.</p> <p>For example, your Initialize Instruction expects two arguments: <code>start_at</code> and <code>end_at</code>. You know that in order for the Instruction to make sense, it is required that <code>start_at</code> &lt; <code>end_at</code>. Moreover, there should be a significant difference between these two. This can be utilized with the Arbitrary crate.</p> <pre><code>#[derive(Arbitrary, Debug)]\npub struct InitVestingData {\n    pub recipient: AccountId,\n    #[arbitrary(\n        with = |u: &amp;mut arbitrary::Unstructured| u.int_in_range(1..=1_000_000)\n    )]\n    pub amount: u64,\n    // we want start_at smaller than end_at\n    // and for testing purposes we can run tests with times from the past\n    #[arbitrary(\n        with = |u: &amp;mut arbitrary::Unstructured| u.int_in_range(0..=1_000_000)\n    )]\n    pub start_at: u64,\n    #[arbitrary(\n        with = |u: &amp;mut arbitrary::Unstructured| u.int_in_range(1_001_001..=1_050_000)\n    )]\n    pub end_at: u64,\n    #[arbitrary(\n        with = |u: &amp;mut arbitrary::Unstructured| u.int_in_range(1..=1000)\n    )]\n    pub interval: u64,\n}\n</code></pre>"},{"location":"features/customize-ix-data/#implement-arbitrary","title":"Implement Arbitrary","text":"<p>There are macros available to use with Arbitrary, however, it is possible to Implement the arbitrary function by yourself.</p> <pre><code>// -------------------------------------------------------------------\n// -------------------------------------------------------------------\n// Implement Arbitrary\nimpl&lt;'a&gt; Arbitrary&lt;'a&gt; for InitVestingData {\n    fn arbitrary(\n        u: &amp;mut arbitrary::Unstructured&lt;'a&gt;\n    ) -&gt; arbitrary::Result&lt;Self&gt; {\n        // obtain AccountId\n        let recipient = AccountId::arbitrary(u)?;\n\n        // limit the generated amount to the 1_000_000\n        let amount = u.int_in_range(1..=1_000_000)?;\n\n        // now we want to obtain\n        // - start_at\n        // - end_at\n        // - interval\n        // however we want to limit the data such that:\n        // - start_at &lt; end_at\n        // - end_at - start_at &gt; interval\n        // - interval has lower limit of 500 and upper limit of 1000.\n\n        let start_at: u64 = u.int_in_range(1_000_000..=5_000_000)?;\n        let end_at: u64 = u.int_in_range(1_000_000..=5_000_000)?;\n        let interval: u64 = u.int_in_range(500..=1000)?;\n\n        // ensure that start_at &lt; end_at\n        if start_at &gt;= end_at {\n            return Err(arbitrary::Error::IncorrectFormat);\n        }\n\n        // ensure that end_at - start_at &gt; interval\n        match end_at.checked_sub(start_at) {\n            Some(diff) =&gt; {\n                if diff &lt;= interval {\n                    return Err(arbitrary::Error::IncorrectFormat);\n                }\n            }\n            None =&gt; return Err(arbitrary::Error::IncorrectFormat),\n        }\n\n        Ok(InitVestingData {\n            recipient,\n            amount,\n            start_at,\n            end_at,\n            interval,\n        })\n    }\n    // -------------------------------------------------------------------\n    // -------------------------------------------------------------------\n}\n</code></pre> <p>Tip</p> <p>Consider checking the Examples section for more tips.</p>"},{"location":"features/error-handlers/","title":"Error Handler","text":"<p>Trident allows you to specify a custom error handler for each instruction.</p> <p>This can be particularly helpful in the following scenarios:</p> <ul> <li>If a transaction returns an error, you can choose to omit this error and continue the fuzzing process.</li> <li>Using the <code>tx_error_handler</code>, you can check if the returned error is desired based on the accounts and input data that were used.</li> </ul> <p>Tip</p> <p>By default, transaction errors are propagated, meaning that if the transaction fails, the fuzzing iteration is stopped, and a new fuzzing iteration is started.</p> <pre><code>/// Default implementation\nfn tx_error_handler(\n    &amp;self,\n    e: TransactionError,\n    ix_data: Vec&lt;u8&gt;,\n    pre_ix_acc_infos: &amp;[SnapshotAccount],\n) -&gt; Result&lt;(), TransactionError&gt; {\n    Err(e)\n}\n</code></pre> <p>To omit the error and continue with the next instruction in the iteration, you can use the following implementation:</p> <pre><code>/// Custom implementation\nfn tx_error_handler(\n    &amp;self,\n    e: TransactionError,\n    ix_data: Vec&lt;u8&gt;,\n    pre_ix_acc_infos: &amp;[SnapshotAccount],\n) -&gt; Result&lt;(), TransactionError&gt; {\n    Ok(())\n}\n</code></pre>"},{"location":"features/features/","title":"Trident Features","text":"<p>Trident contains multiple features to enhance the fuzzing experience and increase ability to discover bugs.</p> <ul> <li> <p> AccountStorages</p> <p>Initialize, store and re-use random Accounts.</p> <p>AccountStorages</p> </li> <li> <p> FuzzInstructions</p> <p>All available Program Instructions as FuzzInstructions Variants.</p> <p>FuzzInstructions</p> </li> <li> <p> Custom Instruction Sequences</p> <p>Specify Instruction Sequqnces you would like to executed instead of completely random execution order.</p> <p>Custom Instruction Sequences</p> </li> <li> <p> Invariant Checks</p> <p>Allows to compare Account contents before and after the Instruction was successfully executed.</p> <p>Invariant Checks</p> </li> <li> <p> Programs and Accounts</p> <p>Include programs and accounts from the desired cluster (Mainnet, Devnet, etc.).</p> <p>Programs and Accounts</p> </li> <li> <p> Fuzzing Statistics</p> <p>Show Fuzzing Statistics after the Fuzzing Session ended.</p> <p>Fuzzing Statistics</p> </li> <li> <p> Customize Instruction Data</p> <p>Customize Instruction data, for example, to use integers from specific range.</p> <p>Customize Instruction Data</p> </li> <li> <p> Trident Manifest</p> <p>Customize Fuzzing experience with the Trident Manifest.</p> <p>Trident Manifest</p> </li> <li> <p> Custom Error Handlers</p> <p>Continue Instruction Sequence in case of Instruction Error was returned or specify custom behavior based on the returned error.</p> <p>Custom Error Handlers</p> </li> </ul>"},{"location":"features/fuzz-instructions/","title":"Fuzz Instructions","text":"<p>Trident defines the <code>FuzzInstruction</code> enum, which contains all available Instructions within your program. Each enum variant corresponds to one instruction within your program. This enum is crucial for defining how different instructions behave during fuzz testing.</p> <p>The enum variants additionally contain their corresponding structures for Accounts and Input arguments.</p> <pre><code>#[derive(Arbitrary, DisplayIx, FuzzTestExecutor)]\npub enum FuzzInstruction {\n    Initialize(Initialize),\n    Update(Update),\n}\n#[derive(Arbitrary, Debug)]\npub struct Initialize {\n    pub accounts: InitializeAccounts,\n    pub data: InitializeData,\n}\n#[derive(Arbitrary, Debug)]\npub struct Update {\n    pub accounts: UpdateAccounts,\n    pub data: UpdateData,\n}\n// ...\n</code></pre>"},{"location":"features/fuzz-instructions/#instruction-behavior","title":"Instruction Behavior","text":"<p>Each Instruction variant must define the <code>IxOps</code> trait, which contains the following methods:</p> <ul> <li><code>get_discriminator()</code> (automatically implemented)</li> <li><code>get_program_id()</code> (automatically implemented)</li> <li><code>get_data()</code> (required)</li> <li><code>get_accounts()</code> (required)</li> <li><code>check()</code> (optional)</li> <li><code>tx_error_handler()</code> (optional)</li> </ul>"},{"location":"features/fuzz-instructions/#get_discriminator","title":"<code>get_discriminator()</code>","text":"<p>This method specifies the discriminator of the instruction.</p> <p>Tip</p> <ul> <li>The IDL created by Anchor 0.29.0 and lower does not contain the discriminator. In that case, the discriminator is generated automatically.</li> <li>If you are experiencing errors with the wrong discriminator, you can specify it manually by hashing <code>global:&lt;instruction_name&gt;</code> with SHA256 and taking the first 8 bytes.</li> </ul>"},{"location":"features/fuzz-instructions/#get_program_id","title":"<code>get_program_id()</code>","text":"<p>This method specifies the program ID to which the Instruction corresponds.</p>"},{"location":"features/fuzz-instructions/#get_data","title":"<code>get_data()</code>","text":"<p>This method specifies what the Instruction Input Data should look like. You can use completely random data generated by the fuzzer, such as:</p> <pre><code>fn get_data(\n    &amp;self,\n    client: &amp;mut impl FuzzClient,\n    fuzz_accounts: &amp;mut FuzzAccounts,\n) -&gt; Result&lt;Vec&lt;u8&gt;, FuzzingError&gt; {\n    let mut args: Vec&lt;u8&gt; = self.get_discriminator();\n    {\n        args.extend(borsh::to_vec(&amp;self.data.input).unwrap());\n    }\n    Ok(args)\n}\n</code></pre> <p>You can also use always constant values:</p> <pre><code>fn get_data(\n    &amp;self,\n    client: &amp;mut impl FuzzClient,\n    fuzz_accounts: &amp;mut FuzzAccounts,\n) -&gt; Result&lt;Vec&lt;u8&gt;, FuzzingError&gt; {\n    let mut args: Vec&lt;u8&gt; = self.get_discriminator();\n    {\n        // The constant value 5 is used as an example\n        args.extend(borsh::to_vec(5).unwrap());\n    }\n    Ok(args)\n}\n</code></pre> <p>Additionally, you can limit the range of the data generated using the <code>Arbitrary</code> crate. Check Arbitrary Data.</p>"},{"location":"features/fuzz-instructions/#get_accounts","title":"<code>get_accounts()</code>","text":"<p>This method specifies the Accounts that will be used for the corresponding Instruction. To use multiple combinations of accounts, Trident utilizes the AccountStorage, where accounts are stored across the fuzzing process.</p> <p>There are three main functions to use within the <code>get_accounts()</code>:</p> <ul> <li><code>get_or_create_account()</code></li> <li><code>get()</code></li> <li><code>set_account_custom()</code></li> </ul> <p>For additional methods, check Account Storage Methods.</p>"},{"location":"features/fuzz-instructions/#get_or_create_account","title":"<code>get_or_create_account()</code>","text":"<p>Retrieves a record from AccountsStorage based on the entered <code>account_id</code>. If no record exists for the <code>account_id</code>, a new empty account is created.</p> <p>Tip</p> <ul> <li>This function is particularly useful for instructions that initialize accounts.</li> </ul> <p>Example:</p> <pre><code>let hello_world_account = fuzz_accounts.hello_world_account.get_or_create_account(\n    self.accounts.hello_world_account,\n    client,\n    &amp;[b\"hello_world_seed\"],\n    &amp;hello_world::ID,\n);\n</code></pre>"},{"location":"features/fuzz-instructions/#get","title":"<code>get()</code>","text":"<p>Retrieves a record from AccountsStorage based on the entered <code>account_id</code>. If no record exists for the <code>account_id</code>, a random public key is returned.</p> <p>Tip</p> <ul> <li>This function is particularly useful for instructions other than those that perform initialization.</li> </ul> <p>Example:</p> <pre><code>let hello_world_account = fuzz_accounts\n        .hello_world_account\n        .get(self.accounts.hello_world_account);\n</code></pre>"},{"location":"features/fuzz-instructions/#set_account_custom","title":"<code>set_account_custom()</code>","text":"<p>If the previous two functions are insufficient, you can use <code>set_account_custom()</code> to manually set an account with data you select.</p> <p>Tip</p> <p>Example:</p> <pre><code>let author = fuzz_accounts.author_hello_world.get_or_create_account(\n    self.accounts.author,\n    client,\n    500 * LAMPORTS_PER_SOL,\n);\nclient.set_account_custom(\n    &amp;author.pubkey(),\n    &amp;AccountSharedData::create(\n        10 * LAMPORTS_PER_SOL,\n        vec![1, 2, 3, 4, 5, 6, 7, 8, 9],\n        solana_sdk::system_program::ID,\n        false,\n        0,\n    ),\n);\n</code></pre>"},{"location":"features/fuzz-instructions/#check","title":"<code>check()</code>","text":"<p>This method provides an Invariant Check for the corresponding Instruction. Check Invariant Checks.</p>"},{"location":"features/fuzz-instructions/#tx_error_handler","title":"<code>tx_error_handler()</code>","text":"<p>This method provides a Tx Error Handler for the corresponding Instruction. Check Error Handler.</p>"},{"location":"features/fuzz-instructions/#example","title":"Example","text":"<p>Tip</p> <p>Consider checking the Examples section for more tips.</p>"},{"location":"features/fuzzing-statistics/","title":"Fuzzing Statistics","text":"<p>Trident allows you to see statistics after the fuzzing session ended.</p> <p>Important</p> <p>In order to show statistics set <code>fuzzing_with_stats</code> within the <code>Trident.toml</code> to <code>true</code>.</p> <pre><code>[fuzz]\n# ...\nfuzzing_with_stats = true\n# ...\n</code></pre>"},{"location":"features/fuzzing-statistics/#available-statistics","title":"Available Statistics","text":""},{"location":"features/fuzzing-statistics/#simple","title":"Simple","text":"<ul> <li>Number of invocations of each instruction during the fuzzing session.</li> <li>Number of successful invocations of each instruction during the fuzzing session.</li> <li>Number of failed invariants checks for each instruction during the fuzzing session.</li> </ul> Note <p>Keep in mind that the number of fuzz iterations does not directly correspond to the total number of invocations. In one fuzz iteration, the fuzzer might be unable to deserialize fuzz data into instructions, causing the entire iteration to be skipped.</p> <p>On the other hand, this is expected behavior as the underlying data are randomly (with coverage feedback) generated, so the Honggfuzz will not necessarily find appropriate data each iteration.</p> <p>Tip</p> <p>Consider checking the Examples section for more tips.</p>"},{"location":"features/instructions-sequences/","title":"Instructions Sequences","text":"<p>Trident allows you to specify custom instruction sequences that you would like to execute.</p> <p>Possible instruction sequences are divided into three parts:</p> <ul> <li>Pre-Instructions</li> <li>Instructions</li> <li>Post-Instructions</li> </ul> <p>For example, if your program requires an Initialization instruction at the start, you can specify it using the <code>pre_sequence()</code> macro, as shown in the source code below.</p> <pre><code>// test_fuzz.rs\n\n/// ...\n\nstruct InstructionsSequence;\n/// Define instruction sequences for invocation.\n/// `pre` runs at the start, `middle` in the middle, and `post` at the end.\n/// For example, to call `InitializeFn`, `UpdateFn` and then `WithdrawFn` during\n/// each fuzzing iteration:\n/// ```\n/// impl FuzzDataBuilder&lt;FuzzInstruction&gt; for InstructionsSequence {\n///     pre_sequence!(InitializeFn,UpdateFn);\n///     middle_sequence!(WithdrawFn);\n///}\n/// ```\n/// For more details, see:\n/// https://ackee.xyz/trident/docs/dev/features/instructions-sequences/#instructions-sequences\nimpl FuzzDataBuilder&lt;FuzzInstruction&gt; for InstructionsSequence {\n    pre_sequence!(InitializeFn);\n    middle_sequence!();\n    post_sequence!();\n}\n\n/// ...\n</code></pre> <p>Tip</p> <ul> <li>The arguments to the macro are variants of <code>FuzzInstruction</code> specified in <code>fuzz_instructions.rs</code>.</li> <li>Empty macro parameters (such as <code>middle_sequence!()</code>) will skip that section, meaning no instructions will be executed during that phase.</li> <li>If no macro is defined for a section, a random instruction sequence will be generated for that section.</li> </ul>"},{"location":"features/instructions-sequences/#manual-trait-override","title":"Manual Trait Override","text":"<p>It is not necessary to use the macro as explained above. The trait implementation (i.e., the methods) can be implemented manually, allowing for greater customization if needed. The rules are the same as described above.</p> <pre><code>// test_fuzz.rs\n\n// Do not forget to include the required structures\nuse fuzz_instructions::InitVesting;\nuse fuzz_instructions::WithdrawUnlocked;\n\nimpl FuzzDataBuilder&lt;FuzzInstruction&gt; for MyFuzzData {\n    fn pre_ixs(\n        u: &amp;mut arbitrary::Unstructured\n    ) -&gt; arbitrary::Result&lt;Vec&lt;FuzzInstruction&gt;&gt; {\n        let init_ix =\n            FuzzInstruction::InitVesting(InitVesting::arbitrary(u)?);\n\n        Ok(vec![init_ix])\n    }\n    fn ixs(\n        u: &amp;mut arbitrary::Unstructured\n    ) -&gt; arbitrary::Result&lt;Vec&lt;FuzzInstruction&gt;&gt; {\n        let withdraw_ix =\n            FuzzInstruction::WithdrawUnlocked(WithdrawUnlocked::arbitrary(u)?);\n\n        Ok(vec![withdraw_ix])\n    }\n    fn post_ixs(\n        _u: &amp;mut arbitrary::Unstructured\n    ) -&gt; arbitrary::Result&lt;Vec&lt;FuzzInstruction&gt;&gt; {\n        Ok(vec![])\n    }\n}\n</code></pre> <p>Tip</p> <p>Consider checking the Examples section for more tips on implementing instruction sequences effectively.</p>"},{"location":"features/invariant-checks/","title":"Invariant Checks","text":"<p>Trident allows you to (optionally) specify invariant checks for each Instruction.</p> <p>The invariant check will be called after the Instruction has been successfully invoked. Within the invariant check, you can compare the contents of accounts before and after the Instruction.</p> <p>Important</p> <p>Returning an error in the Invariant Check is considered a detection of undesired behavior (i.e., issue/crash detected).</p> <pre><code>fn check(\n    &amp;self,\n    pre_ix: &amp;[SnapshotAccount],\n    post_ix: &amp;[SnapshotAccount],\n    ix_data: Vec&lt;u8&gt;,\n) -&gt; Result&lt;(), FuzzingError&gt; {\n    if let Ok(hello_world_account) =\n        StoreHelloWorld::deserialize(&amp;mut post_ix[1].data_no_discriminator())\n    {\n        if hello_world_account.input == 253 {\n            return Err(FuzzingError::Custom(1));\n        }\n    }\n    Ok(())\n}\n</code></pre> <p>Important</p> <p>The order of accounts within the array is the same as the order of accounts in the instruction input of your program.</p>"},{"location":"features/invariant-checks/#account-deserialization","title":"Account Deserialization","text":"<p>The <code>SnapshotAccount</code> provides methods to obtain parts of the account (e.g., address, its data, owner, etc.).</p> <p>If you want to deserialize data into a struct defined within your program, ensure that the struct is present in the fuzz test template and has derived the <code>BorshDeserialize</code> and <code>BorshSerialize</code> traits, as shown in the example below:</p> <pre><code>#[derive(Debug, BorshDeserialize, BorshSerialize, Clone)]\npub struct StoreHelloWorld {\n    recipient: Pubkey,\n    input: u8,\n}\n</code></pre> <p>Tip</p> <p>Consider checking the Examples section for more tips.</p>"},{"location":"features/lifecycle/","title":"Fuzz Test Lifecycle","text":"<p>In the sequence diagram below you can see a simplified fuzz test lifecycle.</p> <p>Some diagram states are labeled with emojis:</p> <ul> <li>\u26a1 Mandatory methods that must be implemented by the user.</li> <li>\ud83d\udc64 Optional methods that can be implemented by the user.</li> </ul>"},{"location":"features/lifecycle/#lifecycle","title":"Lifecycle","text":"<ol> <li>The fuzzer is running until:<ol> <li>The maximal number of iterations is reached (if specified).</li> <li>A crash was detected and the <code>exit_upon_crash</code> parameter was set.</li> <li>User interrupted the test manually (for example by hitting <code>CTRL+C</code>).</li> </ol> </li> <li>In each iteration, the fuzzer generates a sequence of random instructions to execute.<ol> <li>User can optionally customize how the instructions are generated and can specify the instructions that should be executed at the beginning (<code>pre_ixs</code>), in the middle (<code>ixs</code>) and at the end (<code>post_ixs</code>) of each iteration. This can be useful for example if your program needs an initialization or you want to fuzz some specific program state.</li> </ol> </li> <li>For each instruction:<ol> <li>User defined mandatory method <code>get_accounts()</code> is called to collect necessary instruction accounts.</li> <li>User defined mandatory method <code>get_data()</code> is called to collect instruction data.</li> <li>A snapshot of all instruction accounts before the instruction execution is saved.</li> <li>The instruction is executed.</li> <li>A snapshot of all instruction accounts after the instruction execution is saved.</li> <li>User defined optional method <code>check()</code> is called to check accounts data and evaluate invariants.</li> </ol> </li> </ol> fuzzer_iterations = 0fuzzer_iterations = 0fuzzer_iterations &lt;\u00a0max_iterationsfuzzer_iterations &lt;...donedonecreate pre-instruction\u00a0accounts snapshotscreate pre-instruction...execute instructionexecute instructioncreate post-instruction\u00a0accounts snapshotscreate post-instruction...check invariants \ud83d\udc64check invariants \ud83d\udc64fuzzer_iterations++fuzzer_iterations++Generate instructionspre_ixs \ud83d\udc64pre_ixs \ud83d\udc64ixs \ud83d\udc64ixs \ud83d\udc64post_ixs \ud83d\udc64post_ixs \ud83d\udc64endendfor ix in instructionsfor ix in instructionsget instruction accounts \u26a1get instruction accounts \u26a1get instruction data \u26a1get instruction data \u26a1next ixnext ixText is not SVG - cannot display"},{"location":"features/limitations/","title":"Current Limitations","text":"<p>This section summarizes some known limitations in the current development stage. Further development will be focused on resolving these limitations.</p> <ul> <li>Remaining accounts in check methods are not supported.</li> </ul>"},{"location":"features/programs-n-accounts/","title":"Programs and Accounts","text":"<p>Trident allows for usage of programs and accounts from the desired cluster (Mainnet, Devnet, etc.).</p>"},{"location":"features/programs-n-accounts/#include-mainnet-programs","title":"Include Mainnet Programs","text":"<p>In case you want to include programs from Mainnet, you can do so by specifying the address and path to the program in the <code>Trident.toml</code>.</p> <pre><code>[[fuzz.programs]]\naddress = \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\nprogram = \"metaplex-program/metaplex-token-metadata.so\"\n</code></pre> <p>Tip</p> <p>If you want to dump a program from Mainnet, use</p> <pre><code># -u m specifies to dump from mainnet\nsolana program dump -u m &lt;PROGRAM_ID&gt; &lt;PROGRAM_NAME&gt;.so\n</code></pre>"},{"location":"features/programs-n-accounts/#include-mainnet-accounts","title":"Include Mainnet Accounts","text":"<p>In case you want to include accounts from Mainnet, you can do so by specifying the address and path to the account in the <code>Trident.toml</code>.</p> <pre><code>[[fuzz.accounts]]\naddress = \"6YG3J7PaxyMnnbU67ifyrgF3BzNzc7cD8hPkqK6ATweE\"\nfilename = \"tests/accounts/core_bridge_mainnet/guardian_set_5_mock.json\"\n</code></pre> <p>Tip</p> <p>If you want to obtain an account with <code>base64</code> data format, use</p> <pre><code># -u m specifies to dump from mainnet\nsolana account -u m &lt;ADDRESS&gt; --output json\n</code></pre>"},{"location":"features/programs-n-accounts/#include-programs-through-the-entrypoint","title":"Include Programs Through the Entrypoint","text":"<p>There is another way to include programs in the Fuzz Test Environment. Including programs through the entrypoint is better for fuzzing, as the program is built together with the fuzz test, so that it will contain instrumentation which helps the fuzzer to better cover all possible program branches. However, the source code is required to do so.</p> <p>You can include additional programs using the program entrypoint, as shown in the example below:</p> <pre><code>// test_fuzz.rs\n\nuse callee::entry as entry_callee;\nuse caller::entry as entry_caller;\n\n// ...\n\nfn main() {\n    // Program 1\n    let program_callee = ProgramEntrypoint::new(\n        pubkey!(\"HJR1TK8bgrUWzysdpS1pBGBYKF7zi1tU9cS4qj8BW8ZL\"),\n        None,\n        processor!(entry_callee),\n    );\n\n    // Program 2\n    let program_caller = ProgramEntrypoint::new(\n        pubkey!(\"FWtSodrkUnovFPnNRCxneP6VWh6JH6jtQZ4PHoP8Ejuz\"),\n        None,\n        processor!(entry_caller),\n    );\n    let config = Config::new();\n\n    let mut client = TridentSVM::new_client(\n        &amp;[program_callee, program_caller],\n        &amp;config\n    );\n\n    fuzz_trident !\n        (fuzz_ix : FuzzInstruction , | fuzz_data : InstructionsSequence |\n            { fuzz_iteration (fuzz_data , &amp; config , &amp; mut client) ; });\n}\n</code></pre> <p>Tip</p> <p>Consider checking the Examples section for more tips.</p>"},{"location":"features/trident-manifest/","title":"Trident Manifest","text":"<p>You can pass supported parameters via the Trident.toml configuration file:</p>"},{"location":"features/trident-manifest/#fuzz","title":"[fuzz]","text":""},{"location":"features/trident-manifest/#programs","title":"programs","text":"<ul> <li>Use dumped program from desired cluster, during fuzzing.</li> </ul> <pre><code>[[fuzz.programs]]\naddress = \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\nprogram = \"metaplex-program/metaplex-token-metadata.so\"\n</code></pre>"},{"location":"features/trident-manifest/#accounts","title":"accounts","text":"<ul> <li>Use dumped accounts from desired cluster, during fuzzing.</li> </ul> <pre><code>[[fuzz.accounts]]\naddress = \"6YG3J7PaxyMnnbU67ifyrgF3BzNzc7cD8hPkqK6ATweE\"\nfilename = \"tests/accounts/core_bridge_mainnet/guardian_set_5_mock.json\"\n</code></pre>"},{"location":"features/trident-manifest/#allow_duplicate_txs","title":"allow_duplicate_txs","text":"<ul> <li>Allow processing of duplicate transactions. Setting to true might speed up fuzzing but can cause false positive crashes (default: false).</li> </ul> <pre><code>[fuzz]\n# Allow processing of duplicate transactions.\n# Setting to true might speed up fuzzing but can cause\n# false positive crashes (default: false)\nallow_duplicate_txs = false\n</code></pre>"},{"location":"features/trident-manifest/#fuzzing_with_stats","title":"fuzzing_with_stats","text":"<ul> <li>Trident will show statistics after the fuzzing session. This option forces use of honggfuzz parameter <code>keep_output</code> as true in order to be able to catch fuzzer stdout. (default: false)</li> </ul> <pre><code>[fuzz]\n# Trident will show statistics after the fuzzing session.\n# This option forces use of honggfuzz parameter\n# `keep_output` as true in order to be able to catch fuzzer stdout.\n# (default: false)\nfuzzing_with_stats = true\n</code></pre>"},{"location":"features/trident-manifest/#honggfuzz","title":"[honggfuzz]","text":""},{"location":"features/trident-manifest/#run_time","title":"run_time","text":"<ul> <li>Number of seconds this fuzzing session will last (default: 0 [no limit])</li> </ul> <pre><code>[honggfuzz]\n# Number of seconds this fuzzing session will last (default: 0 [no limit])\nrun_time = 0\n</code></pre>"},{"location":"features/trident-manifest/#iterations","title":"iterations","text":"<ul> <li>Number of fuzzing iterations (default: 0 [no limit])</li> </ul> <pre><code>[honggfuzz]\n# Number of fuzzing iterations (default: 0 [no limit])\niterations = 0\n</code></pre>"},{"location":"features/trident-manifest/#threads","title":"threads","text":"<ul> <li>Number of concurrent fuzzing threads (default: 0 [number of CPUs / 2])</li> </ul> <pre><code>[honggfuzz]\n# Number of concurrent fuzzing threads (default: 0 [number of CPUs / 2])\nthreads = 0\n</code></pre>"},{"location":"features/trident-manifest/#keep_output","title":"keep_output","text":"<ul> <li>Don't close children's stdin, stdout, stderr; can be noisy (default: false)</li> </ul> <pre><code>[honggfuzz]\n# Don't close children's stdin, stdout, stderr; can be noisy (default: false)\nkeep_output = false\n</code></pre>"},{"location":"features/trident-manifest/#verbose","title":"verbose","text":"<ul> <li>Disable ANSI console; use simple log output (default: false)</li> </ul> <pre><code>[honggfuzz]\n# Disable ANSI console; use simple log output (default: false)\nverbose = false\n</code></pre>"},{"location":"features/trident-manifest/#exit_upon_crash","title":"exit_upon_crash","text":"<ul> <li>Exit upon seeing the first crash (default: false)</li> </ul> <pre><code>[honggfuzz]\n# Exit upon seeing the first crash (default: false)\nexit_upon_crash = false\n</code></pre>"},{"location":"features/trident-manifest/#mutations_per_run","title":"mutations_per_run","text":"<ul> <li>Maximal number of mutations per one run (default: 6)</li> </ul> <pre><code>[honggfuzz]\n# Maximal number of mutations per one run (default: 6)\nmutations_per_run = 6\n</code></pre>"},{"location":"features/trident-manifest/#cargo_target_dir","title":"cargo_target_dir","text":"<ul> <li>Target compilation directory, (default: \"\" [\"trident-tests/fuzzing/honggfuzz/hfuzz_target\"]).</li> <li>To not clash with cargo build's default target directory.</li> </ul> <pre><code>[honggfuzz]\n# Target compilation directory,\n# (default: \"\" [\"trident-tests/fuzz_tests/fuzzing/honggfuzz/hfuzz_target\"]).\n# To not clash with cargo build's default target directory.\ncargo_target_dir = \"\"\n</code></pre>"},{"location":"features/trident-manifest/#hfuzz_workspace","title":"hfuzz_workspace","text":"<ul> <li>Honggfuzz working directory, (default: \"\" [\"trident-tests/fuzzing/honggfuzz/hfuzz_workspace\"]).</li> </ul> <pre><code>[honggfuzz]\n# Honggfuzz working directory,\n# (default: \"\" [\"trident-tests/fuzz_tests/fuzzing/honggfuzz/hfuzz_workspace\"]).\nhfuzz_workspace = \"\"\n</code></pre>"},{"location":"features/trident-manifest/#crashdir","title":"crashdir","text":"<ul> <li>Directory where crashes are saved to (default: \"\" [workspace directory])</li> </ul> <pre><code>[honggfuzz]\n# Directory where crashes are saved to (default: \"\" [workspace directory])\ncrashdir = \"\"\n</code></pre>"},{"location":"features/trident-manifest/#extension","title":"extension","text":"<ul> <li>Input file extension (e.g. 'swf'), (default: \"\" ['fuzz'])</li> </ul> <pre><code>[honggfuzz]\n# Input file extension (e.g. 'swf'), (default: \"\" ['fuzz'])\nextension = \"\"\n</code></pre>"},{"location":"features/trident-manifest/#timeout","title":"timeout","text":"<ul> <li>Timeout in seconds (default: 10)</li> </ul> <pre><code>[honggfuzz]\n# Timeout in seconds (default: 10)\ntimeout = 0\n</code></pre>"},{"location":"features/trident-manifest/#max_file_size","title":"max_file_size","text":"<ul> <li>Maximal size of files processed by the fuzzer in bytes (default: 1048576 = 1MB)</li> </ul> <pre><code>[honggfuzz]\n# Maximal size of files processed by the fuzzer in bytes\n# (default: 1048576 = 1MB)\nmax_file_size = 1048576\n</code></pre>"},{"location":"features/trident-manifest/#save_all","title":"save_all","text":"<ul> <li>Save all test-cases (not only the unique ones) by appending the current time-stamp to the filenames (default: false)</li> </ul> <pre><code>[honggfuzz]\n# Save all test-cases\n# (not only the unique ones) by appending the current\n# time-stamp to the filename (default: false)\nsave_all = false\n</code></pre>"},{"location":"features/trident-manifest/#afl","title":"[afl]","text":""},{"location":"features/trident-manifest/#run_time_1","title":"run_time","text":"<ul> <li>Number of seconds this fuzzing session will last (default: 0 [no limit])</li> </ul> <pre><code>[afl]\n# Number of seconds this fuzzing session will last (default: 0 [no limit])\nrun_time = 0\n</code></pre>"},{"location":"features/trident-manifest/#iterations_1","title":"iterations","text":"<ul> <li>Number of fuzzing iterations (default: 0 [no limit])</li> </ul> <pre><code>[afl]\n# Number of fuzzing iterations (default: 0 [no limit])\niterations = 0\n</code></pre>"},{"location":"features/trident-manifest/#cargo_target_dir_1","title":"cargo_target_dir","text":"<ul> <li>Target compilation directory, (default: \"\" [\"trident-tests/fuzz_tests/fuzzing/afl/afl_target\"]).</li> <li>To not clash with cargo build's default target directory.</li> </ul> <pre><code>[afl]\n# Target compilation directory,\n# (default: \"\" [\"trident-tests/fuzz_tests/fuzzing/afl/afl_target\"]).\n# To not clash with cargo build's default target directory.\ncargo_target_dir = \"\"\n</code></pre>"},{"location":"features/trident-manifest/#afl_workspace_in","title":"afl_workspace_in","text":"<ul> <li>AFL working input directory,</li> <li>(default: \"\" [\"trident-tests/fuzz_tests/fuzzing/afl/afl_workspace/in\"]).</li> </ul> <pre><code>[afl]\n# AFL working input directory,\n# (default: \"\" [\"trident-tests/fuzz_tests/fuzzing/afl/afl_workspace/in\"]).\nafl_workspace_in = \"\"\n</code></pre>"},{"location":"features/trident-manifest/#afl_workspace_out","title":"afl_workspace_out","text":"<ul> <li>AFL working output directory,</li> <li>(default: \"\" [\"trident-tests/fuzz_tests/fuzzing/afl/afl_workspace/out\"]).</li> </ul> <pre><code>[afl]\n# AFL working output directory,\n# (default: \"\" [\"trident-tests/fuzz_tests/fuzzing/afl/afl_workspace/out\"]).\nafl_workspace_out = \"\"\n</code></pre>"},{"location":"features/trident-manifest/#seeds","title":"seeds","text":"<ul> <li>Predefined inputs to the AFL</li> <li>You can specify multiple input seeds.</li> </ul> <p>Important</p> <p><code>bytes_count</code> has precedence before <code>seed</code>, in that case if both are specified. Seed is generated as random array of <code>bytes_count</code> bytes.</p> <pre><code>[[afl.seeds]]\n# Filename under which the test input is generated.\n# The location of file is afl_workspace_in directory.\n# (default: \"\" [\"trident-seed\"]).\nfile_name = \"\"\n# String used as seed.\n# (default: \"\" [\"trident\"]).\nseed = \"\"\n# If the file already exists at specific location,\n# select if override.\n# (default: false).\noverride_file = true\n# Number of randomly generated bytes.\n# (default: 0).\nbytes_count = 20\n</code></pre> <p>Tip</p> <p>Consider checking the Examples section for more tips.</p>"},{"location":"get-help/get-help/","title":"Get Help","text":"<p>Need help writing Fuzz Tests? Do not hesitate to join our Discord server!</p>"},{"location":"installation/installation/","title":"Installation","text":"<p>Prerequisites</p> <p>Before proceeding, ensure you have installed:</p> <ul> <li>Rust (stable version)</li> <li>Solana CLI</li> <li>Anchor</li> </ul> <p>Check out supported versions for version compatibility.</p>"},{"location":"installation/installation/#install-system-dependencies","title":"Install system dependencies","text":"<p>Update your package list:</p> <p><pre><code>sudo apt update\nsudo apt upgrade\n</code></pre> Install the required packages: <pre><code>sudo apt install build-essential\nsudo apt-get install binutils-dev\nsudo apt-get install libunwind-dev\n</code></pre></p>"},{"location":"installation/installation/#install-trident","title":"Install Trident","text":"<pre><code>cargo install trident-cli\n</code></pre> <p>You can also use the <code>version</code> flag to install a specific version: <pre><code>cargo install trident-cli --version x.y.z\n</code></pre></p>"},{"location":"installation/installation/#install-hongfuzz-and-afl","title":"Install Hongfuzz and AFL","text":"<p><pre><code>cargo install honggfuzz\ncargo install cargo-afl\n</code></pre> To install a specific version use the following commands: <pre><code>cargo install honggfuzz --version x.y.z\ncargo install cargo-afl --version x.y.z\n</code></pre></p>"},{"location":"installation/installation/#supported-versions","title":"Supported versions","text":"Trident CLI Anchor Solana Rust Honggfuzz AFL <code>develop</code> <code>&gt;=0.29.0</code> <code>&gt;=1.17.3</code> <code>nightly</code> <code>0.5.56</code> <code>0.15.11</code> <code>0.9.0</code> <code>&gt;=0.29.0</code> <code>&gt;=1.17.3</code> <code>nightly</code> <code>0.5.56</code> <code>0.15.11</code> <code>0.8.*</code> <code>0.30.1</code> <code>^1.17.4</code> <code>nightly</code> <code>0.5.56</code> - <code>0.7.0</code> <code>&gt;=0.29.*</code> <code>^1.17.4</code> <code>nightly</code> <code>0.5.56</code> - <code>0.6.0</code> <code>&gt;=0.29.*</code> <code>^1.17</code> <code>nightly</code> <code>0.5.55</code> - <code>0.5.0</code> <code>~0.28.*</code> <code>=1.16.6</code> - - - <code>0.4.0</code> <code>~0.27.*</code> <code>&gt;=1.15</code> - - - <code>0.3.0</code> <code>~0.25.*</code> <code>&gt;=1.10</code> - - - <code>0.2.0</code> <code>~0.24.*</code> <code>&gt;=1.9</code> - - -"},{"location":"writing-fuzz-test/writing-fuzz-test/","title":"Writing fuzz test","text":""},{"location":"writing-fuzz-test/writing-fuzz-test/#initialize-trident","title":"Initialize Trident","text":"<p>Initialize Trident in the Anchor-based workspace.</p> <pre><code>trident init\n</code></pre> <p>Info</p> <p>Trident under the hood</p> <ul> <li>Builds the Anchor-based project.</li> <li>Reads the generated IDL.</li> <li>Based on the IDL creates the fuzzing template.</li> </ul> <p>Tip</p> <p>If you have Trident already initialized, you can add a new fuzz test using <code>trident fuzz add</code>.</p>"},{"location":"writing-fuzz-test/writing-fuzz-test/#fill-the-fuzz-test-template","title":"Fill the Fuzz test Template","text":""},{"location":"writing-fuzz-test/writing-fuzz-test/#define-fuzz-accounts","title":"Define Fuzz Accounts","text":"<p>Define <code>AccountsStorage</code> type for each Account you would like to use.</p> <p>Important</p> <p>Keep in mind:</p> <ul> <li>You do not need to specify every <code>AccountStorage</code>; some accounts do not necessarily need to be stored in their corresponding storage.<ul> <li>For example, <code>System Program</code> does not need to be stored and can be used from the <code>solana_sdk</code>.</li> </ul> </li> <li>You can rename <code>FuzzAccounts</code> fields to whatever you want. The default names were generated based on the Program's <code>IDL</code>.</li> </ul> <pre><code>#[doc = r\" Use AccountsStorage&lt;T&gt; where T can be one of:\"]\n#[doc = r\" Keypair, PdaStore, TokenStore, MintStore, ProgramStore\"]\n#[derive(Default)]\npub struct FuzzAccounts {\n    author: AccountsStorage&lt;KeypairStore&gt;,\n    hello_world_account: AccountsStorage&lt;PdaStore&gt;,\n    // No need to fuzz system_program\n    // system_program: AccountsStorage&lt;todo!()&gt;,\n}\n</code></pre> <p>Tip</p> <p>For more details about the <code>AccountsStorage</code>, check AccountsStorage.</p>"},{"location":"writing-fuzz-test/writing-fuzz-test/#implement-fuzz-instructions","title":"Implement Fuzz Instructions","text":"<p>Each Instruction in the Fuzz Test must define the following functions:</p> <ul> <li><code>get_discriminator</code><ul> <li>Defines Instruction Discriminator, which is used to identify the Instruction.</li> </ul> </li> <li><code>get_program_id()</code><ul> <li>Specifies to which program the Instruction belongs. This function is automatically defined and should not need any updates. The importance is such that if you have multiple programs in your workspace, Trident can generate Instruction Sequences corresponding to different programs.</li> </ul> </li> <li><code>get_data()</code><ul> <li>Specifies what Instruction inputs are sent to the Program Instructions.</li> </ul> </li> <li><code>get_accounts()</code><ul> <li>Specifies what Accounts are sent to the Program Instructions.</li> </ul> </li> </ul> <p>Tip</p> <ul> <li>For more info about how to write these functions, check the Fuzz Instructions.</li> <li>For examples of how to write these functions, check the Examples.</li> </ul>"},{"location":"writing-fuzz-test/writing-fuzz-test/#execute","title":"Execute","text":"<p>Warning</p> <p>To execute and debug fuzz tests, navigate to the <code>trident-tests</code> directory.</p>"},{"location":"writing-fuzz-test/writing-fuzz-test/#run-fuzz-test","title":"Run Fuzz Test","text":"<p>In principle there are two possible fuzzing engines that the Trident supports, Honggfuzz and AFL.</p> <p>To execute the desired fuzz test using the Honggfuzz, run the following command from the <code>trident-tests</code> directory:</p> <pre><code># Replace &lt;TARGET_NAME&gt; with the name of particular\n# fuzz test (for example: \"fuzz_0\")\ntrident fuzz run-hfuzz &lt;TARGET_NAME&gt;\n</code></pre> <p>To execute the desired fuzz test using the AFL, run the following command from the <code>trident-tests</code> directory:</p> <pre><code># Replace &lt;TARGET_NAME&gt; with the name of particular\n# fuzz test (for example: \"fuzz_0\")\ntrident fuzz run-afl &lt;TARGET_NAME&gt;\n</code></pre>"},{"location":"writing-fuzz-test/writing-fuzz-test/#debug-fuzz-test","title":"Debug Fuzz Test","text":"<p>To debug your program using Honggfuzz with values from a crash file, run the following command from the <code>trident-tests</code> directory:</p> <pre><code># The fuzzer will run the &lt;TARGET_NAME&gt; with the specified &lt;CRASH_FILE_PATH&gt;\ntrident fuzz debug-hfuzz &lt;TARGET_NAME&gt; &lt;CRASH_FILE_PATH&gt;\n</code></pre> <p>To debug your program using AFL with values from a crash file, run the following command from the <code>trident-tests</code> directory:</p> <pre><code># The fuzzer will run the &lt;TARGET_NAME&gt; with the specified &lt;CRASH_FILE_PATH&gt;\ntrident fuzz debug-afl &lt;TARGET_NAME&gt; &lt;CRASH_FILE_PATH&gt;\n</code></pre> <p>Tip</p> <p>By default, the crash files are stored in:</p> <ul> <li><code>trident-tests/fuzzing/honggfuzz/hfuzz_workspace/&lt;FUZZ_TARGET&gt;</code> for Honggfuzz and</li> <li><code>trident-tests/fuzzing/afl/afl_workspace/out/default/crashes</code> for AFL.</li> </ul> <p>Tip</p> <p>For more info about the fuzzing outputs, check the Commands.</p>"}]}