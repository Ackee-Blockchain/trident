{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Trident Documentation","text":"<p>Fuzzing is a technique to test the robustness of a program by providing it with random inputs.</p> <p>Trident is a Manually Guided Fuzzing framework for Solana. It lets you to execute instructions of your Solana programs with random data and observe the changes in the state of the program.</p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>Installation - Install the Trident Fuzz Testing Framework</li> <li>Start Fuzzing - Focus on security and start fuzzing immediately</li> </ul>"},{"location":"#advanced-fuzzing-customization","title":"Advanced fuzzing customization","text":"<p>Explore the various features Trident provides.</p> <ul> <li>Transaction Hooks - Create and manipulate transactions with different methods</li> <li>Multi-Instruction Transactions - Compose fuzzed transactions with multiple instructions</li> <li>Trident Manifest - Customize your fuzz tests with different configurations</li> <li>Code Coverage - Track and display fuzz test code coverage</li> <li>Dashboard - A web-based interface for visualizing fuzzing session results</li> </ul>"},{"location":"#api-macros-reference","title":"API &amp; Macros Reference","text":"<p>Check out the API and macro reference for Trident.</p> <ul> <li>Trident API &amp; Macros</li> </ul>"},{"location":"#trident-examples","title":"Trident Examples","text":"<p>Check out examples to learn how to use Trident.</p> <ul> <li>Trident Examples</li> </ul>"},{"location":"#tridentsvm","title":"TridentSVM","text":"<p>Check out the TridentSVM, lightweight fuzzing execution and account storage environment.</p> <ul> <li>TridentSVM</li> </ul>"},{"location":"#what-is-fuzzing","title":"What is Fuzzing ?","text":"<p>\"Fuzz testing is an automated technique that provides generated random, invalid, or unexpected input data to your program. This helps discover unknown bugs and vulnerabilities, potentially preventing zero-day exploits.\"</p>"},{"location":"basics/CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning (SemVer).</p> <p>Note: Version 0 of Semantic Versioning is handled differently from version 1 and above. The minor version will be incremented upon a breaking change and the patch version will be incremented for features.</p>"},{"location":"basics/CHANGELOG/#dev-unreleased","title":"[dev] - Unreleased","text":"<p>Added</p> <ul> <li>Add server for displaying content of fuzzing artifacts (347)</li> <li>Add fuzz artifacts directory to the fuzz test folder (343)</li> <li>Added state monitoring support for fuzzing metrics (341)</li> <li>Added dashboard support for fuzzing metrics (340)</li> <li>Code coverage tracking support enabled and configured via Trident.toml. Coverage data can be visualized using the VS Code extension 330</li> <li>Added features to enable syscalls in fuzzing (329)</li> <li>Add <code>--skip-build</code> flag to only initialize fuzz test without building the project (325)</li> <li>Add support for space, lamports and  owner to TridentAccounts macro (320)</li> </ul> <p>Removed</p> <p>Changed</p> <ul> <li>FuzzTest fields are now aggregated into Trident struct (339)</li> <li>Add support for reproducible fuzzing with thread-specific seeds (332)</li> <li>Move Trident.toml into trident-tests folder (328)</li> <li>Conversion from AFL and Honggfuzz into Manually Guided Fuzzing (324)</li> <li>Update template generation to use tera (326)</li> </ul>"},{"location":"basics/CHANGELOG/#0100-2025-03-13","title":"[0.10.0] - 2025-03-13","text":"<p>Added</p> <ul> <li>TransactionSelector allows to select and execute random transaction with hooks and without hooks (297)</li> <li>Added \"random_tail\" attribute to TridentFlowExecutor macro to allow random tail generation (296)</li> <li>Added support for seeds constraint for accounts structs (284)</li> <li>Additional methods accessing the AccountsStorage and creating corresponding accounts are now optional (\"token\",\"vote\", \"stake\") (279)</li> <li>Derive macros now use own syn parser for better extensibility and UX (275)</li> <li>Program ID inside test_fuzz.rs file is now automatically filled in is present in the program IDL (272)</li> <li>Added additional attributes to TridentAccounts, mut and signer (268)</li> <li>Users can now specify a program for which they want to add or initialize a fuzz test using <code>--program-name</code> flag (273)</li> <li>Allow custom test name specification in fuzz test creation with <code>--test-name</code> flag (274)</li> </ul> <p>Removed</p> <ul> <li>The DisplayIx macro is now removed, Debug trait was implemented for instruction inputs (281)</li> </ul> <p>Changed</p> <ul> <li>FuzzTestExecutor and FlowExecutor are grouped together and FuzzTest has client as generic instead of TridentSVM (294)</li> <li>Changed Transaction sequence logic (289)</li> <li>AccountsStorages are simplified, no types are required to define (276)</li> <li>Trident Architecture changes containing multiple features and improvements (details in the PR)(267)</li> <li>get or create token account methods fixed for native token accounts (262)</li> </ul>"},{"location":"basics/CHANGELOG/#091-2025-02-03","title":"[0.9.1] - 2025-02-03","text":"<p>Added</p> <ul> <li>added warp to time manipulation (259)</li> <li>added methods to check if account storage is empty (258)</li> <li>added support for post-instruction behavior (257)</li> </ul> <p>Removed</p> <p>Changed</p>"},{"location":"basics/CHANGELOG/#090-2025-01-15","title":"[0.9.0] - 2025-01-15","text":"<p>Added</p> <ul> <li>added support for composite accounts (245)</li> <li>Trident SVM + AFL (see the PR for more details) (234)</li> </ul> <p>Removed</p> <ul> <li>removed fuzz_iteration from test_fuzz.rs (243)</li> </ul> <p>Changed</p> <ul> <li>renamed Config to TridentConfig (246)</li> <li>errors are simplified and transaction error contains only transaction error (244)</li> </ul>"},{"location":"basics/CHANGELOG/#081-2024-11-14","title":"[0.8.1] - 2024-11-14","text":"<p>Removed</p> <ul> <li>removed unnecessary deserialization with AccountsSnapshots, to deserialize data implementation AccountDeserialize can be used (221)</li> </ul> <p>Changed</p> <ul> <li>improve AccountsStorage module structure and remove unnecessary methods in FuzzClient (223)</li> <li>improve manipulations with AccountsStorages in get_accounts() function (219)</li> </ul> <p>Added</p> <ul> <li>add pre_sequence!, middle_sequence! and post_sequence! for easier sequence definition (220)</li> <li>add/ add support for Clock sysvar manipulations with the client(i.e. warp to slot/epoch and forward in time) (217)</li> </ul>"},{"location":"basics/CHANGELOG/#080-2024-10-21","title":"[0.8.0] - 2024-10-21","text":"<p>Added</p> <ul> <li>impr/ allow to specify programs and accounts in the Trident Manifest (207)</li> <li>impr/ added get_program_id function to the IxOps and FuzzTestExecutor (199)</li> </ul> <p>Changed</p> <ul> <li>impr/ improve init command, modify program manifest automatically, add init force, add howto subcommand (208)</li> <li>impr/ allow to derive AccountsSnapshots for empty Account Context (209)</li> <li>impr/ fuzz flags are read at start of fuzzing session from Config instead of env variable and transaction dispatch was added to increase FuzzTestExecutor readability (204)</li> <li>impr/ allow various instructions to be generated in case of multiple programs in the Anchor workspace (200)</li> <li>feat/ option to add account into Fuzz Test environment with base64 data (197)</li> <li>impr/ instead of parsing source code and creating our IDL, read anchor IDL (198)</li> </ul> <p>Removed</p> <ul> <li>del/remove integration tests supported by Trident, this feature adds more unnecessary overhead compared to its value (196)</li> </ul>"},{"location":"basics/CHANGELOG/#070-2024-08-14","title":"[0.7.0] - 2024-08-14","text":"<p>Added</p> <ul> <li>impr/ add feature flag to the AccountsSnapshots macro (183)</li> <li>feat/ add Support for CPI (182)</li> <li>feat/ add option to initialize Trident with Macro/File (for Snapshots) option based on preference (179)</li> <li>feat/create AccountsSnapshots derive macro for Snapshots creation (#177)</li> <li>feat/fuzzing moved to separate crate trident-fuzz (#175)</li> <li>feat/unify dependencies provided by the Trident (#172)</li> <li>feat/fuzzer-stats-logging, an optional statistics output for fuzzing session (#144)</li> </ul> <p>Fixed</p> <ul> <li>fix/in case of fuzzing failure throw error instead of only printing message (#167)</li> <li>fix/snapshot's zeroed account as optional (#170)</li> </ul> <p>Removed</p> <ul> <li>del/remove localnet subcommand (178)</li> <li>del/remove unnecessary fuzzing feature as trident is mainly fuzzer (#176)</li> <li>del/remove Trident explorer (#171)</li> </ul>"},{"location":"basics/CHANGELOG/#060-2024-05-20","title":"[0.6.0] - 2024-05-20","text":"<p>Added</p> <ul> <li>feat/anchor 0.30.0 support (#148)</li> <li>fix/allow to process duplicate transactions (#147)</li> <li>feat/possibility to implement custom transaction error handling (#145)</li> <li>feat/support of automatically obtaining fully qualified paths of Data Accounts Custom types for <code>accounts_snapshots.rs</code> (#141)</li> <li>feat/allow direct accounts manipulation and storage (#142)</li> <li>feat/support of non-corresponding instruction and context names (#130)</li> <li>feat/refactored and improved program flow during init and build, added activity indicator (#129)</li> <li>feat/allow solana versions up to v1.17.* and pin Rust 1.77 nightly compiler (#128)</li> <li>feat/new init command option to initialize fuzz or poc tests only (#124)</li> <li>feat/debug-mode detailed output (#125)</li> <li>feat/anchor 0.29.0 support (#121)</li> <li>doc/add help comment + update documentation (#120)</li> <li>feat/fuzzer error handling (#118)</li> <li>feat/convert fuzz Pubkey to AccountId (#116)</li> <li>feat/additional anchor types (#115)</li> <li>feat/import ToAccountInfo trait in fuzzing prelude (#113)</li> <li>test/added code generation and macros tests (#112)</li> <li>feat/fuzzer framework core, macros, helpers, templates, and examples. (#111)</li> <li>feat/improved trident-tests folder structure for PoC and Fuzz Tests (#109)</li> <li>feat/support for additional fuzzer parameters in Trident.toml config file (#107)</li> <li>feat/possibility to pass params to the fuzzer via Trident.toml config file (#106)</li> <li>feat/client now reads by default keypair from default location (#105)</li> <li>feat/added new --exit-code option to return corresponding exit code based on fuzz test result (#104)</li> <li>feat/removed/updated deprecated functions, removed allow deprecated macros (#103)</li> <li>feat/added new function to read keypair file generated by Anchor (#102)</li> <li>feat/clean command (#101)</li> <li>feat/improved program_client generated code (#100)</li> <li>feat/automatically add hfuzz_target to .gitignore file (#99)</li> <li>feat/support for dynamic templates. (#98)</li> </ul> <p>Fixed</p> <ul> <li>fix/refactored fuzz test executor error handling (#127)</li> <li>fix/warn user on composite accounts and continue fuzz test generation (#133)</li> <li>fix/progress bar loop lock release (#132)</li> <li>fix/fixed fuzz test generation with init-if-needed Anchor feature (#131)</li> <li>fix/program client custom types (#117)</li> <li>fix/check fuzz test name collision by checking the name against HashSet (#114)</li> </ul>"},{"location":"basics/CHANGELOG/#050-2023-08-28","title":"[0.5.0] - 2023-08-28","text":"<p>Added</p> <ul> <li>cli: Added trident subcommand <code>fuzz</code> to run and debug fuzz tests using honggfuzz-rs.</li> <li>cli: Added trident <code>--skip-fuzzer</code> option for <code>init</code> subcommand to skip generation of fuzz test templates.</li> <li>client: Added new Cargo feature <code>fuzzing</code> that enables optional dependencies related to fuzz testing.</li> </ul>"},{"location":"basics/CHANGELOG/#041-2023-08-21","title":"[0.4.1] - 2023-08-21","text":"<p>Changed</p> <ul> <li>Upgrade Solana (<code>=1.16.6</code>) and Anchor framework (<code>=0.28.0</code>) versions.</li> </ul> <p>Fixed</p> <ul> <li>Implemented Anchor Client logic was not able to work with newer version of Anchor. Fixed with <code>async_rpc</code> and <code>async</code> feature.</li> <li>Trident init IDL Parse Error on newer version of Rust, fixed with updated <code>accounts</code> token.</li> </ul>"},{"location":"basics/CHANGELOG/#030-2022-09-23","title":"[0.3.0] - 2022-09-23","text":"<p>Changed</p> <ul> <li>Upgrade Solana (<code>~1.10</code>) and Anchor framework (<code>~0.25</code>) versions</li> </ul> <p>Added</p> <ul> <li>Custom Solana RPC error reporter. If the Solana RPC error is thrown, the error code, message and data (logs) are reported to the output.</li> <li>Custom imports in the <code>.program_client</code>. User is able to import custom types and structures into program client. The import part of the code would not be re-generated.</li> </ul>"},{"location":"basics/CHANGELOG/#020-2022-07-27","title":"[0.2.0] - 2022-07-27","text":"<p>Added</p> <ul> <li>Trident is now configurable. This requires <code>Trident.toml</code> file to exist in the project's root directory - without this file the execution will fail. To solve this re-run <code>trident init</code> or just create an empty <code>Trident.toml</code> file in the project's root directory.</li> </ul>"},{"location":"basics/commands/","title":"Commands","text":"<p>Trident CLI supports the following commands:</p>"},{"location":"basics/commands/#trident-init","title":"<code>trident init</code>","text":"<p>Initializes Trident Workspace and generates new Fuzz Test Template. Creates the following structure:</p> <pre><code>project-root\n\u251c\u2500\u2500 trident-tests\n\u2502   \u251c\u2500\u2500 fuzz_0 # particular fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 instructions # instructions folder\n\u2502   \u2502   \u251c\u2500\u2500 transactions # transactions folder\n\u2502   \u2502   \u251c\u2500\u2500 test_fuzz.rs # the binary target of your fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 types.rs # the types of your fuzz test\n\u2502   \u2502   \u2514\u2500\u2500 fuzz_instructions.rs # the definition of your fuzz test\n\u2502   \u251c\u2500\u2500 fuzz_1\n\u2502   \u251c\u2500\u2500 fuzz_X # possible multiple fuzz tests\n\u2502   \u251c\u2500\u2500 fuzzing # compilations and crashes folder\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 Trident.toml # Configuration file located in trident-tests directory\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"basics/commands/#options","title":"Options","text":"<ul> <li><code>-f, --force</code> - Force Trident initialization. Trident dependencies will be updated based on the version of Trident CLI.</li> <li><code>-s, --skip-build</code> - Skip building the program before initializing Trident.</li> <li><code>-p, --program-name &lt;FILE&gt;</code> - Specify the name of the program for which fuzz test will be generated.</li> <li><code>-t, --test-name &lt;NAME&gt;</code> - Name of the fuzz test to initialize.</li> </ul>"},{"location":"basics/commands/#trident-how","title":"<code>trident how</code>","text":"<p>Show the HowTo message about writing fuzz tests.</p>"},{"location":"basics/commands/#trident-fuzz","title":"<code>trident fuzz</code>","text":"<p>Run fuzz subcommands. With fuzz subcommands you can add new fuzz test template or you can run fuzz test on already initialized one.</p> <p>Examples: <pre><code>trident fuzz add\ntrident fuzz run fuzz_0\ntrident fuzz debug &lt;FUZZ_TARGET&gt; &lt;SEED&gt;\n</code></pre></p>"},{"location":"basics/commands/#trident-fuzz-add","title":"<code>trident fuzz add</code>","text":"<p>Generate new Fuzz Test template.</p>"},{"location":"basics/commands/#options_1","title":"Options","text":"<ul> <li><code>-p, --program-name &lt;FILE&gt;</code> - Specify the name of the program for which the fuzz test will be generated.</li> <li><code>-t, --test-name &lt;NAME&gt;</code> - Name of the fuzz test to add.</li> <li><code>-s, --skip-build</code> - Skip building the program before adding new fuzz test.</li> </ul>"},{"location":"basics/commands/#trident-fuzz-run-fuzz_target","title":"<code>trident fuzz run &lt;fuzz_target&gt;</code>","text":"<p>Directory Note</p> <p>Execute fuzz tests from the <code>trident-tests</code> directory.</p> <p>Solana Logs</p> <p>In case you want to see the logs of the fuzzed transactions, prefix the command with <code>TRIDENT_LOG=1</code>. <pre><code>TRIDENT_LOG=1 trident fuzz run &lt;fuzz_target&gt;\n</code></pre></p> <p>Runs the specified Fuzz Target using Trident's Manually Guided Fuzzing (e.g., fuzz_0).</p>"},{"location":"basics/commands/#arguments","title":"Arguments","text":"<ul> <li><code>&lt;fuzz_target&gt;</code> - Name of the desired fuzz template to execute (for example fuzz_0).</li> <li><code>[seed]</code> - Master seed used for fuzzing, if not provided it will be generated randomly.</li> </ul>"},{"location":"basics/commands/#options_2","title":"Options","text":"<ul> <li><code>-w, --with-exit-code</code> - Run the fuzzing with exit code, i.e. if it discovers crash the Trident will exit with exit code 1.</li> </ul>"},{"location":"basics/commands/#trident-fuzz-debug-fuzz_target-seed","title":"<code>trident fuzz debug &lt;fuzz_target&gt; &lt;seed&gt;</code>","text":"<p>Debug crashes by analyzing specific crash files using the provided seed.</p>"},{"location":"basics/commands/#arguments_1","title":"Arguments","text":"<ul> <li><code>&lt;fuzz_target&gt;</code> - Name of the desired fuzz template to execute (for example fuzz_0).</li> <li><code>&lt;seed&gt;</code> - Master seed of the desired fuzz template to execute.</li> </ul> <p>Debug Output</p> <p>The debug output includes:</p> <ol> <li>Transaction logs</li> <li>Instruction data structures</li> <li>Panic/Crash information</li> </ol>"},{"location":"basics/commands/#trident-clean","title":"<code>trident clean</code>","text":"<p>Clean build target, additionally perform <code>anchor clean</code>.</p>"},{"location":"basics/faq/","title":"FAQ","text":"<p>Is Trident supported only with Anchor?</p> <ul> <li>Currently yes, Trident under the hood obtains data from the IDL generated by Anchor.</li> </ul> <p>I created the Fuzz Test, what should I do next?</p> <ul> <li>Start here Start Fuzzing.</li> </ul> <p>Is Trident open-source?</p> <ul> <li>Yes, here Trident.</li> </ul> <p>I would like to report an Issue with Trident, what should I do?</p> <ul> <li>Create issue.</li> </ul> <p>Is Trident deployed on Mainnet / Devnet / Testnet?</p> <ul> <li>No, Trident is Fuzz Testing Framework, not Solana Program.</li> </ul> <p>What type of Fuzzer is Trident?</p> <ul> <li>Currently, we refer to it as \"coverage guided gray box fuzzer\".</li> </ul>"},{"location":"basics/get-help/","title":"Get Help","text":"<p>Need help writing Fuzz Tests? Do not hesitate to join our Discord server!</p>"},{"location":"basics/installation/","title":"Installation","text":"<p>Trident requires the following prerequisites:</p> <p>Prerequisites</p> <p>Before proceeding, ensure you have installed:</p> <ul> <li>Rust (stable version)</li> <li>Solana CLI</li> <li>Anchor</li> </ul> <p>Check out supported versions for version compatibility.</p>"},{"location":"basics/installation/#install-trident","title":"Install Trident","text":"<pre><code>cargo install trident-cli\n</code></pre> <p>You can also use the <code>version</code> flag to install a specific version: <pre><code>cargo install trident-cli --version x.y.z\n</code></pre></p>"},{"location":"basics/installation/#install-cargo-llvm-cov","title":"Install cargo-llvm-cov","text":"<p>To enable code coverage tracking during fuzzing, install cargo-llvm-cov: <pre><code>cargo +stable install cargo-llvm-cov --locked\n</code></pre></p>"},{"location":"basics/installation/#supported-versions","title":"Supported versions","text":"<p>Version Table Legend</p> <ul> <li> = Develop branch</li> <li> = Released version</li> <li><code>-</code> = Not required/supported</li> </ul> Version Type Anchor Solana Rust Honggfuzz AFL Development  `&gt;=0.29.0 1.86 removed removed Current (0.10.x) <code>&gt;=0.29.0 &lt; 0.31.0</code> <code>&gt;=1.17.3 &lt; 2.1</code> <code>nightly</code> <code>0.5.56</code> <code>0.15.11</code> 0.9.x <code>&gt;=0.29.0 &lt; 0.31.0</code> <code>&gt;=1.17.3 &lt; 2.1</code> <code>nightly</code> <code>0.5.56</code> <code>0.15.11</code> 0.8.x <code>0.30.1</code> <code>^1.17.4</code> <code>nightly</code> <code>0.5.56</code> <code>-</code> 0.7.x <code>&gt;=0.29.*</code> <code>^1.17.4</code> <code>nightly</code> <code>0.5.56</code> <code>-</code> 0.6.x <code>&gt;=0.29.*</code> <code>^1.17</code> <code>nightly</code> <code>0.5.55</code> <code>-</code> 0.5.x <code>~0.28.*</code> <code>=1.16.6</code> <code>-</code> <code>-</code> <code>-</code> 0.4.x <code>~0.27.*</code> <code>&gt;=1.15</code> <code>-</code> <code>-</code> <code>-</code> 0.3.x <code>~0.25.*</code> <code>&gt;=1.10</code> <code>-</code> <code>-</code> <code>-</code> 0.2.x <code>~0.24.*</code> <code>&gt;=1.9</code> <code>-</code> <code>-</code> <code>-</code>"},{"location":"start-fuzzing/","title":"Start Fuzzing","text":"<p>To start writing fuzz tests, you need to initialize Trident in your Anchor-based workspace.</p> <pre><code>trident init\n</code></pre> <p>If you have already initialized Trident, you can add a new fuzz test using:</p> <pre><code>trident fuzz add\n</code></pre> <p>Trident creates a new fuzz test template in the <code>trident-tests</code> directory, with the following structure:</p> <pre><code>project-root\n\u251c\u2500\u2500 trident-tests\n\u2502   \u251c\u2500\u2500 fuzz_0 # particular fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 instructions # instructions folder\n\u2502   \u2502   \u251c\u2500\u2500 transactions # transactions folder\n\u2502   \u2502   \u251c\u2500\u2500 test_fuzz.rs # the binary target of your fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 types.rs # the types of your fuzz test\n\u2502   \u2502   \u2514\u2500\u2500 fuzz_instructions.rs # the definition of your fuzz test\n\u2502   \u251c\u2500\u2500 fuzz_1\n\u2502   \u251c\u2500\u2500 fuzz_X # possible multiple fuzz tests\n\u2502   \u251c\u2500\u2500 fuzzing # compilations and crashes folder\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 Trident.toml\n\u2514\u2500\u2500 ...\n</code></pre> <p><code>Instructions</code> folder contains the <code>instructions</code> that can be used in the fuzz test.</p> <p><code>Transactions</code> folder contains the <code>transactions</code> that will be used during the fuzzing, each transaction can contain <code>one</code> or <code>multiple instructions</code>, based on the developer's choice. By default there is only one instruction in each transaction.</p>"},{"location":"start-fuzzing/executing-fuzz-test/","title":"Executing the Fuzz Test","text":"<p>To execute the fuzz test, navigate to the <code>trident-tests</code> directory and run the following command to execute the fuzz test:</p> <pre><code>trident fuzz run &lt;FUZZ_TARGET&gt; &lt;SEED&gt;\n# for example:\n# trident fuzz run fuzz_0\n# seed is optional, if not provided, a random seed will be used\n</code></pre> <p>Directory Note</p> <p>Execute fuzz tests from the <code>trident-tests</code> directory.</p> <p>Solana Logs</p> <p>In case you want to see the logs of the fuzzed transactions, prefix the command with <code>TRIDENT_LOG=1</code>. <pre><code>TRIDENT_LOG=1 trident fuzz run &lt;fuzz_target&gt; &lt;seed&gt;\n</code></pre></p> <p>For the output reference and additional options such as debugging the found issues, check out Commands.</p> <p>For the additional customization through the <code>trident.toml</code> file, check out the Trident Manifest page.</p>"},{"location":"start-fuzzing/writting-fuzz-test/","title":"Writing fuzz test","text":"<p>Trident is Manually Guided fuzzing framework for Solana programs.</p> <p>In order to start fuzzing, you need to guide the fuzzer by specifying what are the expected inputs to instruction or the expected sequences of instructions to execute.</p> <p>Why is this important?</p> <p>Letting the fuzzer to generate completely random instruction inputs and completely random sequences of instruction would lead in most case </p> <ul> <li>to transaction failures, which would mean the fuzzer is not properly fuzzing the logic within the program; and</li> <li>executing irrelevant random instruction sequences, which would again lead to transaction failures.</li> </ul>"},{"location":"start-fuzzing/writting-fuzz-test/#guide-the-fuzzer","title":"Guide the fuzzer","text":"<p>Start with properly configuring different types of instruction inputs:</p> <ul> <li>Instruction Data</li> <li>Instruction Accounts</li> <li>Fuzzing Flows</li> <li>(Optional) Remaining Accounts</li> </ul>"},{"location":"start-fuzzing/writting-fuzz-test/fuzzing-flows/","title":"Fuzzing Flows","text":"<p>Before you start fuzzing, you need to guide the fuzzer on which transactions it should execute. This is important because if your program contains a lot of instructions and we let the fuzzer randomly pick from them, most of the time the fuzzer would pick incorrect sequences. This is due to the fact that Solana programs expect some kind of order. For example, DeFi protocols most likely expect something like:</p> <ol> <li>Initialize Config</li> <li>Initialize User</li> <li>User deposit</li> <li>User swap (there might be multiple swaps, with random order, this is achieved with flows)</li> <li>User withdraw</li> <li>User account remove</li> <li>Collect trading fees</li> <li>...</li> </ol> <p>For that reason, it is required to slightly guide the fuzzer. The following code shows the default state of the <code>test_fuzz.rs</code> file.</p> <pre><code>#[derive(FuzzTestMethods)]\nstruct FuzzTest {\n    /// for fuzzing\n    trident: Trident,\n    /// for storing fuzzing accounts\n    fuzz_accounts: FuzzAccounts,\n}\n\n#[flow_executor]\nimpl FuzzTest {\n    fn new() -&gt; Self {\n        Self {\n            trident: Trident::default(),\n            fuzz_accounts: FuzzAccounts::default(),\n        }\n    }\n\n    #[init]\n    fn start(&amp;mut self) {\n        // perform any initialization here, this method will be executed\n        // at start of each iteration\n    }\n\n    #[flow]\n    fn flow1(&amp;mut self) {\n        // perform logic which is meant to be fuzzed\n        // this flow is selected randomly from other flows\n    }\n\n    #[flow]\n    fn flow2(&amp;mut self) {\n        // perform logic which is meant to be fuzzed\n        // this flow is selected randomly from other flows\n    }\n\n    #[end]\n    fn end(&amp;mut self) {\n        // perform any cleaning here, this method will be executed\n        // at the end of each iteration\n    }\n}\n\nfn main() {\n    FuzzTest::fuzz(1000, 100);\n}\n</code></pre> <p>Let's describe the <code>test_fuzz.rs</code> file.</p>"},{"location":"start-fuzzing/writting-fuzz-test/fuzzing-flows/#the-main","title":"The main","text":"<pre><code>fn main() {\n    FuzzTest::fuzz(1000, 100);\n}\n</code></pre> <p>This is the starting point of the fuzzing. Here you can specify how many iterations you want to run and how many flows you want to execute in each iteration. Flows are described below.</p>"},{"location":"start-fuzzing/writting-fuzz-test/fuzzing-flows/#the-fuzztest-struct","title":"The <code>FuzzTest</code> struct","text":"<p>This is a struct containing Trident, which contains multiple methods for fuzzing, collecting fuzzing metrics, etc., and FuzzAccounts, which is used to store account IDs and their corresponding Pubkeys (addresses).</p> <pre><code>#[derive(FuzzTestMethods)]\nstruct FuzzTest {\n    /// for fuzzing\n    trident: Trident,\n    /// for storing fuzzing accounts\n    fuzz_accounts: FuzzAccounts,\n}\n</code></pre>"},{"location":"start-fuzzing/writting-fuzz-test/fuzzing-flows/#the-impl-fuzztest-block","title":"The <code>impl FuzzTest</code> block","text":"<p>This is the main block where you guide the fuzzer to perform the fuzzing.</p>"},{"location":"start-fuzzing/writting-fuzz-test/fuzzing-flows/#the-new-method","title":"The <code>new</code> method","text":"<p>The <code>new</code> method is called once at the start of the fuzzing. It is used to initialize the fuzzer and the fuzzing accounts to their default state (so empty).</p>"},{"location":"start-fuzzing/writting-fuzz-test/fuzzing-flows/#the-init-method","title":"The <code>#[init]</code> method","text":"<p>The <code>#[init]</code> method is executed at the start of each iteration. As described above, it is possible to specify the number of iterations and flows, meaning that this <code>#[init]</code> method will be executed at the start of each iteration. Within it, you can perform execution of transactions which should initialize something in your program, for example Global Config, User account, Token Accounts, etc.</p>"},{"location":"start-fuzzing/writting-fuzz-test/fuzzing-flows/#the-flow-method","title":"The <code>#[flow]</code> method","text":"<p>Methods marked with <code>#[flow]</code> are where the fuzzing happens (apart from the fact that the instructions contain random data on their inputs). Methods marked with <code>#[flow]</code> are selected randomly from other flows and executed in random order.</p> <p>As shown in the source code below, the <code>flow1</code> and <code>flow2</code> methods are marked with <code>#[flow]</code>. This means, in each iteration, 100 flow methods will be selected in random order and the logic specified in the methods will be executed. So if we have two flow methods, the random order can be <code>flow1</code>, <code>flow1</code>, <code>flow2</code>, <code>flow2</code>, <code>flow1</code>, <code>flow1</code>, etc., until 100 flows are executed.</p> <pre><code>#[flow_executor]\nimpl FuzzTest {\n    fn new() -&gt; Self {\n        Self {\n            trident: Trident::default(),\n            fuzz_accounts: FuzzAccounts::default(),\n        }\n    }\n\n    #[init]\n    fn start(&amp;mut self) {\n        // perform any initialization here, this method will be executed\n        // at start of each iteration\n    }\n\n    #[flow]\n    fn flow1(&amp;mut self) {\n        // perform logic which is meant to be fuzzed\n        // this flow is selected randomly from other flows\n    }\n\n    #[flow]\n    fn flow2(&amp;mut self) {\n        // perform logic which is meant to be fuzzed\n        // this flow is selected randomly from other flows\n    }\n\n    #[end]\n    fn end(&amp;mut self) {\n        // perform any cleaning here, this method will be executed\n        // at the end of each iteration\n    }\n}\n</code></pre>"},{"location":"start-fuzzing/writting-fuzz-test/fuzzing-flows/#an-example","title":"An example","text":"<p>As an example:</p> <ul> <li>Within the block below, we have 4 flows. The <code>start</code> method is executed at the start of each iteration. The <code>flow1</code>, <code>flow2</code>, <code>flow3</code>, and <code>flow4</code> methods are executed in random order in each iteration.</li> <li>There will be 1000 iterations and 100 flows executed in each iteration.</li> <li>A random order of <code>MoveEastTransaction</code>, <code>MoveSouthTransaction</code>, <code>MoveNorthTransaction</code>, and <code>MoveWestTransaction</code> will be executed in each iteration, due to the fact that they are marked with <code>#[flow]</code>.</li> </ul> <pre><code>#[flow_executor]\nimpl FuzzTest {\n    fn new() -&gt; Self {\n        Self {\n            trident: Trident::default(),\n            fuzz_accounts: FuzzAccounts::default(),\n        }\n    }\n    #[init]\n    fn start(&amp;mut self) {\n        let mut tx = InitializeTransaction::build(&amp;mut self.trident, &amp;mut self.fuzz_accounts);\n\n        self.trident\n            .execute_transaction(&amp;mut tx, Some(\"Initialize\"));\n    }\n\n    #[flow]\n    fn flow1(&amp;mut self) {\n        let mut tx = MoveEastTransaction::build(&amp;mut self.trident, &amp;mut self.fuzz_accounts);\n        self.trident.execute_transaction(&amp;mut tx, Some(\"MoveEast\"));\n    }\n    #[flow]\n    fn flow2(&amp;mut self) {\n        let mut tx = MoveSouthTransaction::build(&amp;mut self.trident, &amp;mut self.fuzz_accounts);\n        self.trident.execute_transaction(&amp;mut tx, Some(\"MoveSouth\"));\n    }\n    #[flow]\n    fn flow3(&amp;mut self) {\n        let mut tx = MoveNorthTransaction::build(&amp;mut self.trident, &amp;mut self.fuzz_accounts);\n        self.trident.execute_transaction(&amp;mut tx, Some(\"MoveNorth\"));\n    }\n    #[flow]\n    fn flow4(&amp;mut self) {\n        let mut tx = MoveWestTransaction::build(&amp;mut self.trident, &amp;mut self.fuzz_accounts);\n        self.trident.execute_transaction(&amp;mut tx, Some(\"MoveWest\"));\n    }\n}\n\nfn main() {\n    FuzzTest::fuzz(1000, 100);\n}\n</code></pre>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-accounts/","title":"Instruction Accounts","text":"<p>Accounts are storage entities on the Solana Blockchain. They may be simple wallets (consisting of regular keypairs) or accounts with more complex address structures, such as Program Derived Addresses (PDAs).</p> <p>During fuzzing, Trident sends random Accounts to the program's instructions. However, the account addresses are not completely random but are taken from the Fuzz Test's account storage. Trident generates random indexes to the account storage. This approach is crucial, as allowing the fuzzer to generate completely random account addresses would lead to many failed transactions (i.e., nothing would be fuzzed).</p> <p>Your responsibility is to guide Trident on which storage locations it should retrieve accounts from. Additionally, if particular account types are expected, such as Token Account, Mint Account, etc., your responsibility is to initialize them within the <code>set_accounts</code> method.</p>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-accounts/#setup-instruction-accounts","title":"Setup Instruction Accounts","text":"<p>There are two ways to guide the fuzzer about which storage locations to retrieve accounts from:</p> <ol> <li>Using the <code>TridentAccounts</code> macro</li> <li>Manually setting the accounts using the <code>set_accounts</code> method</li> </ol>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-accounts/#using-the-tridentaccounts-macro","title":"Using the TridentAccounts Macro","text":"<p>The <code>TridentAccounts</code> macro is used to derive account handling functionality for instruction accounts (similar to the Context structure in Anchor-based programs).</p> <p>You can check the TridentAccounts attributes page to see the attributes that can be used.</p> <p>Consider the following example:</p> <pre><code>/// Instruction Accounts\n#[derive(Arbitrary, Debug, Clone, TridentAccounts)]\n#[instruction_data(InitializeFnInstructionData)]\n#[storage(FuzzAccounts)]\npub struct InitializeFnInstructionAccounts {\n    #[account(\n        mut,\n        signer,\n        storage = author,\n        storage::account_id = (0..1)\n    )]\n    pub author: TridentAccount,\n    #[account(\n        mut,\n        storage::name = hello_world_account,\n        storage::account_id = (0..3)\n        seeds = [b\"hello_world_seed\"],\n    )]\n    pub hello_world_account: TridentAccount,\n    #[account(address = \"11111111111111111111111111111111\", skip_snapshot)]\n    pub system_program: TridentAccount,\n}\n</code></pre> <p>The example specifies these attributes:</p> <ul> <li><code>#[instruction_data(InitializeFnInstructionData)]</code> - Specifies the instruction data type (helpful if instruction data input is part of PDA seeds)</li> <li><code>#[storage(FuzzAccounts)]</code> - Specifies the account storage type</li> <li><code>mut</code> - Marks the account as mutable</li> <li><code>signer</code> - Marks the account as a transaction signer</li> <li><code>storage::name = &lt;target_account_storage&gt;</code> - Links the account to a storage location for address retrieval</li> <li><code>storage::account_id = (0..3)</code> - Randomly generates an account id from the range of values, this is particularly helpful if you want to try to send different accounts to the instruction</li> <li><code>address = \"...\"</code> - Sets a constant address for the account</li> <li><code>seeds = [b\"hello_world_seed\"]</code> - Specifies the seeds for Program Derived Addresses (PDAs)</li> <li><code>skip_snapshot</code> - Excludes the account from snapshot creation</li> </ul>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-accounts/#manual-accounts-setup","title":"Manual Accounts Setup","text":"<p>If you need more control than the <code>TridentAccounts</code> macro provides, you can manually set up accounts using the <code>set_accounts</code> function:</p> <p>Precedence of <code>set_accounts</code></p> <p>The <code>set_accounts</code> method takes precedence over the <code>TridentAccounts</code> macro attributes. Any behavior defined in the <code>set_accounts</code> method will override the behavior defined in the <code>TridentAccounts</code> macro.</p> <pre><code>impl InstructionSetters for ExampleInstruction {\n    type IxAccounts = FuzzAccounts;\n\n    fn set_accounts(&amp;mut self, trident: &amp;mut Trident, fuzz_accounts: &amp;mut Self::IxAccounts) {\n        // Generate random account id\n        let account_id = trident.gen_range(0..3);\n\n        // Create and store a PDA\n        let hello_world_account = fuzz_accounts.hello_world_account.get_or_create(\n            account_id,\n            trident,\n            Some(PdaSeeds::new(&amp;[b\"hello_world_seed\"], self.get_program_id())),\n            None,\n        );\n\n        // Set the account address\n        self.accounts\n            .hello_world_account\n            .set_address(hello_world_account);\n    }\n}\n</code></pre> <p>In the previous examples:</p> <ul> <li>We configured the fuzzer to always keep the <code>author</code> account as a <code>signer</code> and as <code>mutable</code>. It will be stored in the <code>FuzzAccounts::author</code> storage, and the account id will be randomly generated from the range of 0 to 1.</li> <li>We configured the fuzzer to always keep the <code>hello_world_account</code> as a <code>mutable</code> account, which will be stored in the <code>FuzzAccounts::hello_world_account</code> storage, and it will be a PDA with an address derived from the <code>seeds</code> attribute, and the account id will be randomly generated from the range of 0 to 3.</li> <li>We configured the fuzzer to always keep the <code>system_program</code> account as a <code>constant</code>. Snapshots of this account before and after the instruction execution will not be taken.</li> </ul>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-data/","title":"Instruction Data","text":"<p>Instructions on Solana can have parameters. Trident lets you to send random data as the instruction parameters.</p>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-data/#manual-data-setup","title":"Manual Data Setup","text":"<p>The following example shows how to specify what data should be sent to the instruction. In this case we are guiding the Trident to always generate random number from 0 to <code>u8::MAX</code> and use it as the <code>input</code> parameter of the instruction.</p> <pre><code>impl InstructionSetters for DepositObligationCollateralV2Instruction {\n    type IxAccounts = FuzzAccounts;\n\n    fn set_data(\n        &amp;mut self, trident: &amp;mut Trident, _fuzz_accounts: &amp;mut Self::IxAccounts\n    ) {\n        self.data.input = trident.gen_range(0..u8::MAX);\n    }\n}\n</code></pre>"},{"location":"start-fuzzing/writting-fuzz-test/remaining-accounts/","title":"Remaining Accounts","text":"<p>Some Solana instructions require additional accounts beyond their primary accounts. These are called \"remaining accounts\" and can be configured using the <code>set_remaining_accounts</code> function.</p>"},{"location":"start-fuzzing/writting-fuzz-test/remaining-accounts/#manual-remaining-accounts-setup","title":"Manual Remaining Accounts Setup","text":"<p>Remaining accounts are defined as a struct with the <code>TridentRemainingAccounts</code> derive macro. The macro expects remaining accounts as an array of <code>TridentAccount</code>, allowing you to specify any number of additional accounts.</p> <p>Remaining Accounts Configuration</p> <p>Do not forget to add remaining accounts to the <code>Instruction</code> struct. Additionally the field has to be named <code>remaining_accounts</code>.</p> <p>Here's an example of how to set up remaining accounts:</p> <pre><code>pub struct SomeInstruction {\n    pub accounts: SomeInstructionAccounts,\n    pub data: SomeInstructionData,\n    pub remaining_accounts: SomeInstructionRemainingAccounts,\n}\n\n#[derive(Arbitrary, Debug, Clone, TridentRemainingAccounts)]\npub struct SomeInstructionRemainingAccounts {\n    pub remaining_accounts: [TridentAccount; 5],\n}\n\nimpl InstructionSetters for SomeInstruction {\n    type IxAccounts = FuzzAccounts;\n\n    fn set_remaining_accounts(\n        &amp;mut self,\n        trident: &amp;mut Trident,\n        fuzz_accounts: &amp;mut Self::IxAccounts,\n    ) {\n\n        // Generate random account id\n        let account_id = trident.gen_range(0..3);\n\n        // Get the account from storage using the generated index\n        let remaining_account1 = fuzz_accounts\n            .owner\n            .get_or_create(account_id, trident, None, None);\n\n        // Configure the account meta with:\n        // - Account public key\n        // - is_signer flag (false in this example)\n        // - is_writable flag (true in this example)\n        self.remaining_accounts.remaining_accounts[0].set_account_meta(\n            remaining_account1,\n            false, // is_signer\n            true // is_writable\n        );\n    }\n}\n</code></pre> <ul> <li>The <code>set_remaining_accounts</code> function works similarly to <code>set_accounts</code></li> <li>Each remaining account can be configured with its own signer and writable permissions</li> <li>You can access remaining accounts using array indexing (e.g., <code>remaining_accounts[0]</code>)</li> <li>The number of remaining accounts is fixed at compile time by the array size</li> </ul>"},{"location":"trident-advanced/","title":"Trident Advanced","text":"<p>This section contains advanced customization options for Trident.</p>"},{"location":"trident-advanced/#analysis-visualization","title":"Analysis &amp; Visualization","text":"<ul> <li>Code Coverage</li> <li>Dashboard</li> </ul>"},{"location":"trident-advanced/#transaction-related","title":"Transaction-related","text":"<ul> <li>Transaction Hooks</li> <li>Multi-Instruction Transactions</li> </ul>"},{"location":"trident-advanced/code-coverage/","title":"Code Coverage","text":"<p>Trident's code coverage feature analyzes which parts of your Solana program are tested during fuzzing sessions, helping you identify untested code paths and improve test effectiveness.</p>    Your browser does not support the video tag.  <p>Key features:</p> <ul> <li>Real-time Analysis: Monitor coverage as fuzzing progresses</li> <li>Multiple Formats: Generate reports in JSON and HTML formats</li> <li>VS Code Integration: Visualize coverage directly in your IDE using Solana VS Code extension</li> <li>Detailed Reporting: Get insights into line coverage, branch coverage, and execution paths</li> </ul>"},{"location":"trident-advanced/code-coverage/#gathering-coverage-data","title":"Gathering Coverage Data","text":"<ol> <li>Enable coverage in the Trident manifest</li> <li>Deploy your program through the entrypoint</li> <li>Run the fuzz test</li> </ol>"},{"location":"trident-advanced/code-coverage/#viewing-coverage-reports","title":"Viewing Coverage Reports","text":"<p>You have two options for displaying coverage data: generate an HTML report for browser viewing, or generate a JSON report for VS Code integration.</p>"},{"location":"trident-advanced/code-coverage/#html-report","title":"HTML Report","text":"<ol> <li>Set <code>format = \"html\"</code> in the Trident manifest before running the fuzz test</li> <li>Run the fuzz test</li> <li>After the fuzz test finishes, the HTML report will be stored in the <code>&lt;fuzz-test-name&gt;-coverage-report</code> folder</li> <li>Open the HTML report in your browser</li> </ol>"},{"location":"trident-advanced/code-coverage/#vs-code-extension","title":"VS Code Extension","text":"<ol> <li>Set <code>format = \"json\"</code> in the Trident manifest before running the fuzz test</li> <li>Run the fuzz test</li> <li>Install the Solana VS Code extension</li> <li>Run the VS Code command <code>Solana: Show Code Coverage</code> and select the \"Load generated JSON report\" option</li> </ol>"},{"location":"trident-advanced/code-coverage/#live-coverage-updates","title":"Live Coverage Updates","text":"<p>For real-time coverage monitoring during fuzzing:</p> <ol> <li>Set <code>format = \"json\"</code> in the Trident manifest</li> <li>Set <code>loopcount</code> to a value other than <code>0</code> e.g., <code>5</code> for frequent updates, for more info check out Trident manifest</li> <li>Install the Solana VS Code extension</li> <li>Choose one of these options:<ul> <li>Automatic: Set <code>attach_extension = true</code> in the Trident manifest to automatically show live updates while the fuzz test is running</li> <li>Manual: Use the command <code>Solana: Show Code Coverage</code> and select the \"Attach to active fuzzing session\" option</li> </ul> </li> </ol>"},{"location":"trident-advanced/dashboard/","title":"Dashboard","text":"<p>The Trident Dashboard provides a web-based interface for visualizing fuzzing session results through interactive charts and comprehensive statistics.</p>    Your browser does not support the video tag.  <p>Features:</p> <ul> <li>Session Statistics: View execution counts, success rates, and performance metrics</li> <li>Interactive Charts: Explore results through dynamic visualizations</li> <li>Browser Access: Open in any web browser without additional software</li> <li>Comprehensive Analysis: Insights into instruction coverage and account interactions</li> </ul>"},{"location":"trident-advanced/dashboard/#viewing-the-dashboard","title":"Viewing the Dashboard","text":"<ol> <li>Enable the dashboard in the Trident manifest by setting <code>dashboard = true</code></li> <li>Run the fuzz test to generate dashboard data</li> <li>Start the dashboard server:    <pre><code>trident server\n</code></pre></li> <li>Open your browser and navigate to the provided URL (typically <code>http://localhost:8080</code>)</li> </ol>"},{"location":"trident-advanced/trident-transactions/multi-instruction-transactions/","title":"Multi-Instruction Transactions","text":"<p>Trident supports fuzzing of multiple instructions within one transaction.</p> <p>By default, separate folders for <code>instructions</code> and <code>transactions</code> are created. To create multi-instruction transactions, either modify an existing <code>transaction</code> in its corresponding <code>.rs</code> file or create a new one.</p> <p>Instruction Resolution Order</p> <p>In multi-instruction transactions, instruction hooks are executed in the same order as the instructions are defined in the transaction structure.</p>"},{"location":"trident-advanced/trident-transactions/multi-instruction-transactions/#example","title":"Example","text":"<p>The following example demonstrates:</p> <ul> <li>Creating a multi-instruction transaction</li> <li>Adding the transaction to the <code>FuzzTransactions</code> enum</li> </ul> <pre><code>// example_transaction.rs\nuse crate::fuzz_accounts::FuzzAccounts;\nuse crate::instructions::*;\nuse trident_fuzz::fuzzing::*;\n\n/// Customize transaction behavior by adding more instructions.\n///\n/// Docs: https://ackee.xyz/trident/docs/latest/trident-advanced/trident-transactions/multi-instruction-transactions/\n#[derive(Debug, TridentTransaction, Default)]\npub struct ExampleTransaction {\n    pub instruction1: ExampleInstruction1, // instruction one\n    pub instruction2: ExampleInstruction2, // instruction two\n}\n\n\nimpl TransactionHooks for ExampleTransaction {}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/","title":"Transaction Methods","text":"<p>Trident supports customizing transaction behavior with <code>Transaction Hooks</code>.</p> <ul> <li>Pre-Transaction Execution: Perform custom logic before transaction execution</li> <li>Post-Transaction Execution: Perform custom logic after transaction execution</li> <li>Transaction Invariants: Validate transaction-specific invariants</li> <li>Transaction Error Handling: Handle transaction errors</li> <li>Typed Accounts: Deserialize accounts into typed data to perform differential analysis</li> </ul>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/error-handler/","title":"Transaction Error Hook","text":"<p>Trident lets you handle errors that occur during transaction execution.</p> <p>This feature is helpful when you want to investigate errors and verify if the behavior is as expected.</p> <p>Error Hook Execution Order</p> <p>The <code>transaction_error_handler</code> method is called only when the transaction has <code>FAILED</code>.</p> <pre><code>impl TransactionHooks for ExampleTransaction {\n    type IxAccounts = FuzzAccounts;\n\n    fn transaction_error_handler(&amp;self, e: TransactionError) -&gt; Result&lt;(), TransactionError&gt; {\n        // Your custom error handling logic goes here\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/error-handler/#example","title":"Example","text":"<p>The following example demonstrates:</p> <ul> <li>Logging the error</li> <li>Returning Ok to suppress the error</li> </ul> <pre><code>impl TransactionHooks for ExampleTransaction {\n    type IxAccounts = FuzzAccounts;\n\n    fn transaction_error_handler(&amp;self, e: TransactionError) -&gt; Result&lt;(), TransactionError&gt; {\n        // Example: Log the error and decide whether to propagate it\n        eprintln!(\"Transaction failed with error: {:?}\", e);\n\n        // Return Ok to suppress the error, or Err to propagate it\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/invariant-check/","title":"Transaction Invariant Hook","text":"<p>Transaction invariant checks let you compare account states before and after transaction execution (differential analysis), or verify that accounts are in a specific state after the transaction.</p> <p>This is useful to validate transaction behavior and ensure accounts are not modified in unexpected ways.</p> <p>Invariant Check Execution Order</p> <p>The <code>transaction_invariant_check</code> method is called only after the transaction is <code>SUCCESSFULLY</code> executed.</p> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn transaction_invariant_check(&amp;self) -&gt; Result&lt;(), FuzzingError&gt; {\n        // Your custom differential analysis goes here\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/invariant-check/#example","title":"Example","text":"<p>The following example demonstrates:</p> <ul> <li>Obtaining the owner's balance after the transaction, with <code>.get_snapshot_after()</code> (post transaction snapshot)</li> <li>Comparing the balance to the expected balance (500 lamports)</li> </ul> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn transaction_invariant_check(&amp;self) -&gt; Result&lt;(), FuzzingError&gt; {\n        // Obtain the owner's balance after the transaction\n        let owner_lamports = self\n            .instruction\n            .accounts\n            .owner\n            .get_snapshot_after()\n            .lamports();\n\n        // Compare the balance and return error if not valid\n        if owner_lamports &gt; 500 {\n            return Err(FuzzingError::with_message(\n                \"Owner lamports should be less than 500\",\n            ));\n        }\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/pre-post-execution/","title":"Pre and Post Transaction Hooks","text":"<p>Trident lets you perform specific logic before and after transaction execution with pre_transaction and post_transaction methods.</p> <p>These methods accept a <code>FuzzClient</code> parameter, which provides methods to interact with the fuzzing environment. See the FuzzClient documentation for details.</p> <p>Post-Transaction Execution Order</p> <p>The <code>post_transaction</code> method is called only after the transaction is <code>SUCCESSFULLY</code> executed.</p> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn pre_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n        // Your custom logic goes here\n    }\n}\n</code></pre> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn post_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n        // Your custom logic goes here\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/pre-post-execution/#example","title":"Example","text":"<p>The following examples demonstrate:</p> <ul> <li>Always forward in time before the transaction</li> <li>Always forward in time after the transaction</li> </ul> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn pre_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n        client.forward_in_time(500);\n    }\n}\n</code></pre> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn post_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n        client.forward_in_time(500);\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/typed-accounts/","title":"Typed Accounts","text":"<p>If you need to work with <code>data accounts</code> in the <code>Transaction hooks</code>, you will first need to deserialize the accounts. For deserialization into known structs, Trident generates <code>types.rs</code>, where each struct derives <code>BorshDeserialize</code> and <code>BorshSerialize</code>.</p> <p>Serialization/Deserialization</p> <ul> <li>If you use custom Serialization/Deserialization, you will need to add it also to the <code>types.rs</code> file.</li> </ul>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/typed-accounts/#example","title":"Example","text":"<p>The following example demonstrates:</p> <ul> <li>Obtaining example data account after the transaction, with <code>.get_snapshot_after()</code> (post transaction snapshot)</li> <li><code>.data_no_discriminator()</code> ensures that the first 8 bytes (account discriminator) are not included in the deserialization</li> <li>Deserializing the data account into the <code>ExampleDataAccount</code> struct</li> </ul> <pre><code>// types.rs\n#[derive(Arbitrary, Debug, BorshDeserialize, BorshSerialize, Clone)]\npub struct ExampleDataAccount {\n    pub data: u64,\n}\n</code></pre> <pre><code>// example_transaction.rs\n\n#[derive(Arbitrary, Debug, TridentTransaction)]\npub struct ExampleTransaction {\n    pub instruction: ExampleInstruction,\n}\n\nimpl TransactionHooks for ExampleTransaction {\n    fn post_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n        // Take account\n        let example_account =\n            self.instruction.accounts.example_data_account.get_snapshot_after();\n\n        // obtain data without the first 8 bytes (account discriminator) and\n        // deserialize the data\n        let example_account =\n            ExampleDataAccount::deserialize(\n                &amp;mut example_account.data_no_discriminator()\n            ).unwrap();\n\n        // your additional custom code here ...\n    }\n}\n</code></pre>"},{"location":"trident-api-macro/","title":"Trident API &amp; Macro Reference","text":"<p>This section contains the API and macro reference for Trident.</p>"},{"location":"trident-api-macro/#trident","title":"Trident","text":"<p>The Trident struct is the main entry point for fuzzing. It provides methods to interact with the fuzzing environment.</p> <ul> <li>Trident</li> </ul>"},{"location":"trident-api-macro/#tridents-fuzz-client","title":"Trident's Fuzz Client","text":"<p>FuzzClient represents the API to interact with the client.</p> <ul> <li>FuzzClient</li> </ul>"},{"location":"trident-api-macro/#trident-accounts-attributes","title":"Trident Accounts attributes","text":"<p>Trident Accounts attributes help to define accounts used in the fuzzing environment.</p> <ul> <li>TridentAccounts</li> </ul>"},{"location":"trident-api-macro/#hooks","title":"Hooks","text":"<p>Transaction Hooks are used to customize what should be done before the transaction is executed, after it is executed and to check if the changes are valid with invariant checks.</p> <ul> <li>InstructionHooks</li> </ul> <p>Instruction Hooks are used to customize instruction data and accounts if the Trident Accounts attributes are not enough.</p> <ul> <li>TransactionHooks</li> </ul>"},{"location":"trident-api-macro/#trident-macros","title":"Trident Macros","text":"<p>Trident macros are used to define required methods for fuzzing.</p> <ul> <li>TridentTransaction</li> <li>TridentInstruction</li> <li>TridentAccounts</li> <li>TridentRemainingAccounts</li> <li>TridentFlowExecutor</li> </ul>"},{"location":"trident-api-macro/#trident-types","title":"Trident Types","text":"<p>Trident types represent the types utilized during fuzzing.</p> <ul> <li>FuzzAccounts</li> <li>TridentAccount</li> <li>TridentPubkey</li> <li>CustomTypes</li> </ul>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/","title":"TridentAccount attributes","text":"<p>These attributes are applied to individual account fields using the <code>#[account(...)]</code> syntax.</p>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/#accountmut","title":"<code>account(mut)</code>","text":"<p>Marks the account as mutable. This will set the <code>is_writable</code> flag to <code>true</code> in the generated <code>AccountMeta</code>.</p> <p><code>This attribute is optional</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(mut)]\n    pub mutable_account: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/#accountsigner","title":"<code>account(signer)</code>","text":"<p>Marks the account as a signer. This will set the <code>is_signer</code> flag to <code>true</code> in the generated <code>AccountMeta</code>.</p> <p><code>This attribute is optional</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(signer)]\n    pub authority: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/#accountaddress","title":"<code>account(address)</code>","text":"<p>Sets a fixed address for the account. Useful for program IDs that have known addresses.</p> <p><code>This attribute is optional</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(address = \"11111111111111111111111111111111\")]\n    pub system_program: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/#accountstoragename","title":"<code>account(storage::name)</code>","text":"<p>Specifies which storage to use for the account. This determines where the account address is stored and managed.</p> <p><code>This attribute is optional</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(storage::name = owner)]\n    pub owner: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/#accountstorageaccount_id","title":"<code>account(storage::account_id)</code>","text":"<p>Specifies a range of random numbers generated and mapped to address (Pubkey).</p> <p>A bigger range results in more random account addresses being fuzzed.</p> <p><code>This attribute is optional</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(storage::name = owner)]\n    pub owner: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/#accountskip_snapshot","title":"<code>account(skip_snapshot)</code>","text":"<p>Excludes the account from state snapshots. Useful for accounts that don't need to be tracked for state changes.</p> <p><code>This attribute is optional</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(skip_snapshot)]\n    pub ignored_for_snapshots: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/#accountseeds","title":"<code>account(seeds)</code>","text":"<p>Defines Program Derived Address (PDA) seeds for the account. The seeds can include references to other accounts in the struct, allowing for dependency-based PDA derivation.</p> <p><code>This attribute is optional but requires the storage attribute</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(storage = pdas, seeds = [b\"seed\", authority.key().as_ref()])]\n    pub pda_account: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/#accountprogram_id","title":"<code>account(program_id)</code>","text":"<p>Specifies the program ID for PDA derivation. If not provided, the program ID of the instruction will be used.</p> <p><code>This attribute is applied at the field level and is used with seeds</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(\n        storage = custom_pda,\n        seeds = [b\"seed\"],\n        program_id = pubkey!(\"11111111111111111111111111111111\")\n    )]\n    pub custom_pda: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/#accountlamports","title":"<code>account(lamports)</code>","text":"<p>Specifies the lamports for the account. If not provided, the default is 500 * LAMPORTS_PER_SOL.</p> <p><code>This attribute is optional but requires the storage attribute</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(\n        storage = custom_pda,\n        lamports = 5 * LAMPORTS_PER_SOL\n    )]\n    pub wallet: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/#accountspace","title":"<code>account(space)</code>","text":"<p>Specifies the space for the account. If not provided, the default is 0.</p> <p><code>This attribute is optional but requires the storage attribute and owner attribute</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(\n        storage = custom_pda,\n        space = 8 + 100,\n        owner = pubkey!(\"program id goes here\")\n    )]\n    pub custom_pda: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/attributes-for-accounts/account-attributes/#accountowner","title":"<code>account(owner)</code>","text":"<p>Specifies the owner for the account. If not provided, the system program is the default.</p> <p><code>This attribute is optional but requires the storage attribute</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(\n        storage = custom_pda,\n        owner = pubkey!(\"program id goes here\")\n    )]\n    pub custom_pda: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/hooks/instruction-hooks/","title":"Instruction Hooks","text":"<p>These methods can be overridden to customize instruction behavior during fuzzing.</p>"},{"location":"trident-api-macro/hooks/instruction-hooks/#set_data","title":"<code>set_data</code>","text":"<p>Override this method to customize how instruction data is set during fuzzing.</p> <pre><code>fn set_data(&amp;mut self, trident: &amp;mut Trident, fuzz_accounts: &amp;mut Self::IxAccounts) {\n    // Custom data setting logic\n}\n</code></pre>"},{"location":"trident-api-macro/hooks/instruction-hooks/#set_accounts","title":"<code>set_accounts</code>","text":"<p>Override this method to customize how instruction accounts are set during fuzzing.</p> <pre><code>fn set_accounts(&amp;mut self, trident: &amp;mut Trident, fuzz_accounts: &amp;mut Self::IxAccounts) {\n    // Custom account setting logic\n}\n</code></pre>"},{"location":"trident-api-macro/hooks/instruction-hooks/#set_remaining_accounts","title":"<code>set_remaining_accounts</code>","text":"<p>Override this method to customize how remaining accounts are set during fuzzing.</p> <pre><code>fn set_remaining_accounts(\n    &amp;mut self,\n    trident: &amp;mut Trident,\n    fuzz_accounts: &amp;mut Self::IxAccounts,\n) {\n    // Custom remaining accounts setting logic\n}\n</code></pre>"},{"location":"trident-api-macro/hooks/transaction-hooks/","title":"Transaction Hooks","text":"<p>These methods can be overridden to customize transaction behavior during fuzzing.</p>"},{"location":"trident-api-macro/hooks/transaction-hooks/#pre_transaction","title":"<code>pre_transaction</code>","text":"<p>Override this method to perform custom actions before the transaction is executed.</p> <pre><code>fn pre_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n    // Custom pre-transaction logic\n    // e.g., set up accounts, perform checks, etc.\n}\n</code></pre>"},{"location":"trident-api-macro/hooks/transaction-hooks/#post_transaction","title":"<code>post_transaction</code>","text":"<p>Override this method to perform custom actions after the transaction is executed.</p> <pre><code>fn post_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n    // Custom post-transaction logic\n    // e.g., cleanup, additional checks, etc.\n}\n</code></pre>"},{"location":"trident-api-macro/hooks/transaction-hooks/#transaction_invariant_check","title":"<code>transaction_invariant_check</code>","text":"<p>Override this method to perform custom invariant checks on the transaction results.</p> <pre><code>fn transaction_invariant_check(&amp;self) -&gt; Result&lt;(), FuzzingError&gt; {\n    // Custom invariant checks\n    // Return Err(FuzzingError) if invariants are violated\n    Ok(())\n}\n</code></pre> <p>Returns:</p> <ul> <li><code>Ok(())</code> if all invariants pass</li> <li><code>Err(FuzzingError)</code> if any invariant is violated</li> </ul>"},{"location":"trident-api-macro/hooks/transaction-hooks/#transaction_error_handler","title":"<code>transaction_error_handler</code>","text":"<p>Override this method to handle transaction errors with custom logic.</p> <pre><code>fn transaction_error_handler(&amp;self, error: TransactionError) {\n    // Custom error handling logic\n    // e.g., logging, state cleanup, etc.\n}\n</code></pre>"},{"location":"trident-api-macro/trident/trident/","title":"Trident","text":"<p>The <code>Trident</code> struct is the main orchestrator for fuzzing operations. It manages the fuzzing client, random number generation, and provides methods for executing transactions and collecting metrics.</p> <pre><code>pub struct Trident {\n    client: TridentSVM,\n    fuzzing_data: TridentFuzzingData,\n    rng: TridentRng,\n}\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#core-methods","title":"Core Methods","text":""},{"location":"trident-api-macro/trident/trident/#execute_transaction","title":"<code>execute_transaction</code>","text":"<p>Executes a transaction with all transaction hooks enabled, including pre/post transaction hooks and error handling.</p> <pre><code>pub fn execute_transaction&lt;T&gt;(\n    &amp;mut self,\n    transaction: &amp;mut T,\n    transaction_name_override: Option&lt;&amp;str&gt;,\n) where\n    T: TransactionHooks + TransactionGetters + TransactionSetters + TransactionPrivateMethods + std::fmt::Debug\n</code></pre> <p>Parameters: - <code>transaction</code> - The transaction to execute - <code>transaction_name_override</code> - Optional custom name for the transaction (used in metrics)</p>"},{"location":"trident-api-macro/trident/trident/#get_client","title":"<code>get_client</code>","text":"<p>Returns a mutable reference to the underlying fuzzing client.</p> <pre><code>pub fn get_client(&amp;mut self) -&gt; &amp;mut impl FuzzClient\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#airdrop","title":"<code>airdrop</code>","text":"<p>Adds lamports to the specified account address.</p> <pre><code>pub fn airdrop(&amp;mut self, address: &amp;Pubkey, amount: u64)\n</code></pre> <p>Parameters: - <code>address</code> - The account to receive the lamports - <code>amount</code> - The number of lamports to add</p>"},{"location":"trident-api-macro/trident/trident/#random-number-generation-methods","title":"Random Number Generation Methods","text":""},{"location":"trident-api-macro/trident/trident/#gen_range","title":"<code>gen_range</code>","text":"<p>Generates a random number within the specified range.</p> <pre><code>pub fn gen_range&lt;T, R&gt;(&amp;mut self, range: R) -&gt; T\nwhere\n    T: SampleUniform,\n    R: SampleRange&lt;T&gt;\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#gen_pubkey","title":"<code>gen_pubkey</code>","text":"<p>Generates a random public key.</p> <pre><code>pub fn gen_pubkey(&amp;mut self) -&gt; Pubkey\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#gen_string","title":"<code>gen_string</code>","text":"<p>Generates a random string of the specified length.</p> <pre><code>pub fn gen_string(&amp;mut self, length: usize) -&gt; String\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#fill_bytes","title":"<code>fill_bytes</code>","text":"<p>Fills the provided byte array with random data.</p> <pre><code>pub fn fill_bytes(&amp;mut self, bytes: &amp;mut [u8])\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#metrics-methods","title":"Metrics Methods","text":""},{"location":"trident-api-macro/trident/trident/#add_histogram_metric","title":"<code>add_histogram_metric</code>","text":"<p>Adds a value to a histogram metric. Only records if the <code>FUZZING_METRICS</code> environment variable is set.</p> <pre><code>pub fn add_histogram_metric(&amp;mut self, metric_name: &amp;str, value: f64)\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#add_accumulator_metric","title":"<code>add_accumulator_metric</code>","text":"<p>Adds a value to an accumulator metric. Only records if the <code>FUZZING_METRICS</code> environment variable is set.</p> <pre><code>pub fn add_accumulator_metric(&amp;mut self, metric_name: &amp;str, value: f64)\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#monitor_account_state","title":"<code>monitor_account_state</code>","text":"<p>Monitors the state of an account for fuzzing metrics. Only records if the <code>FUZZING_REGRESSION</code> environment variable is set.</p> <pre><code>pub fn monitor_account_state(&amp;mut self, account: &amp;Pubkey, account_name: &amp;str)\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#internal-methods","title":"Internal Methods","text":"<p>Internal Methods</p> <p>These methods are used internally by Trident and should not be called directly.</p>"},{"location":"trident-api-macro/trident/trident/#_set_master_seed_for_debug","title":"<code>_set_master_seed_for_debug</code>","text":"<p>Sets the master seed for deterministic fuzzing in debug mode.</p> <pre><code>pub fn _set_master_seed_for_debug(&amp;mut self, seed: [u8; 32])\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#_set_master_seed_and_thread_id","title":"<code>_set_master_seed_and_thread_id</code>","text":"<p>Sets the master seed and thread ID for multi-threaded fuzzing.</p> <pre><code>pub fn _set_master_seed_and_thread_id(&amp;mut self, seed: [u8; 32], thread_id: usize)\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#_next_iteration","title":"<code>_next_iteration</code>","text":"<p>Prepares for the next fuzzing iteration by clearing temporary accounts and rotating the seed.</p> <pre><code>pub fn _next_iteration(&amp;mut self)\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#_get_fuzzing_data","title":"<code>_get_fuzzing_data</code>","text":"<p>Returns the current fuzzing data for metrics collection.</p> <pre><code>pub fn _get_fuzzing_data(&amp;self) -&gt; TridentFuzzingData\n</code></pre>"},{"location":"trident-api-macro/trident/trident/#_get_metrics","title":"<code>_get_metrics</code>","text":"<p>Returns a reference to the fuzzing statistics.</p> <pre><code>pub fn _get_metrics(&amp;self) -&gt; &amp;FuzzingStatistics\n</code></pre>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/","title":"Trident's Fuzz Client","text":"<p>Trident's Client (<code>FuzzClient</code>) is a wrapper around the TridentSVM that provides methods to manipulate the execution environment during fuzzing.</p> <p>This section describes the methods that are available in the <code>FuzzClient</code>.</p>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#trident-client-methods","title":"Trident Client Methods","text":""},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#new_client","title":"<code>new_client</code>","text":"<p>Creates a new instance of the fuzzing client.</p> <p>Internal Method</p> <p>This method is internal and should not be called directly.</p> <pre><code>fn new_client() -&gt; Self\n</code></pre>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#deploy_entrypoint","title":"<code>deploy_entrypoint</code>","text":"<p>Syscalls Feature Requirement</p> <p>This method is only available if the <code>syscall-v1</code> or <code>syscall-v2</code> features are enabled.</p> <p>Deploys a program through its entrypoint. <pre><code>fn deploy_entrypoint(&amp;mut self, program: TridentEntrypoint)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#deploy_program","title":"<code>deploy_program</code>","text":"<p>Deploys a program as binary. <pre><code>fn deploy_program(&amp;mut self, program: TridentProgram)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#get_sysvar","title":"<code>get_sysvar</code>","text":"<p>Retrieves <code>Sysvars</code> like <code>Rent</code>, <code>Clock</code>, etc. <pre><code>fn get_sysvar&lt;T: Sysvar&gt;(&amp;self) -&gt; T\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#warp_to_epoch","title":"<code>warp_to_epoch</code>","text":"<p>Advances the fuzz test to a specific epoch. <pre><code>fn warp_to_epoch(&amp;mut self, warp_epoch: u64)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#warp_to_slot","title":"<code>warp_to_slot</code>","text":"<p>Advances the fuzz test to a specific slot. <pre><code>fn warp_to_slot(&amp;mut self, warp_slot: u64)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#warp_to_timestamp","title":"<code>warp_to_timestamp</code>","text":"<p>Sets the fuzz test to a specific timestamp. <pre><code>fn warp_to_timestamp(&amp;mut self, warp_timestamp: i64)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#forward_in_time","title":"<code>forward_in_time</code>","text":"<p>Advances the fuzz test by the specified number of seconds. <pre><code>fn forward_in_time(&amp;mut self, seconds: i64)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#set_account_custom","title":"<code>set_account_custom</code>","text":"<p>Creates or overwrites an account at the specified address, bypassing normal runtime checks. <pre><code>fn set_account_custom(&amp;mut self, address: &amp;Pubkey, account: &amp;AccountSharedData)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#get_account","title":"<code>get_account</code>","text":"<p>Retrieves the account data at the specified address. <pre><code>fn get_account(&amp;mut self, key: &amp;Pubkey) -&gt; AccountSharedData\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#payer","title":"<code>payer</code>","text":"<p>Returns the keypair of the client's payer account. <pre><code>fn payer(&amp;self) -&gt; Keypair\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#get_last_blockhash","title":"<code>get_last_blockhash</code>","text":"<p>Retrieves the most recent blockhash.</p> <p>Warning</p> <p>Currently, this method is not implemented and a call to this method will result in a panic.</p> <pre><code>fn get_last_blockhash(&amp;self) -&gt; Hash\n</code></pre>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#_process_instructions","title":"<code>_process_instructions</code>","text":"<p>Executes a set of instructions and waits for them to be either finalized or rejected.</p> <p>Internal Method</p> <p>This method is internal and should not be called directly.</p> <pre><code>fn _process_instructions(\n    &amp;mut self,\n    instructions: &amp;[Instruction],\n) -&gt; trident_svm::prelude::solana_svm::transaction_processor::LoadAndExecuteSanitizedTransactionsOutput\n</code></pre>"},{"location":"trident-api-macro/trident-fuzz-client/fuzz-client-trait/#_clear_accounts","title":"<code>_clear_accounts</code>","text":"<p>Removes temporary accounts created during the fuzzing iteration.</p> <p>Internal Method</p> <p>This method is internal and should not be called directly.</p> <pre><code>fn _clear_accounts(&amp;mut self)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/","title":"TridentAccounts","text":"<p>The <code>TridentAccounts</code> macro is used to derive required methods for account structures.</p>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#derived-traits","title":"Derived Traits","text":"<p>The macro implements the following trait:</p> <ul> <li><code>AccountsMethods</code> - Methods to resolve accounts</li> </ul> <p>Manual Implementation Note</p> <p>There is no need to manually implement any methods of this trait. The macro handles all implementations automatically based on the account structure and attributes.</p>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#accounts-methods","title":"Accounts Methods","text":"<p>Internal Method</p> <p>These methods are used internally by Trident and it is not expected to use them manually.</p>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#resolve_accounts","title":"<code>resolve_accounts</code>","text":"<p>Resolves all accounts based on their constraints and dependencies. The macro automatically analyzes seed dependencies and sorts fields in the correct resolution order.</p> <pre><code>fn resolve_accounts(\n    &amp;mut self,\n    trident: &amp;mut Trident,\n    ix_accounts: &amp;mut Self::IxAccounts,\n    program_id: Pubkey,\n    instruction_data: &amp;Self::IxData,\n)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#to_account_meta","title":"<code>to_account_meta</code>","text":"<p>Converts all accounts to AccountMeta format for Solana instructions.</p> <pre><code>fn to_account_meta(&amp;mut self) -&gt; Vec&lt;AccountMeta&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#capture_before","title":"<code>capture_before</code>","text":"<p>Captures the state of accounts before transaction execution.</p> <pre><code>fn capture_before(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#capture_after","title":"<code>capture_after</code>","text":"<p>Captures the state of accounts after transaction execution.</p> <pre><code>fn capture_after(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#struct-level-attributes","title":"Struct-Level Attributes","text":"<p>These attributes are applied to the struct definition itself.</p>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#instruction_data","title":"<code>instruction_data</code>","text":"<p>Specifies the instruction data type that will be used with these accounts.</p> <p><code>This attribute is mandatory and applied at the struct level</code></p> <pre><code>#[derive(TridentAccounts)]\n#[instruction_data(ExampleInstructionData)]\npub struct ExampleAccounts {\n    // fields...\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#storage","title":"<code>storage</code>","text":"<p>Specifies the storage type for accounts, which is used to manage account state during fuzzing.</p> <p><code>This attribute is mandatory and applied at the struct level</code></p> <pre><code>#[derive(TridentAccounts)]\n#[storage(ExampleStorage)]\npub struct ExampleAccounts {\n    // fields...\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/","title":"Flow Executor","text":"<p>The Flow Executor macros are a set of attribute macros used to define and control execution flows. These macros help organize and manage the execution of complex test scenarios.</p>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#available-macros","title":"Available Macros","text":"<p>The Flow Executor functionality consists of four main attribute macros:</p> <ol> <li><code>#[flow_executor]</code> - Implements the flow executor for a struct</li> <li><code>#[flow]</code> - Marks a method as part of the execution flow</li> <li><code>#[init]</code> - Marks a method to run once at the beginning of each iteration before all flow methods</li> <li><code>#[end]</code> - Marks a method to run once at the end of each iteration after all flow methods</li> </ol>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#usage","title":"Usage","text":"<pre><code>#[derive(FuzzTestMethods)]\nstruct FuzzTest {\n    /// for fuzzing\n    trident: Trident,\n    /// for storing fuzzing accounts\n    fuzz_accounts: FuzzAccounts,\n}\n\n#[flow_executor]\nimpl FuzzTest {\n    fn new() -&gt; Self {\n        Self {\n            trident: Trident::default(),\n            fuzz_accounts: FuzzAccounts::default(),\n        }\n    }\n\n    #[init]\n    fn start(&amp;mut self) {\n        // perform any initialization here, this method will be executed\n        // at start of each iteration\n    }\n\n    #[flow]\n    fn flow1(&amp;mut self) {\n        // perform logic which is meant to be fuzzed\n        // this flow is selected randomly from other flows\n    }\n\n    #[flow]\n    fn flow2(&amp;mut self) {\n        // perform logic which is meant to be fuzzed\n        // this flow is selected randomly from other flows\n    }\n\n    #[end]\n    fn end(&amp;mut self) {\n        // perform any cleanup here, this method will be executed\n        // at the end of each iteration\n    }\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#implementation-level-attributes","title":"Implementation-Level attributes","text":""},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#flow_executor","title":"<code>#[flow_executor]</code>","text":"<p>The <code>flow_executor</code> attribute macro is applied to an <code>impl</code> block and implements the flow executor functionality for the struct.</p> <pre><code>#[flow_executor]\nimpl FuzzTest {\n    // Flow methods...\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#method-level-attributes","title":"Method-Level attributes","text":""},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#init","title":"<code>#[init]</code>","text":"<p>The <code>init</code> attribute macro marks a method as the initialization method for the flows. This method is executed at the beginning of each iteration before all flow methods.</p> <p>Initialization Method</p> <p>It is possible to define only one initialization method.</p> <pre><code>#[init]\nfn initialize(&amp;mut self) {\n    // Initialization logic\n    // Perform initialization Transaction here\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#flow","title":"<code>#[flow]</code>","text":"<p>The <code>flow</code> attribute macro marks a method as part of the execution flow.</p> <p>Flow Methods</p> <p>It is possible to define multiple flow methods.</p> <p>If multiple flows are defined, the fuzzer will pick randomly and generate a sequence of random flows to execute.</p> <pre><code>#[flow]\nfn step_one(&amp;mut self) {\n    // Flow step implementation\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#end","title":"<code>#[end]</code>","text":"<p>The <code>end</code> attribute macro marks a method to run once at the end of each iteration after all flow methods.</p> <p>Cleanup Method</p> <p>It is possible to define only one end method.</p> <pre><code>#[end]\nfn cleanup(&amp;mut self) {\n    // Cleanup logic\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#generated-methods","title":"Generated Methods","text":""},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#fuzz","title":"<code>fuzz</code>","text":"<p>Runs the fuzzing process with multiple concurrent fuzzing threads.</p> <pre><code>fn fuzz(iterations: u64, flow_calls_per_iteration: u64)\n</code></pre> <ul> <li><code>iterations</code> - Number of iterations to run</li> <li><code>flow_calls_per_iteration</code> - Number of flow methods called in each iteration (e.g. if the <code>flow_calls_per_iteration</code> is 100, the fuzzer will pick a random sequence of 100 flow methods to execute in each iteration)</li> </ul>"},{"location":"trident-api-macro/trident-macros/trident-instruction/","title":"TridentInstruction","text":"<p>The <code>TridentInstruction</code> macro is used to derive required methods for <code>Instructions</code>. This procedural macro automatically implements instruction-related functionality for structs that represent instructions.</p> <p>Required Field Names</p> <p>The macro parser strictly requires the struct to have an <code>accounts</code> field named exactly <code>accounts</code>. If a remaining accounts field is used, it must be named exactly <code>remaining_accounts</code>.</p>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#derived-traits","title":"Derived Traits","text":"<p>The macro implements the following traits:</p> <ul> <li><code>InstructionGetters</code> - Methods to retrieve instruction data</li> <li><code>InstructionSetters</code> - Methods to set up instruction state</li> </ul> <p>Manual Implementation Note</p> <p>There is no need to manually implement the getter, setter, or hook methods. The macro handles these implementations automatically based on the structure of your instruction.</p>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#instruction-getters","title":"Instruction Getters","text":"<p>Internal Method</p> <p>These methods are used internally by Trident and it is not expected to use them manually.</p>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#get_discriminator","title":"<code>get_discriminator</code>","text":"<p>Returns the instruction discriminator (identifier bytes) that uniquely identifies this instruction of the program.</p> <pre><code>fn get_discriminator(&amp;self) -&gt; Vec&lt;u8&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#get_program_id","title":"<code>get_program_id</code>","text":"<p>Returns the program ID that will process this instruction.</p> <pre><code>fn get_program_id(&amp;self) -&gt; solana_sdk::pubkey::Pubkey\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#to_account_metas","title":"<code>to_account_metas</code>","text":"<p>Converts all accounts to AccountMeta format for Solana instructions.</p> <pre><code>fn to_account_metas(&amp;mut self) -&gt; Vec&lt;AccountMeta&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#instruction-setters","title":"Instruction Setters","text":"<p>Internal Method</p> <p>These methods are used internally by Trident and it is not expected to use them manually.</p>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#set_snapshot_before","title":"<code>set_snapshot_before</code>","text":"<p>Captures the state of all accounts before instruction execution.</p> <pre><code>fn set_snapshot_before(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#set_snapshot_after","title":"<code>set_snapshot_after</code>","text":"<p>Captures the state of all accounts after instruction execution.</p> <pre><code>fn set_snapshot_after(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#resolve_accounts","title":"<code>resolve_accounts</code>","text":"<p>Resolves all accounts needed for this instruction.</p> <pre><code>fn resolve_accounts(\n    &amp;mut self,\n    client: &amp;mut impl FuzzClient,\n    fuzz_accounts: &amp;mut Self::IxAccounts,\n)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#struct-level-attributes","title":"Struct-Level Attributes","text":"<p>These attributes are applied to the struct definition itself.</p>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#program_id","title":"<code>program_id</code>","text":"<p>Specifies the program ID that will process this instruction. This can be provided as a string literal containing a base58-encoded public key.</p> <p><code>This attribute is mandatory</code></p> <pre><code>#[derive(Arbitrary, Debug, TridentInstruction)]\n#[program_id(\"KLend2g3cP87fffoy8q1mQqGKjrxjC8boSyAYavgmjD\")]\npub struct ExampleInstruction {\n    pub accounts: ExampleInstructionAccounts,\n    pub data: ExampleInstructionData,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#discriminator","title":"<code>discriminator</code>","text":"<p>Specifies the instruction discriminator bytes that uniquely identify this instruction to the program. This is typically an 8-byte array.</p> <p><code>This attribute is mandatory</code></p> <pre><code>#[derive(Arbitrary, Debug, TridentInstruction)]\n#[discriminator([33u8, 132u8, 147u8, 228u8, 151u8, 192u8, 72u8, 89u8])]\npub struct ExampleInstruction {\n    pub accounts: ExampleInstructionAccounts,\n    pub data: ExampleInstructionData,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/","title":"TridentRemainingAccounts","text":"<p>The <code>TridentRemainingAccounts</code> macro is used to derive required methods for <code>remaining account structures</code>.</p> <p>The struct must have exactly one field that holds the remaining accounts and is of type <code>[TridentAccount; X]</code>, with <code>X</code> being the number of remaining accounts, required.</p> <pre><code>#[derive(Arbitrary, Debug, TridentRemainingAccounts)]\npub struct ExampleRemainingAccounts {\n    pub remaining_accounts: [TridentAccount; 2],\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/#derived-traits","title":"Derived Traits","text":"<p>The macro implements the following trait:</p> <ul> <li><code>RemainingAccountsMethods</code> - Methods to resolve remaining accounts</li> </ul> <p>Manual Implementation Note</p> <p>There is no need to manually implement any methods of this trait. The macro handles all implementations automatically based on the account structure and attributes.</p> <p>Dynamic Sizing Behavior</p> <p>The macro will only process accounts until it encounters the first unset remaining account. This allows for dynamic sizing of remaining accounts.</p>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/#remaining-accounts-methods","title":"Remaining Accounts Methods","text":"<p>Internal Method</p> <p>These methods are used internally by Trident and it is not expected to use them manually.</p> <p>The macro implements the <code>RemainingAccountsMethods</code> trait with the corresponding methods:</p>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/#to_account_meta","title":"<code>to_account_meta</code>","text":"<p>Convert accounts to account metas <pre><code>fn to_account_meta(&amp;mut self) -&gt; Vec&lt;AccountMeta&gt;;\n</code></pre></p>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/#capture_before","title":"<code>capture_before</code>","text":"<p>Capture account state before transaction execution <pre><code>fn capture_before(&amp;mut self, client: &amp;mut impl FuzzClient);\n</code></pre></p>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/#capture_after","title":"<code>capture_after</code>","text":"<p>Capture account state after transaction execution <pre><code>fn capture_after(&amp;mut self, client: &amp;mut impl FuzzClient);\n</code></pre></p>"},{"location":"trident-api-macro/trident-macros/trident-transaction/","title":"TridentTransaction","text":"<p>The <code>TridentTransaction</code> macro is used to derive required methods for <code>Transactions</code>. This procedural macro automatically implements transaction-related functionality for structs that represent transactions.</p>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#derived-traits","title":"Derived Traits","text":"<p>The macro implements the following traits:</p> <ul> <li><code>TransactionGetters</code> - Methods to retrieve transaction data</li> <li><code>TransactionSetters</code> - Methods to set up transaction state</li> </ul> <p>Manual Implementation Note</p> <p>There is no need to manually implement the TransactionGetters and TransactionSetters. The macro handles these implementations automatically based on the structure of your transaction.</p>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#transaction-getters","title":"Transaction Getters","text":"<p>Internal Method</p> <p>These methods are used internally by Trident and it is not expected to use them manually.</p>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#get_transaction_name","title":"<code>get_transaction_name</code>","text":"<p>Returns the name of the transaction. If a custom name is provided via the <code>#[name(\"...\")]</code> attribute, that name will be used; otherwise, the struct name is used.</p> <pre><code>fn get_transaction_name(&amp;self) -&gt; String\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#get_instruction_discriminators","title":"<code>get_instruction_discriminators</code>","text":"<p>Returns the instruction discriminators (identifiers) for all instructions in the transaction.</p> <pre><code>fn get_instruction_discriminators(&amp;self) -&gt; Vec&lt;Vec&lt;u8&gt;&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#get_instruction_program_ids","title":"<code>get_instruction_program_ids</code>","text":"<p>Returns the program IDs that will process the instructions.</p> <pre><code>fn get_instruction_program_ids(&amp;self) -&gt; Vec&lt;solana_sdk::pubkey::Pubkey&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#get_instruction_data","title":"<code>get_instruction_data</code>","text":"<p>Returns the instruction-specific data/parameters for all instructions in the transaction.</p> <pre><code>fn get_instruction_data(&amp;mut self, client: &amp;mut impl FuzzClient) -&gt; Vec&lt;Vec&lt;u8&gt;&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#get_instruction_accounts","title":"<code>get_instruction_accounts</code>","text":"<p>Returns the account metadata needed for the instructions.</p> <pre><code>fn get_instruction_accounts(&amp;mut self, client: &amp;mut impl FuzzClient) -&gt; Vec&lt;Vec&lt;AccountMeta&gt;&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#transaction-setters","title":"Transaction Setters","text":"<p>Internal Method</p> <p><code>set_snapshot_before</code>, <code>set_snapshot_after</code> and <code>set_instructions</code> methods are used internally by Trident and is not expected to use them manually.</p>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#build","title":"<code>build</code>","text":"<p>Creates a new transaction instance from fuzzer data.</p> <pre><code>fn build(trident: &amp;mut Trident, fuzz_accounts: &amp;mut Self::IxAccounts) -&gt; Self\nwhere\n    Self: Default\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#set_snapshot_before","title":"<code>set_snapshot_before</code>","text":"<p>Captures the state of all accounts before transaction execution.</p> <pre><code>fn set_snapshot_before(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#set_snapshot_after","title":"<code>set_snapshot_after</code>","text":"<p>Captures the state of all accounts after transaction execution.</p> <pre><code>fn set_snapshot_after(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#set_instructions","title":"<code>set_instructions</code>","text":"<p>Sets up all instructions for the transaction.</p> <p>Instruction Setup Order</p> <p>The order in which the instruction inputs are set is:</p> <ol> <li><code>set_data</code> - Sets up instruction-specific data</li> <li><code>resolve_accounts</code> - Resolves account addresses</li> <li><code>set_accounts</code> - Sets up account metadata</li> <li><code>set_remaining_accounts</code> - Sets up any additional accounts</li> </ol> <pre><code>fn set_instructions(\n    &amp;mut self,\n    trident: &amp;mut Trident,\n    fuzz_accounts: &amp;mut Self::IxAccounts,\n)\n</code></pre>"},{"location":"trident-api-macro/trident-types/custom-types/","title":"Custom types","text":"<p>Trident generates custom types within <code>types.rs</code> file. These types are taken from the program's IDL.</p> <p>You can add your own custom types to the <code>types.rs</code> file, or you can modify existing types.</p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/","title":"FuzzAccounts","text":"<p><code>FuzzAccounts</code> is a struct that contains <code>all the accounts that can be used in the fuzz test</code> i.e. <code>storage</code> for accounts.</p> <p>By default, Trident generates the struct based on the program's IDL, i.e. for each account Trident generates a field in the struct.</p> <p>On demand, you can add your own accounts to the struct, these accounts are meant to be used within the <code>set_accounts</code>, <code>set_remaining_accounts</code> and potentially within the <code>set_data</code> methods, with the corresponding account indexes.</p> <pre><code>pub struct FuzzAccounts {\n    pub account1: AccountsStorage,\n    pub account2: AccountsStorage,\n    pub account3: AccountsStorage,\n    pub account4: AccountsStorage,\n    pub account5: AccountsStorage,\n    pub account6: AccountsStorage,\n    /// ....\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#implemented-methods","title":"Implemented Methods","text":"<p>The following section contains the methods that are available for the <code>AccountsStorage</code> struct.</p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#is_empty","title":"<code>is_empty</code>","text":"<p>Returns true if no accounts are stored. <pre><code>fn is_empty(&amp;self) -&gt; bool\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create","title":"<code>get_or_create</code>","text":"<p>Gets an existing account or creates a new one with specified metadata. <pre><code>fn get_or_create(\n    &amp;mut self,\n    account_id: AccountId,\n    trident: &amp;mut Trident,\n    seeds: Option&lt;PdaSeeds&gt;,\n    account_metadata: Option&lt;AccountMetadata&gt;\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create_token_account","title":"<code>get_or_create_token_account</code>","text":"<p>Token Feature Requirement</p> <p>This method is only available if the <code>token</code> feature is enabled.</p> <p>Creates or retrieves a token account with specified parameters. <pre><code>fn get_or_create_token_account(\n    &amp;mut self,\n    account_id: AccountId,\n    trident: &amp;mut Trident,\n    seeds: Option&lt;PdaSeeds&gt;,\n    mint: Pubkey,\n    owner: Pubkey,\n    amount: u64,\n    delegate: Option&lt;Pubkey&gt;,\n    delegated_amount: u64,\n    close_authority: Option&lt;Pubkey&gt;\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create_mint_account","title":"<code>get_or_create_mint_account</code>","text":"<p>Token Feature Requirement</p> <p>This method is only available if the <code>token</code> feature is enabled.</p> <p>Creates or retrieves a mint account for tokens. <pre><code>fn get_or_create_mint_account(\n    &amp;mut self,\n    account_id: AccountId,\n    trident: &amp;mut Trident,\n    seeds: Option&lt;PdaSeeds&gt;,\n    decimals: u8,\n    owner: &amp;Pubkey,\n    freeze_authority: Option&lt;Pubkey&gt;\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create_delegated_account","title":"<code>get_or_create_delegated_account</code>","text":"<p>Stake Feature Requirement</p> <p>This method is only available if the <code>stake</code> feature is enabled.</p> <p>Creates or retrieves a delegated stake account. <pre><code>fn get_or_create_delegated_account(\n    &amp;mut self,\n    account_id: AccountId,\n    trident: &amp;mut Trident,\n    seeds: Option&lt;PdaSeeds&gt;,\n    voter_pubkey: Pubkey,\n    staker: Pubkey,\n    withdrawer: Pubkey,\n    stake: u64,\n    activation_epoch: Epoch,\n    deactivation_epoch: Option&lt;Epoch&gt;,\n    lockup: Option&lt;Lockup&gt;\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create_initialized_account","title":"<code>get_or_create_initialized_account</code>","text":"<p>Stake Feature Requirement</p> <p>This method is only available if the <code>stake</code> feature is enabled.</p> <p>Creates or retrieves an initialized stake account. <pre><code>fn get_or_create_initialized_account(\n    &amp;mut self,\n    account_id: AccountId,\n    trident: &amp;mut Trident,\n    seeds: Option&lt;PdaSeeds&gt;,\n    staker: Pubkey,\n    withdrawer: Pubkey,\n    lockup: Option&lt;Lockup&gt;\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create_vote_account","title":"<code>get_or_create_vote_account</code>","text":"<p>Vote Feature Requirement</p> <p>This method is only available if the <code>vote</code> feature is enabled.</p> <p>Creates or retrieves a vote account. <pre><code>fn get_or_create_vote_account(\n    &amp;mut self,\n    account_id: AccountId,\n    trident: &amp;mut Trident,\n    seeds: Option&lt;PdaSeeds&gt;,\n    node_pubkey: &amp;Pubkey,\n    authorized_voter: &amp;Pubkey,\n    authorized_withdrawer: &amp;Pubkey,\n    commission: u8,\n    clock: &amp;Clock\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#pdaseeds-and-accountmetadata","title":"PdaSeeds and AccountMetadata","text":"<p>The <code>PdaSeeds</code> and <code>AccountMetadata</code> types are optional parameters that can be used to create a Program Derived Address (<code>Pda</code>) and pass additional metadata to the account creation process, respectively.</p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#pdaseeds","title":"<code>PdaSeeds</code>","text":"<pre><code>pub struct PdaSeeds&lt;'a&gt; {\n    pub seeds: &amp;'a [&amp;'a [u8]],\n    pub program_id: Pubkey,\n}\nimpl&lt;'a&gt; PdaSeeds&lt;'a&gt; {\n    pub fn new(seeds: &amp;'a [&amp;'a [u8]], program_id: Pubkey) -&gt; Self {\n        Self { seeds, program_id }\n    }\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#accountmetadata","title":"<code>AccountMetadata</code>","text":"<pre><code>pub struct AccountMetadata {\n    pub lamports: u64,\n    pub space: usize,\n    pub owner: Pubkey,\n}\nimpl AccountMetadata {\n    pub fn new(lamports: u64, space: usize, owner: Pubkey) -&gt; Self {\n        Self {\n            lamports,\n            space,\n            owner,\n        }\n    }\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/trident-account/","title":"TridentAccount","text":"<p>Trident Account is a wrapper around <code>AccountMeta</code>, <code>SnapshotAccount</code> and <code>AccountId</code>.</p> <p><code>AccountMeta</code> is a type which is used within <code>Transaction</code>, it specifies account address, <code>isSigner</code> and <code>isWritable</code> flags.</p> <p><code>SnapshotAccount</code> is Trident's custom type which is used to capture account state before and after the transaction.</p> <p><code>AccountId</code> is a randomly generated number which is used to identify account within its corresponding <code>AccountStorage</code>.</p> <pre><code>#[derive(Debug, Clone)]\npub struct TridentAccount {\n    pub account_id: AccountId,\n    account_meta: Option&lt;AccountMeta&gt;,\n    snapshot_before: Option&lt;SnapshotAccount&gt;,\n    snapshot_after: Option&lt;SnapshotAccount&gt;,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/trident-account/#implemented-methods","title":"Implemented Methods","text":"<p>The following section contains the methods that are available for the <code>TridentAccount</code> struct.</p>"},{"location":"trident-api-macro/trident-types/trident-account/#set_account_meta","title":"<code>set_account_meta</code>","text":"<p>Sets the account metadata with specified address and flags. <pre><code>fn set_account_meta(&amp;mut self, address: Pubkey, is_signer: bool, is_writable: bool)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#get_snapshot_before","title":"<code>get_snapshot_before</code>","text":"<p>Returns the account snapshot taken before transaction execution. <pre><code>fn get_snapshot_before(&amp;self) -&gt; &amp;SnapshotAccount\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#get_snapshot_after","title":"<code>get_snapshot_after</code>","text":"<p>Returns the account snapshot taken after transaction execution. <pre><code>fn get_snapshot_after(&amp;self) -&gt; &amp;SnapshotAccount\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#set_is_signer","title":"<code>set_is_signer</code>","text":"<p>Sets the account as a signer. <pre><code>fn set_is_signer(&amp;mut self)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#set_is_writable","title":"<code>set_is_writable</code>","text":"<p>Sets the account as writable. <pre><code>fn set_is_writable(&amp;mut self)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#set_address","title":"<code>set_address</code>","text":"<p>Sets the account's address. <pre><code>fn set_address(&amp;mut self, address: Pubkey)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#pubkey","title":"<code>pubkey</code>","text":"<p>Returns the account's public key. <pre><code>fn pubkey(&amp;self) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#capture_before","title":"<code>capture_before</code>","text":"<p>Internal Method</p> <p>This method is internal and should not be used directly.</p> <p>Captures the account state before transaction execution. <pre><code>fn capture_before(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#capture_after","title":"<code>capture_after</code>","text":"<p>Internal Method</p> <p>This method is internal and should not be used directly.</p> <p>Captures the account state after transaction execution. <pre><code>fn capture_after(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#to_account_meta","title":"<code>to_account_meta</code>","text":"<p>Internal Method</p> <p>This method is internal and should not be used directly.</p> <p>Returns the <code>AccountMeta</code> if set, panics if not set. <pre><code>fn to_account_meta(&amp;self) -&gt; AccountMeta\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#is_account_meta_set","title":"<code>is_account_meta_set</code>","text":"<p>Internal Method</p> <p>This method is internal and should not be used directly.</p> <p>Returns whether the account meta has been set. <pre><code>fn is_account_meta_set(&amp;self) -&gt; bool\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-pubkey/","title":"TridentPubkey","text":"<p><code>TridentPubkey</code> is a wrapper around <code>Pubkey</code> and <code>AccountId</code>.</p> <p><code>Pubkey</code> is a type from the <code>solana-sdk</code> crate that corresponds to a Solana account address.</p> <p><code>AccountId</code> is a randomly generated number which is used to identify account within its corresponding <code>AccountStorage</code>.</p> <pre><code>#[derive(Debug, Clone)]\npub struct TridentPubkey {\n    pub account_id: AccountId,\n    pub pubkey: Pubkey,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/trident-pubkey/#implemented-methods","title":"Implemented Methods","text":"<p>The following section contains the methods that are available for the <code>TridentPubkey</code> struct.</p>"},{"location":"trident-api-macro/trident-types/trident-pubkey/#set_pubkey","title":"<code>set_pubkey</code>","text":"<p>Sets the public key for this instance. <pre><code>fn set_pubkey(&amp;mut self, pubkey: Pubkey)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-pubkey/#get_pubkey","title":"<code>get_pubkey</code>","text":"<p>Returns the stored public key. <pre><code>fn get_pubkey(&amp;self) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-pubkey/#implemented-traits","title":"Implemented Traits","text":"<ul> <li><code>From&lt;AccountId&gt;</code> - Creates a new instance with the given account_id and default pubkey</li> <li><code>BorshSerialize</code> - Serializes only the pubkey field</li> <li><code>BorshDeserialize</code> - Deserializes only the pubkey field, sets default account_id</li> <li><code>Serialize</code> (serde) - Serializes only the pubkey field</li> <li><code>Deserialize</code> (serde) - Deserializes only the pubkey field, sets default account_id</li> <li><code>Arbitrary</code> - Generates random account_id and default pubkey</li> </ul>"},{"location":"trident-examples/trident-examples/","title":"Trident Examples","text":"<ul> <li> <p> Hello World!</p> <p>Hello World example with Trident.</p> <p>Hello World!</p> </li> <li> <p> Cross-Program Invocation</p> <p>Trident supports Cross-Program Invocation, you can fuzz your programs and create NFTs at the same time.</p> <p>Simple CPI</p> <p>CPI with Metaplex Metadata Program</p> </li> <li> <p> Benchmarking</p> <p>Trident contains benchmarks of Daedaluzz: A Benchmark Generator for Smart-Contract Fuzzers rewritten in Rust.</p> <p>Trident Benchmark</p> </li> </ul>"},{"location":"trident-manifest/","title":"Trident Manifest","text":"<p>Trident supports its own Trident Manifest, called <code>Trident.toml</code>. This section describes all possible configuration fields.</p>"},{"location":"trident-manifest/#fuzzing-metrics","title":"Fuzzing Metrics","text":"<pre><code>[fuzz.metrics]\nfuzzing_with_stats = true\ndashboard = true\nstate_monitor = false\n</code></pre> <ul> <li><code>fuzzing_with_stats</code> - Trident will show statistics after the fuzzing session.</li> <li><code>dashboard</code> - Trident will save a dashboard after the fuzzing session.</li> <li><code>state_monitor</code> - Trident will save a state monitor after the fuzzing session.</li> </ul> <p>Dashboard</p> <ul> <li>Dashboard is HTML file created by Trident.</li> <li>It can be opened in any preferred web browser, to see the results of the fuzzing session.</li> </ul> <p>State monitoring</p> <ul> <li>State monitoring is experimental feature. Accounts which you want to monitor can be specified with <code>trident.monitor_account_state</code> method. The method tracks contents of data stored in the account when the method is called. The <code>state_monitor</code> will create one state hash at the end of fuzzing session, and json file containing hashes created during fuzzing.</li> <li>This feature can be used to compare two fuzzing sessions, for example in case significant refactor of the programs was done and you want to check if the program is still working as expected.</li> <li>Keep in mind that the feature hashes contents of accounts, if the contents are dependant for example on time, the final hash might not be the same as the one from the first fuzzing session.</li> </ul>"},{"location":"trident-manifest/#fuzzing-coverage","title":"Fuzzing Coverage","text":"<pre><code>[fuzz.coverage]\nenable = false\nserver_port = 58432\nloopcount = 0\nformat = \"json\"\nattach_extension = false\n</code></pre> <p>The coverage configuration enables code coverage analysis during fuzzing sessions, providing insights into which parts of your program are being tested.</p> <ul> <li><code>enable</code> - When set to <code>true</code>, Trident collects code coverage data throughout the fuzzing session and generates a comprehensive report upon completion.</li> <li><code>server_port</code> - Specifies the HTTP server port used for communication between Trident and the Solana VS Code extension.</li> <li><code>loopcount</code> - Defines the number of execution flows processed before generating an intermediate coverage data file. Lower values provide more frequent coverage updates at the cost of performance. When set to <code>0</code>, coverage files are only generated at the end of the fuzzing session.</li> <li><code>format</code> - Determines the output format for coverage reports. Trident supports both <code>json</code> and <code>html</code> formats.</li> <li><code>attach_extension</code> - Enables real-time coverage visualization in VS Code when the extension is active. This feature requires <code>loopcount</code> to be greater than <code>0</code> and <code>format</code> to be set to <code>json</code>. </li> </ul> <p>Warning</p> <p>Coverage is only gathered for the programs deployed through an entrypoint!</p> <p></p> Entrypoint deployment guide <ol> <li>Comment out the program in <code>Trident.toml</code> <pre><code> # [[fuzz.programs]]\n # address = \"example_address\"\n # program = \"../target/deploy/example_program.so\"\n</code></pre></li> <li>Add the program dependency to <code>Cargo.toml</code> <pre><code> [dependencies.example_program]\n path = \"../programs/example_program\"\n</code></pre></li> <li>Add <code>syscall-v1</code> or <code>syscall-v2</code> feature depending on the version of <code>solana-sdk</code> <pre><code> [dependencies.trident-fuzz]\n features = [\"syscall-v2\"]\n</code></pre></li> <li>Import the programs entrypoint in <code>test_fuzz.rs</code> <pre><code> use example_program::entry as example_entrypoint;\n</code></pre></li> <li>Deploy the entrypoint in <code>test_fuzz.rs</code> <pre><code> impl FuzzTest {\n   fn new() -&gt; Self {\n       let mut trident = Trident::default();\n\n       // Deploy through the entrypoint\n       let program = TridentEntrypoint::new(example_program::ID, None, processor!(example_entrypoint));\n       trident.get_client().deploy_entrypoint(program);\n\n       Self {\n           trident,\n           fuzz_accounts: FuzzAccounts::default(),\n       }\n   }\n   ...\n</code></pre></li> </ol>"},{"location":"trident-manifest/#programs","title":"Programs","text":"<ul> <li>Use dumped program from desired cluster, during fuzzing.</li> </ul> <pre><code>[[fuzz.programs]]\naddress = \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\nupgrade_authority = \"account address goes here\"\nprogram = \"metaplex-program/metaplex-token-metadata.so\"\n</code></pre>"},{"location":"trident-manifest/#accounts","title":"Accounts","text":"<ul> <li>Use dumped accounts from desired cluster, during fuzzing.</li> </ul> <pre><code>[[fuzz.accounts]]\naddress = \"6YG3J7PaxyMnnbU67ifyrgF3BzNzc7cD8hPkqK6ATweE\"\nfilename = \"tests/accounts/core_bridge_mainnet/guardian_set_5_mock.json\"\n</code></pre>"},{"location":"trident-svm/","title":"TridentSVM","text":"<p>TridentSVM is a fast execution and accounts storage environment which is utilized within the Trident.</p> <p>Github repository: Trident SVM</p> <p>TridentSVM uses Anza's SVM API</p>"}]}