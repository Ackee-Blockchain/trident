{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Trident Documentation","text":""},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>Installation - Install the Trident Fuzz Testing Framework</li> <li>Start Fuzzing - Focus on security and start fuzzing immediately</li> </ul>"},{"location":"#advanced-fuzzing-customization","title":"Advanced fuzzing customization","text":"<p>Explore the various features Trident provides.</p> <ul> <li>Transaction Hooks - Create and manipulate transactions with different methods</li> <li>Fuzzing Flows - Explore different approaches to fuzz your program</li> <li>Multi-Instruction Transactions - Compose fuzzed transactions with multiple instructions</li> <li>Trident Manifest - Customize your fuzz tests with different configurations</li> </ul>"},{"location":"#api-macros-reference","title":"API &amp; Macros Reference","text":"<p>Check out the API and macro reference for Trident.</p> <ul> <li>Trident API &amp; Macros</li> </ul>"},{"location":"#trident-examples","title":"Trident Examples","text":"<p>Check out examples to learn how to use Trident.</p> <ul> <li>Trident Examples</li> </ul>"},{"location":"#tridentsvm","title":"TridentSVM","text":"<p>Check out the TridentSVM, lightweight fuzzing execution and account storage environment.</p> <ul> <li>TridentSVM</li> </ul>"},{"location":"#what-is-fuzzing","title":"What is Fuzzing ?","text":"<p>\"Fuzz testing is an automated technique that provides generated random, invalid, or unexpected input data to your program. This helps discover unknown bugs and vulnerabilities, potentially preventing zero-day exploits.\"</p>"},{"location":"basics/CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning (SemVer).</p> <p>Note: Version 0 of Semantic Versioning is handled differently from version 1 and above. The minor version will be incremented upon a breaking change and the patch version will be incremented for features.</p>"},{"location":"basics/CHANGELOG/#dev-unreleased","title":"[dev] - Unreleased","text":"<p>Added</p> <p>Removed</p> <p>Changed</p>"},{"location":"basics/CHANGELOG/#0100-2025-03-12","title":"[0.10.0] - 2025-03-12","text":"<p>Added</p> <ul> <li>TransactionSelector allows to select and execute random transaction with hooks and without hooks (297)</li> <li>Added \"random_tail\" attribute to TridentFlowExecutor macro to allow random tail generation (296)</li> <li>Added support for seeds constraint for accounts structs (284)</li> <li>Additional methods accessing the AccountsStorage and creating corresponding accounts are now optional (\"token\",\"vote\", \"stake\") (279)</li> <li>Derive macros now use own syn parser for better extensibility and UX (275)</li> <li>Program ID inside test_fuzz.rs file is now automatically filled in is present in the program IDL (272)</li> <li>Added additional attributes to TridentAccounts, mut and signer (268)</li> <li>Users can now specify a program for which they want to add or initialize a fuzz test using <code>--program-name</code> flag (273)</li> <li>Allow custom test name specification in fuzz test creation with <code>--test-name</code> flag (274)</li> </ul> <p>Removed</p> <ul> <li>The DisplayIx macro is now removed, Debug trait was implemented for instruction inputs (281)</li> </ul> <p>Changed</p> <ul> <li>FuzzTestExecutor and FlowExecutor are grouped together and FuzzTest has client as generic instead of TridentSVM (294)</li> <li>Changed Transaction sequence logic (289)</li> <li>AccountsStorages are simplified, no types are required to define (276)</li> <li>Trident Architecture changes containing multiple features and improvements (details in the PR)(267)</li> <li>get or create token account methods fixed for native token accounts (262)</li> </ul>"},{"location":"basics/CHANGELOG/#091-2025-02-03","title":"[0.9.1] - 2025-02-03","text":"<p>Added</p> <ul> <li>added warp to time manipulation (259)</li> <li>added methods to check if account storage is empty (258)</li> <li>added support for post-instruction behavior (257)</li> </ul> <p>Removed</p> <p>Changed</p>"},{"location":"basics/CHANGELOG/#090-2025-01-15","title":"[0.9.0] - 2025-01-15","text":"<p>Added</p> <ul> <li>added support for composite accounts (245)</li> <li>Trident SVM + AFL (see the PR for more details) (234)</li> </ul> <p>Removed</p> <ul> <li>removed fuzz_iteration from test_fuzz.rs (243)</li> </ul> <p>Changed</p> <ul> <li>renamed Config to TridentConfig (246)</li> <li>errors are simplified and transaction error contains only transaction error (244)</li> </ul>"},{"location":"basics/CHANGELOG/#081-2024-11-14","title":"[0.8.1] - 2024-11-14","text":"<p>Removed</p> <ul> <li>removed unnecesarry deserialization with AccountsSnapshots, to deserialize data implementation AccountDeserialize can be used (221)</li> </ul> <p>Changed</p> <ul> <li>improve AccountsStorage module structure and remove unnecessary methods in FuzzClient (223)</li> <li>improve manipulations with AccountsStorages in get_accounts() function (219)</li> </ul> <p>Added</p> <ul> <li>add pre_sequence!, middle_sequence! and post_sequence! for easier sequence definition (220)</li> <li>add/ add support for Clock sysvar manipulations with the client(i.e. warp to slot/epoch and forward in time) (217)</li> </ul>"},{"location":"basics/CHANGELOG/#080-2024-10-21","title":"[0.8.0] - 2024-10-21","text":"<p>Added</p> <ul> <li>impr/ allow to specify programs and accounts in the Trident Manifest (207)</li> <li>impr/ added get_program_id function to the IxOps and FuzzTestExecutor (199)</li> </ul> <p>Changed</p> <ul> <li>impr/ improve init command, modify program manifest automatically, add init force, add howto subcommand (208)</li> <li>impr/ allow to derive AccountsSnapshots for empty Account Context (209)</li> <li>impr/ fuzz flags are read at start of fuzzing session from Config instead of env variable and transaction dispatch was added to increase FuzzTestExecutor readability (204)</li> <li>impr/ allow various instructions to be generated in case of multiple programs in the Anchor workspace (200)</li> <li>feat/ option to add account into Fuzz Test environment with base64 data (197)</li> <li>impr/ instead of parsing source code and creating our IDL, read anchor IDL (198)</li> </ul> <p>Removed</p> <ul> <li>del/remove integration tests supported by Trident, this feature adds more unnecessary overhead compared to its value (196)</li> </ul>"},{"location":"basics/CHANGELOG/#070-2024-08-14","title":"[0.7.0] - 2024-08-14","text":"<p>Added</p> <ul> <li>impr/ add feature flag to the AccountsSnapshots macro (183)</li> <li>feat/ add Support for CPI (182)</li> <li>feat/ add option to initialize Trident with Macro/File (for Snapshots) option based on preference (179)</li> <li>feat/create AccountsSnapshots derive macro for Snapshots creation (#177)</li> <li>feat/fuzzing moved to separate crate trident-fuzz (#175)</li> <li>feat/unify dependencies provided by the Trident (#172)</li> <li>feat/fuzzer-stats-logging, an optional statistics output for fuzzing session (#144)</li> </ul> <p>Fixed</p> <ul> <li>fix/in case of fuzzing failure throw error instead of only printing message (#167)</li> <li>fix/snapshot's zeroed account as optional (#170)</li> </ul> <p>Removed</p> <ul> <li>del/remove localnet subcommand (178)</li> <li>del/remove unnecessary fuzzing feature as trident is mainly fuzzer (#176)</li> <li>del/remove Trident explorer (#171)</li> </ul>"},{"location":"basics/CHANGELOG/#060-2024-05-20","title":"[0.6.0] - 2024-05-20","text":"<p>Added</p> <ul> <li>feat/anchor 0.30.0 support (#148)</li> <li>fix/allow to process duplicate transactions (#147)</li> <li>feat/possibility to implement custom transaction error handling (#145)</li> <li>feat/support of automatically obtaining fully qualified paths of Data Accounts Custom types for <code>accounts_snapshots.rs</code> (#141)</li> <li>feat/allow direct accounts manipulation and storage (#142)</li> <li>feat/support of non-corresponding instruction and context names (#130)</li> <li>feat/refactored and improved program flow during init and build, added activity indicator (#129)</li> <li>feat/allow solana versions up to v1.17.* and pin Rust 1.77 nightly compiler (#128)</li> <li>feat/new init command option to initialize fuzz or poc tests only (#124)</li> <li>feat/debug-mode detailed output (#125)</li> <li>feat/anchor 0.29.0 support (#121)</li> <li>doc/add help comment + update documentation (#120)</li> <li>feat/fuzzer error handling (#118)</li> <li>feat/convert fuzz Pubkey to AccountId (#116)</li> <li>feat/additional anchor types (#115)</li> <li>feat/import ToAccountInfo trait in fuzzing prelude (#113)</li> <li>test/added code generation and macros tests (#112)</li> <li>feat/fuzzer framework core, macros, helpers, templates, and examples. (#111)</li> <li>feat/improved trident-tests folder structure for PoC and Fuzz Tests (#109)</li> <li>feat/support for additional fuzzer parameters in Trident.toml config file (#107)</li> <li>feat/posibility to pass params to the fuzzer via Trident.toml config file (#106)</li> <li>feat/client now reads by default keypair from default location (#105)</li> <li>feat/added new --exit-code option to return corresponding exit code based on fuzz test result (#104)</li> <li>feat/removed/updated deprecated functions, removed allow deprecated macros (#103)</li> <li>feat/added new function to read keypair file generated by Anchor (#102)</li> <li>feat/clean command (#101)</li> <li>feat/improved program_client generated code (#100)</li> <li>feat/automatically add hfuzz_target to .gitignore file (#99)</li> <li>feat/support for dynamic templates. (#98)</li> </ul> <p>Fixed</p> <ul> <li>fix/refactored fuzz test executor error handling (#127)</li> <li>fix/warn user on composite accounts and continue fuzz test generation (#133)</li> <li>fix/progress bar loop lock release (#132)</li> <li>fix/fixed fuzz test generation with init-if-needed Anchor feature (#131)</li> <li>fix/program client custom types (#117)</li> <li>fix/check fuzz test name collision by checking the name against HashSet (#114)</li> </ul>"},{"location":"basics/CHANGELOG/#050-2023-08-28","title":"[0.5.0] - 2023-08-28","text":"<p>Added</p> <ul> <li>cli: Added trident subcommand <code>fuzz</code> to run and debug fuzz tests using honggfuzz-rs.</li> <li>cli: Added trident <code>--skip-fuzzer</code> option for <code>init</code> subcommand to skip generation of fuzz test templates.</li> <li>client: Added new Cargo feature <code>fuzzing</code> that enables optional dependencies related to fuzz testing.</li> </ul>"},{"location":"basics/CHANGELOG/#041-2023-08-21","title":"[0.4.1] - 2023-08-21","text":"<p>Changed</p> <ul> <li>Upgrade Solana (<code>=1.16.6</code>) and Anchor framework (<code>=0.28.0</code>) versions.</li> </ul> <p>Fixed</p> <ul> <li>Implemented Anchor Client logic was not able to work with newer version of Anchor. Fixed with <code>async_rpc</code> and <code>async</code> feature.</li> <li>Trident init IDL Parse Error on newer version of Rust, fixed with updated <code>accounts</code> token.</li> </ul>"},{"location":"basics/CHANGELOG/#030-2022-09-23","title":"[0.3.0] - 2022-09-23","text":"<p>Changed</p> <ul> <li>Upgrade Solana (<code>~1.10</code>) and Anchor framework (<code>~0.25</code>) versions</li> </ul> <p>Added</p> <ul> <li>Custom Solana RPC error reporter. If the Solana RPC error is thrown, the error code, message and data (logs) are reported to the output.</li> <li>Custom imports in the <code>.program_client</code>. User is able to import custom types and structures into program client. The import part of the code would not be re-generated.</li> </ul>"},{"location":"basics/CHANGELOG/#020-2022-07-27","title":"[0.2.0] - 2022-07-27","text":"<p>Added</p> <ul> <li>Trident is now configurable. This requires <code>Trident.toml</code> file to exist in the project's root directory - without this file the execution will fail. To solve this re-run <code>trident init</code> or just create an empty <code>Trident.toml</code> file in the project's root directory.</li> </ul>"},{"location":"basics/commands/","title":"Commands","text":"<p>Trident CLI supports the following commands:</p>"},{"location":"basics/commands/#trident-init","title":"<code>trident init</code>","text":"<p>Initializes Trident Workspace and generates new Fuzz Test Template. Creates the following structure:</p> <pre><code>project-root\n\u251c\u2500\u2500 trident-tests\n\u2502   \u251c\u2500\u2500 fuzz_0 # particular fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 instructions # instructions folder\n\u2502   \u2502   \u251c\u2500\u2500 transactions # transactions folder\n\u2502   \u2502   \u251c\u2500\u2500 test_fuzz.rs # the binary target of your fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 types.rs # the types of your fuzz test\n\u2502   \u2502   \u2514\u2500\u2500 fuzz_instructions.rs # the definition of your fuzz test\n\u2502   \u251c\u2500\u2500 fuzz_1\n\u2502   \u251c\u2500\u2500 fuzz_X # possible multiple fuzz tests\n\u2502   \u251c\u2500\u2500 fuzzing # compilations and crashes folder\n\u2502   \u2514\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 Trident.toml\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"basics/commands/#options","title":"Options","text":"<ul> <li><code>-f, --force</code> - Force Trident initialization. Updates Trident dependencies based on the CLI version.</li> <li><code>-p, --program-name &lt;NAME&gt;</code> - Specify the program name for which the fuzz test will be generated.</li> <li><code>-t, --test-name &lt;NAME&gt;</code> - Specify a custom name for the fuzz test to initialize.</li> </ul>"},{"location":"basics/commands/#trident-how","title":"<code>trident how</code>","text":"<p>Print How To message about writing fuzz tests.</p>"},{"location":"basics/commands/#trident-fuzz","title":"<code>trident fuzz</code>","text":"<p>Fuzzing-related commands with various subcommands:</p>"},{"location":"basics/commands/#trident-fuzz-run-afl-fuzz_target","title":"<code>trident fuzz run-afl &lt;fuzz_target&gt;</code>","text":"<p>Directory Note</p> <p>Execute fuzz tests from the <code>trident-tests</code> directory.</p> <p>Solana Logs</p> <p>In case you want to see the logs of the fuzzed transactions, prefix the command with <code>TRIDENT_LOG=1</code>. <pre><code>TRIDENT_LOG=1 trident fuzz run-afl &lt;fuzz_target&gt;\n</code></pre></p> <p>Runs AFL on the specified Fuzz Target (e.g., fuzz_0).</p>"},{"location":"basics/commands/#trident-fuzz-run-hfuzz-fuzz_target","title":"<code>trident fuzz run-hfuzz &lt;fuzz_target&gt;</code>","text":"<p>Directory Note</p> <p>Execute fuzz tests from the <code>trident-tests</code> directory.</p> <p>Solana Logs</p> <p>In case you want to see the logs of the fuzzed transactions, prefix the command with <code>TRIDENT_LOG=1</code>. <pre><code>TRIDENT_LOG=1 trident fuzz run-hfuzz &lt;fuzz_target&gt;\n</code></pre></p> <p>Runs Honggfuzz on the specified Fuzz Target (e.g., fuzz_0).</p> <p>The output includes:</p> <ol> <li>Iterations: Number of fuzzing iterations completed</li> <li>Mode: Feedback Driven Mode - generates data based on coverage progress</li> <li>Speed: Average iterations per second</li> <li>Crashes: Number of detected crashes (panics or failed invariant checks)</li> </ol> <pre><code>------------------------[  0 days 00 hrs 00 mins 01 secs ]----------------------\n  Iterations : 688 (out of: 1000 [68%])\n  Mode [3/3] : Feedback Driven Mode\n      Target : .../release/fuzz_0\n     Threads : 16, CPUs: 32, CPU%: 1262% [39%/CPU]\n       Speed : 680/sec [avg: 688]\n     Crashes : 1 [unique: 1, blocklist: 0, verified: 0]\n    Timeouts : 0 [10 sec]\n Corpus Size : 98, max: 1048576 bytes, init: 0 files\n    Coverage : edge: 10345/882951 [1%] pc: 163 cmp: 622547\n</code></pre>"},{"location":"basics/commands/#trident-fuzz-debug-afl-fuzz_target-crash_file_path","title":"<code>trident fuzz debug-afl &lt;fuzz_target&gt; &lt;crash_file_path&gt;</code>","text":"<p>Debug AFL crashes by analyzing specific crash files.</p>"},{"location":"basics/commands/#trident-fuzz-debug-hfuzz-fuzz_target-crash_file_path","title":"<code>trident fuzz debug-hfuzz &lt;fuzz_target&gt; &lt;crash_file_path&gt;</code>","text":"<p>Debug Honggfuzz crashes by analyzing specific crash files.</p> <p>Debug Output</p> <p>The debug output currently includes verbose lldb information. It shows:</p> <ol> <li>Transaction logs</li> <li>Instruction data structures</li> <li>Panic/Crash information</li> </ol>"},{"location":"basics/commands/#trident-fuzz-add","title":"<code>trident fuzz add</code>","text":"<p>Directory Note</p> <p>This commands needs to be executed from the project root directory.</p> <p>Adds a new Fuzz Test Template.</p>"},{"location":"basics/commands/#options_1","title":"Options","text":"<ul> <li><code>-p, --program-name &lt;NAME&gt;</code> - Specify the program name for which the fuzz test will be generated.</li> <li><code>-t, --test-name &lt;NAME&gt;</code> - Specify a custom name for the fuzz test to add.</li> </ul>"},{"location":"basics/commands/#trident-clean","title":"<code>trident clean</code>","text":"<p>Executes <code>anchor clean</code> and cleans Honggfuzz targets while preserving crashfiles and fuzzing inputs.</p>"},{"location":"basics/faq/","title":"FAQ","text":"<p>Is Trident supported only with Anchor?</p> <ul> <li>Currently yes, Trident under the hood obtains data from the IDL generated by Anchor.</li> </ul> <p>I created the Fuzz Test, what should I do next?</p> <ul> <li>Start here Start Fuzzing.</li> </ul> <p>Is Trident open-source?</p> <ul> <li>Yes, here Trident.</li> </ul> <p>I would like to report an Issue with Trident, what should I do?</p> <ul> <li>Create issue.</li> </ul> <p>Is Trident deployed on Mainnet / Devnet / Testenet?</p> <ul> <li>No, Trident is Fuzz Testing Framework, not Solana Program.</li> </ul> <p>What type of Fuzzer is Trident?</p> <ul> <li>Currently, we refer to it as \"coverage guided gray box fuzzer\".</li> </ul>"},{"location":"basics/get-help/","title":"Get Help","text":"<p>Need help writing Fuzz Tests? Do not hesitate to join our Discord server!</p>"},{"location":"basics/installation/","title":"Installation","text":"<p>Trident requires the following prerequisites:</p> <p>Prerequisites</p> <p>Before proceeding, ensure you have installed:</p> <ul> <li>Rust (stable version)</li> <li>Solana CLI</li> <li>Anchor</li> </ul> <p>Check out supported versions for version compatibility.</p>"},{"location":"basics/installation/#install-system-dependencies","title":"Install system dependencies","text":"<p>Update your package list:</p> <p><pre><code>sudo apt update\nsudo apt upgrade\n</code></pre> Install the required packages: <pre><code>sudo apt install build-essential\nsudo apt-get install binutils-dev\nsudo apt-get install libunwind-dev\n</code></pre></p>"},{"location":"basics/installation/#install-trident","title":"Install Trident","text":"<pre><code>cargo install trident-cli\n</code></pre> <p>You can also use the <code>version</code> flag to install a specific version: <pre><code>cargo install trident-cli --version x.y.z\n</code></pre></p>"},{"location":"basics/installation/#install-hongfuzz-and-afl","title":"Install Hongfuzz and AFL","text":"<p><pre><code>cargo install honggfuzz\ncargo install cargo-afl\n</code></pre> To install a specific version use the following commands: <pre><code>cargo install honggfuzz --version x.y.z\ncargo install cargo-afl --version x.y.z\n</code></pre></p>"},{"location":"basics/installation/#supported-versions","title":"Supported versions","text":"<p>Version Table Legend</p> <ul> <li> = Develop branch</li> <li> = Released version</li> <li><code>-</code> = Not required/supported</li> </ul> Version Type Anchor Solana Rust Honggfuzz AFL Development  <code>&gt;=0.29.0 &lt; 0.31.0</code> <code>&gt;=1.17.3 &lt; 2.1</code> <code>nightly</code> <code>0.5.56</code> <code>0.15.11</code> Current (0.10.x) <code>&gt;=0.29.0 &lt; 0.31.0</code> <code>&gt;=1.17.3 &lt; 2.1</code> <code>nightly</code> <code>0.5.56</code> <code>0.15.11</code> 0.9.x <code>&gt;=0.29.0 &lt; 0.31.0</code> <code>&gt;=1.17.3 &lt; 2.1</code> <code>nightly</code> <code>0.5.56</code> <code>0.15.11</code> 0.8.x <code>0.30.1</code> <code>^1.17.4</code> <code>nightly</code> <code>0.5.56</code> <code>-</code> 0.7.x <code>&gt;=0.29.*</code> <code>^1.17.4</code> <code>nightly</code> <code>0.5.56</code> <code>-</code> 0.6.x <code>&gt;=0.29.*</code> <code>^1.17</code> <code>nightly</code> <code>0.5.55</code> <code>-</code> 0.5.x <code>~0.28.*</code> <code>=1.16.6</code> <code>-</code> <code>-</code> <code>-</code> 0.4.x <code>~0.27.*</code> <code>&gt;=1.15</code> <code>-</code> <code>-</code> <code>-</code> 0.3.x <code>~0.25.*</code> <code>&gt;=1.10</code> <code>-</code> <code>-</code> <code>-</code> 0.2.x <code>~0.24.*</code> <code>&gt;=1.9</code> <code>-</code> <code>-</code> <code>-</code>"},{"location":"start-fuzzing/","title":"Start Fuzzing","text":"<p>To start writting fuzz tests, you need to initialize Trident in your Anchor-based workspace.</p> <pre><code>trident init\n</code></pre> <p>If you have already initialized Trident, you can add a new fuzz test using:</p> <pre><code>trident fuzz add\n</code></pre> <p>Trident creates a new fuzz test template in the <code>trident-tests</code> directory, with the following structure:</p> <pre><code>project-root\n\u251c\u2500\u2500 trident-tests\n\u2502   \u251c\u2500\u2500 fuzz_0 # particular fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 instructions # instructions folder\n\u2502   \u2502   \u251c\u2500\u2500 transactions # transactions folder\n\u2502   \u2502   \u251c\u2500\u2500 test_fuzz.rs # the binary target of your fuzz test\n\u2502   \u2502   \u251c\u2500\u2500 types.rs # the types of your fuzz test\n\u2502   \u2502   \u2514\u2500\u2500 fuzz_instructions.rs # the definition of your fuzz test\n\u2502   \u251c\u2500\u2500 fuzz_1\n\u2502   \u251c\u2500\u2500 fuzz_X # possible multiple fuzz tests\n\u2502   \u251c\u2500\u2500 fuzzing # compilations and crashes folder\n\u2502   \u2514\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 Trident.toml\n\u2514\u2500\u2500 ...\n</code></pre> <p><code>Instructions</code> folder contains the <code>instructions</code> that can be used in the fuzz test.</p> <p><code>Transactions</code> folder contains the <code>transactions</code> that will be used during the fuzzing, each transaction can contain <code>one</code> or <code>multiple instructions</code>, based on the developers choice. By default there is only one instruction in each transaction.</p>"},{"location":"start-fuzzing/executing-fuzz-test/","title":"Executing the Fuzz Test","text":"<p>To execute the fuzz test, navigate to the <code>trident-tests</code> directory and run the following command to execute the fuzz test using Honggfuzz:</p> <pre><code>trident fuzz run-hfuzz &lt;FUZZ_TARGET&gt;\n# for example:\n# trident fuzz run-hfuzz fuzz_0\n</code></pre> <p>To execute the fuzz test using AFL, run the following command:</p> <pre><code>trident fuzz run-afl &lt;FUZZ_TARGET&gt;\n# for example:\n# trident fuzz run-afl fuzz_0\n</code></pre> <p>Directory Note</p> <p>Execute fuzz tests from the <code>trident-tests</code> directory.</p> <p>Solana Logs</p> <p>In case you want to see the logs of the fuzzed transactions, prefix the command with <code>TRIDENT_LOG=1</code>. <pre><code>TRIDENT_LOG=1 trident fuzz run-afl &lt;fuzz_target&gt;\nTRIDENT_LOG=1 trident fuzz run-hfuzz &lt;fuzz_target&gt;\n</code></pre></p> <p>For the output reference and additional options such as debugging the found issues, check out Commands.</p>"},{"location":"start-fuzzing/writting-fuzz-test/","title":"Writing fuzz test","text":"<p>In order to start fuzzing, you need to guide the fuzzer to use correct and meaningful instruction inputs.</p> <p>Trident generates random data for instruction executions. However, allowing the fuzzer to generate completely random account addresses would lead to numerous failed transactions, making the fuzzing process ineffective.</p> <p>Each program instruction has a corresponding file in the instructions directory. Instructions consist of two main components:</p> <ul> <li>Instruction Accounts</li> <li>Instruction Data</li> <li>(Optional) Remaining Accounts</li> </ul>"},{"location":"start-fuzzing/writting-fuzz-test/#guide-the-instruction-inputs","title":"Guide the Instruction Inputs","text":"<p>Start with properly configuring different types of instruction inputs:</p> <ul> <li>Instruction Accounts</li> <li>Instruction Data</li> <li>(Optional) Remaining Accounts</li> </ul>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-accounts/","title":"Instruction Accounts","text":"<p>Accounts are storage entities on the Solana Blockchain. They may be simple wallets (consisting of regular keypairs) or accounts with more complex address structures, such as Program Derived Addresses (PDAs).</p> <p>During fuzzing, Trident sends random Accounts to the program's instructions. However, the account addresses are not completely random but are taken from the Fuzz Test's account storage. Trident generates random indexes to the account storage. This approach is crucial, as allowing the fuzzer to generate completely random account addresses would lead to many failed transactions (i.e., nothing would be fuzzed).</p> <p>Your responsibility is to guide Trident on which storage locations it should retrieve accounts from. Additionally, if particular account types are expected, such as Token Account, Mint Account, etc., your responsibility is to initialize them within the <code>set_accounts</code> method.</p>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-accounts/#setup-instruction-accounts","title":"Setup Instruction Accounts","text":"<p>There are two ways to guide the fuzzer about which storage locations to retrieve accounts from:</p> <ol> <li>Using the <code>TridentAccounts</code> macro</li> <li>Manually setting the accounts using the <code>set_accounts</code> method</li> </ol>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-accounts/#using-the-tridentaccounts-macro","title":"Using the TridentAccounts Macro","text":"<p>The <code>TridentAccounts</code> macro is used to derive account handling functionality for instruction accounts (similar to the Context structure in Anchor-based programs).</p> <p>You can check the TridentAccounts page to see the attributes that can be used.</p> <p>Consider the following example:</p> <pre><code>/// Instruction Accounts\n#[derive(Arbitrary, Debug, Clone, TridentAccounts)]\n#[instruction_data(InitializeFnInstructionData)]\n#[storage(FuzzAccounts)]\npub struct InitializeFnInstructionAccounts {\n    #[account(mut,signer,storage = author)]\n    pub author: TridentAccount,\n    #[account(\n        mut,\n        storage = hello_world_account,\n        seeds = [b\"hello_world_seed\"],\n    )]\n    pub hello_world_account: TridentAccount,\n    #[account(address = \"11111111111111111111111111111111\", skip_snapshot)]\n    pub system_program: TridentAccount,\n}\n</code></pre> <p>The example specifies these attributes:</p> <ul> <li><code>#[instruction_data(InitializeFnInstructionData)]</code> - Specifies the instruction data type (helpful if instruction data input is part of PDA seeds)</li> <li><code>#[storage(FuzzAccounts)]</code> - Specifies the account storage type</li> <li><code>mut</code> - Marks the account as mutable</li> <li><code>signer</code> - Marks the account as a transaction signer</li> <li><code>address = \"...\"</code> - Sets a constant address for the account</li> <li><code>storage = &lt;target_account_storage&gt;</code> - Links the account to a storage location for address retrieval</li> <li><code>skip_snapshot</code> - Excludes the account from snapshot creation</li> <li><code>seeds = [b\"hello_world_seed\"]</code> - Specifies the seeds for Program Derived Addresses (PDAs)</li> </ul>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-accounts/#manual-accounts-setup","title":"Manual Accounts Setup","text":"<p>If you need more control than the <code>TridentAccounts</code> macro provides, you can manually set up accounts using the <code>set_accounts</code> function:</p> <p>Precedence of <code>set_accounts</code></p> <p>The <code>set_accounts</code> method takes precedence over the <code>TridentAccounts</code> macro attributes. Any behavior defined in the <code>set_accounts</code> method will override the behavior defined in the <code>TridentAccounts</code> macro.</p> <pre><code>impl InstructionSetters for ExampleInstruction {\n    type IxAccounts = FuzzAccounts;\n\n    fn set_accounts(&amp;mut self, client: &amp;mut impl FuzzClient, fuzz_accounts: &amp;mut Self::IxAccounts) {\n        // Create and store a PDA\n        let hello_world_account = fuzz_accounts.hello_world_account.get_or_create(\n            self.accounts.hello_world_account.account_id,\n            client,\n            Some(PdaSeeds::new(&amp;[b\"hello_world_seed\"], self.get_program_id())),\n            None,\n        );\n\n        // Set the account address\n        self.accounts\n            .hello_world_account\n            .set_address(hello_world_account);\n    }\n}\n</code></pre> <p>In the previous examples:</p> <ul> <li>We configured the fuzzer to always keep the <code>author</code> account as a <code>signer</code> and as <code>mutable</code>. It will be stored in the <code>FuzzAccounts::author</code> storage.</li> <li>We configured the fuzzer to always keep the <code>hello_world_account</code> as a <code>mutable</code> account, which will be stored in the <code>FuzzAccounts::hello_world_account</code> storage. Additionally, the <code>hello_world_account</code> is a PDA with an address derived from the <code>seeds</code> attribute.</li> <li>We configured the fuzzer to always keep the <code>system_program</code> account as a <code>constant</code>. Snapshots of this account before and after the instruction execution will not be taken.</li> </ul>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-data/","title":"Instruction Data","text":"<p>Apart from accounts, additional instruction parameters can be specified on the Instruction's inputs.</p> <p>Most of the time, these parameters are primitive data types, such as <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>bool</code>, etc. In this case, guidance is probably not required, and we can leave the fuzzer to generate random values. On the other hand, if the instruction expects, for example, a <code>Pubkey</code> as input, the <code>Pubkey</code> needs to be resolved similarly to how accounts are resolved (as you probably don't want the pubkey to be completely random but rather derived from the fuzzer's account storage).</p>"},{"location":"start-fuzzing/writting-fuzz-test/instruction-data/#manual-data-setup","title":"Manual Data Setup","text":"<p>The <code>set_data</code> method lets you manually set the instruction data (if required). Here's an example:</p> <pre><code>impl InstructionSetters for DepositObligationCollateralV2Instruction {\n    type IxAccounts = FuzzAccounts;\n\n    fn set_data(\n        &amp;mut self,\n        client: &amp;mut impl FuzzClient,\n        fuzz_accounts: &amp;mut Self::IxAccounts\n    ) {\n        // Retrieve account from storage using the generated index\n        let owner = fuzz_accounts.owner.get_or_create(\n            self.data.owner.account_id,\n            client,\n            None,\n            None,\n        );\n\n        // Set the instruction data pubkey\n        self.data.owner.pubkey = owner;\n    }\n}\n</code></pre> <p>In the example above:</p> <ul> <li>We retrieved the <code>owner</code> account address from the <code>FuzzAccounts::owner</code> storage using the generated <code>self.data.owner.account_id</code> index.</li> <li>We then set the <code>owner</code> account's public key in the instruction data.</li> </ul> <p>This approach ensures that the instruction data contains valid and meaningful values while still maintaining the benefits of fuzz testing.</p>"},{"location":"start-fuzzing/writting-fuzz-test/remaining-accounts/","title":"Remaining Accounts","text":"<p>Some Solana instructions require additional accounts beyond their primary accounts. These are called \"remaining accounts\" and can be configured using the <code>set_remaining_accounts</code> function.</p>"},{"location":"start-fuzzing/writting-fuzz-test/remaining-accounts/#manual-remaining-accounts-setup","title":"Manual Remaining Accounts Setup","text":"<p>Remaining accounts are defined as a struct with the <code>TridentRemainingAccounts</code> derive macro. The macro expects remaining accounts as an array of <code>TridentAccount</code>, allowing you to specify any number of additional accounts.</p> <p>Remaining Accounts Configuration</p> <p>Do not forget to add remaining accounts to the <code>Instuction</code> struct. Additionally the field has to be named <code>remaining_accounts</code>.</p> <p>Here's an example of how to set up remaining accounts:</p> <pre><code>pub struct SomeInstruction {\n    pub accounts: SomeInstructionAccounts,\n    pub data: SomeInstructionData,\n    pub remaining_accounts: SomeInstructionRemainingAccounts,\n}\n\n#[derive(Arbitrary, Debug, Clone, TridentRemainingAccounts)]\npub struct SomeInstructionRemainingAccounts {\n    pub remaining_accounts: [TridentAccount; 5],\n}\n\nimpl InstructionSetters for SomeInstruction {\n    type IxAccounts = FuzzAccounts;\n\n    fn set_remaining_accounts(\n        &amp;mut self,\n        client: &amp;mut impl FuzzClient,\n        fuzz_accounts: &amp;mut Self::IxAccounts,\n    ) {\n        // Get the account from storage using the generated index\n        let owner = fuzz_accounts\n            .owner\n            .get_or_create(self.remaining_accounts.remaining_accounts[0].account_id, client, None, None);\n\n        // Configure the account meta with:\n        // - Account public key\n        // - is_signer flag (false in this example)\n        // - is_writable flag (true in this example)\n        self.remaining_accounts.remaining_accounts[0].set_account_meta(\n            owner,\n            false,\n            true\n        );\n    }\n}\n</code></pre> <ul> <li>The <code>set_remaining_accounts</code> function works similarly to <code>set_accounts</code></li> <li>Each remaining account can be configured with its own signer and writable permissions</li> <li>You can access remaining accounts using array indexing (e.g., <code>remaining_accounts[0]</code>)</li> <li>The number of remaining accounts is fixed at compile time by the array size</li> </ul>"},{"location":"trident-advanced/","title":"Trident Advanced","text":"<p>This section contains advanced customization options for Trident.</p>"},{"location":"trident-advanced/#transaction-related","title":"Transaction-related","text":"<ul> <li>Transaction Hooks</li> <li>Multi-Instruction Transactions</li> <li>Fuzzing Flows</li> </ul>"},{"location":"trident-advanced/trident-transactions/multi-instruction-transactions/","title":"Multi-Instruction Transactions","text":"<p>Trident supports fuzzing of multiple instructions within one transaction.</p> <p>By default, separate folders for <code>instructions</code> and <code>transactions</code> are created. To create multi-instruction transactions, either modify an existing <code>transaction</code> in its corresponding <code>.rs</code> file or create a new one.</p> <p>Instruction Resolution Order</p> <p>In multi-instruction transactions, instruction hooks are executed in the same order as the instructions are defined in the transaction structure.</p> <p>Any newly created transaction must be added to the <code>FuzzTransactions</code> enum in the <code>fuzz_transactions.rs</code> file. See the FuzzTransactions page for more details.</p>"},{"location":"trident-advanced/trident-transactions/multi-instruction-transactions/#example","title":"Example","text":"<p>The following example demonstrates:</p> <ul> <li>Creating a multi-instruction transaction</li> <li>Adding the transaction to the <code>FuzzTransactions</code> enum</li> </ul> <pre><code>// example_transaction.rs\nuse crate::fuzz_transactions::FuzzAccounts;\nuse crate::instructions::*;\nuse trident_fuzz::fuzzing::*;\n#[derive(Arbitrary, Debug, TridentTransaction)]\npub struct ExampleTransaction {\n    pub instruction1: ExampleInstruction1, // instruction one\n    pub instruction2: ExampleInstruction2, // instruction two\n}\n\n\nimpl TransactionHooks for ExampleTransaction {}\n</code></pre> <pre><code>//  fuzz_transactions.rs\n/// FuzzTransactions contains all available transactions\n///\n/// You can create your own transactions by adding new variants to the enum.\n///\n/// Docs: https://ackee.xyz/trident/docs/latest/trident-api-macro/trident-types/fuzz-transactions/\n#[derive(Arbitrary, TransactionSelector)]\npub enum FuzzTransactions {\n    SomeTransaction(SomeTransaction),\n    AnotherTransaction(AnotherTransaction),\n    SomeAnotherTransaction(SomeAnotherTransaction),\n    // Transaction with multiple instructions\n    ExampleTransaction(ExampleTransaction),\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/","title":"Transaction Methods","text":"<p>Trident supports customizing transaction behavior with <code>Transaction Hooks</code>.</p> <ul> <li>Pre-Transaction Execution: Perform custom logic before transaction execution</li> <li>Post-Transaction Execution: Perform custom logic after transaction execution</li> <li>Transaction Invariants: Validate transaction-specific invariants</li> <li>Transaction Error Handling: Handle transaction errors</li> <li>Typed Accounts: Deserialize accounts into typed data to perform differential analysis</li> </ul>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/error-handler/","title":"Transaction Error Hook","text":"<p>Trident lets you handle errors that occur during transaction execution.</p> <p>This feature is helpful when you want to investigate errors and verify if the behavior is as expected.</p> <p>Error Hook Execution Order</p> <p>The <code>transaction_error_handler</code> method is called only when the transaction has <code>FAILED</code>.</p> <pre><code>impl TransactionHooks for ExampleTransaction {\n    type IxAccounts = FuzzAccounts;\n\n    fn transaction_error_handler(&amp;self, e: TransactionError) -&gt; Result&lt;(), TransactionError&gt; {\n        // Your custom error handling logic goes here\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/error-handler/#example","title":"Example","text":"<p>The following example demonstrates:</p> <ul> <li>Logging the error</li> <li>Returning Ok to suppress the error</li> </ul> <pre><code>impl TransactionHooks for ExampleTransaction {\n    type IxAccounts = FuzzAccounts;\n\n    fn transaction_error_handler(&amp;self, e: TransactionError) -&gt; Result&lt;(), TransactionError&gt; {\n        // Example: Log the error and decide whether to propagate it\n        eprintln!(\"Transaction failed with error: {:?}\", e);\n\n        // Return Ok to suppress the error, or Err to propagate it\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/invariant-check/","title":"Transaction Invariant Hook","text":"<p>Transaction invariant checks let you compare account states before and after transaction execution (differential analysis), or verify that accounts are in a specific state after the transaction.</p> <p>This is useful to validate transaction behavior and ensure accounts are not modified in unexpected ways.</p> <p>Invariant Check Execution Order</p> <p>The <code>transaction_invariant_check</code> method is called only after the transaction is <code>SUCCESSFULLY</code> executed.</p> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn transaction_invariant_check(&amp;self) -&gt; Result&lt;(), FuzzingError&gt; {\n        // Your custom differential analysis goes here\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/invariant-check/#example","title":"Example","text":"<p>The following example demonstrates:</p> <ul> <li>Obtaining the owner's balance after the transaction, with <code>.get_snapshot_after()</code> (post transaction snapshot)</li> <li>Comparing the balance to the expected balance (500 lamports)</li> </ul> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn transaction_invariant_check(&amp;self) -&gt; Result&lt;(), FuzzingError&gt; {\n        // Obtain the owner's balance after the transaction\n        let owner_lamports = self\n            .instruction\n            .accounts\n            .owner\n            .get_snapshot_after()\n            .lamports();\n\n        // Compare the balance and return error if not valid\n        if owner_lamports &gt; 500 {\n            return Err(FuzzingError::with_message(\n                \"Owner lamports should be less than 500\",\n            ));\n        }\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/pre-post-execution/","title":"Pre and Post Transaction Hooks","text":"<p>Trident lets you perform specific logic before and after transaction execution with pre_transaction and post_transaction methods.</p> <p>These methods accept a <code>FuzzClient</code> parameter, which provides methods to interact with the fuzzing environment. See the FuzzClient documentation for details.</p> <p>Post-Transaction Execution Order</p> <p>The <code>post_transaction</code> method is called only after the transaction is <code>SUCCESSFULLY</code> executed.</p> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn pre_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n        // Your custom logic goes here\n    }\n}\n</code></pre> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn post_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n        // Your custom logic goes here\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/pre-post-execution/#example","title":"Example","text":"<p>The following examples demonstrates:</p> <ul> <li>Always forward in time before the transaction</li> <li>Always forward in time after the transaction</li> </ul> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn pre_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n        client.forward_in_time(500);\n    }\n}\n</code></pre> <pre><code>impl TransactionHooks for ExampleTransaction {\n    fn post_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n        client.forward_in_time(500);\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/typed-accounts/","title":"Typed Accounts","text":"<p>If you need to work with <code>data accounts</code> in the <code>Transaction hooks</code>, you will first need to deserialize the accounts. For deserialization into known structs, Trident generates <code>types.rs</code>, where each struct derives <code>BorshDeserialize</code> and <code>BorshSerialize</code>.</p>"},{"location":"trident-advanced/trident-transactions/transaction-hooks/typed-accounts/#example","title":"Example","text":"<p>The following example demonstrates:</p> <ul> <li>Obtaining example data account after the transaction, with <code>.get_snapshot_after()</code> (post transaction snapshot)</li> <li><code>.data_no_discriminator()</code> ensures that the first 8 bytes (account discriminator) are not included in the deserialization</li> <li>Deserializing the data account into the <code>ExampleDataAccount</code> struct</li> </ul> <pre><code>// types.rs\n#[derive(Arbitrary, Debug, BorshDeserialize, BorshSerialize, Clone)]\npub struct ExampleDataAccount {\n    pub data: u64,\n}\n</code></pre> <pre><code>// example_transaction.rs\n\n#[derive(Arbitrary, Debug, TridentTransaction)]\npub struct ExampleTransaction {\n    pub instruction: ExampleInstruction,\n}\n\nimpl TransactionHooks for ExampleTransaction {\n    fn post_transaction(&amp;self, client: &amp;mut impl FuzzClient) {\n        // Take account\n        let example_account =\n            self.instruction.accounts.example_data_account.get_snapshot_after();\n\n        // obtain data without the first 8 bytes (account discriminator) and\n        // deserialize the data\n        let example_account =\n            ExampleDataAccount::deserialize(\n                &amp;mut example_account.data_no_discriminator()\n            ).unwrap();\n\n        // your additional custom code here ...\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/trident-fuzzing-flows/","title":"Fuzzing Flows","text":"<p>Flows are a way to define <code>custom sequences of behavior</code> that should happen during each fuzzing iteration. By default, Trident generates random sequences of Transactions which are part of the <code>FuzzTransactions</code> enum. On the other hand, with flows it is possible to specify custom sequences of Transactions, and additionally, custom logic can be performed between transactions.</p> <p>The fuzz test iteration is composed of the following steps:</p> <ul> <li>Initializations, check the Initialization</li> <li>Flows definition, check the Flows</li> </ul>"},{"location":"trident-advanced/trident-transactions/trident-fuzzing-flows/flow/","title":"Flow Definition","text":"<p>Flows allow you to define custom sequences of behavior during each fuzzing iteration.</p> <p>For more reference see TridentFlowExecutor</p>"},{"location":"trident-advanced/trident-transactions/trident-fuzzing-flows/flow/#the-flow-attribute","title":"The <code>#[flow]</code> Attribute","text":"<p>Flow is marked with the <code>#[flow]</code> attribute.</p> <p>Flow methods definition</p> <ul> <li>It is allowed to specify multiple flows (i.e., marking multiple methods with <code>#[flow]</code>)</li> <li>The flow methods have to adhere to the strict method interface as shown in the example below</li> <li>If no flows are specified, or all flows are marked with <code>#[flow_ignore]</code>, the default callback will be called, executing random transactions from the <code>FuzzTransactions</code> enum</li> <li>If multiple flows are defined, they are executed sequentially</li> </ul> <pre><code>#[derive(Default, FuzzTestExecutor)]\nstruct FuzzTest {\n    client: TridentSVM,\n}\n#[flow_executor]\nimpl FuzzTest {\n    #[init]\n    fn start(&amp;mut self) {\n        // Initialize the fuzz test\n    }\n    #[flow]\n    fn flow1(\n        &amp;mut self,\n        fuzzer_data: &amp;mut FuzzerData,\n        accounts: &amp;mut FuzzAccounts,\n    ) -&gt; Result&lt;(), FuzzingError&gt; {\n        // Some logic here\n\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/trident-fuzzing-flows/flow/#example","title":"Example","text":"<p>The following example demonstrates:</p> <ul> <li>Deploying a native program in the method marked with <code>#[init]</code></li> <li>Executing a sequence of transactions (<code>SomeTransaction</code> and <code>AnotherTransaction</code>) in the method (<code>flow1</code>) marked with <code>#[flow]</code></li> <li>Executing another sequence of transactions (<code>AnotherTransaction</code>) in the method (<code>flow2</code>) marked with <code>#[flow]</code></li> <li>Executing random transaction from the <code>FuzzTransactions</code> enum in the method (<code>flow3</code>) marked with <code>#[flow]</code></li> <li>The execution is sequential, i.e., the flow methods are executed one after another</li> <li>Using <code>#[flow_executor(random_tail = true)]</code> to execute random Transactions at the end (after all of the flow methods are executed)</li> </ul> <pre><code>#[derive(Default, FuzzTestExecutor)]\nstruct FuzzTest {\n    client: TridentSVM,\n}\n#[flow_executor(random_tail = true)]\nimpl FuzzTest {\n    #[init]\n    fn start(&amp;mut self) {\n        self.client.deploy_native_program(ProgramEntrypoint::new(\n            pubkey!(\"FtevoQoDMv6ZB3N9Lix5Tbjs8EVuNL8vDSqG9kzaZPit\"),\n            None,\n            processor!(entry_hello_world),\n        ));\n    }\n    #[flow]\n    fn flow1(\n        &amp;mut self,\n        fuzzer_data: &amp;mut FuzzerData,\n        accounts: &amp;mut FuzzAccounts,\n    ) -&gt; Result&lt;(), FuzzingError&gt; {\n        SomeTransaction::build(fuzzer_data, &amp;mut self.client, accounts)?\n            .execute(&amp;mut self.client)?;\n\n        AnotherTransaction::build(fuzzer_data, &amp;mut self.client, accounts)?\n            .execute(&amp;mut self.client)?;\n\n        Ok(())\n    }\n\n    #[flow]\n    fn flow2(\n        &amp;mut self,\n        fuzzer_data: &amp;mut FuzzerData,\n        accounts: &amp;mut FuzzAccounts,\n    ) -&gt; Result&lt;(), FuzzingError&gt; {\n\n        AnotherTransaction::build(fuzzer_data, &amp;mut self.client, accounts)?\n            .execute(&amp;mut self.client)?;\n\n        Ok(())\n    }\n    #[flow]\n    fn flow3(\n        &amp;mut self,\n        fuzzer_data: &amp;mut FuzzerData,\n        accounts: &amp;mut FuzzAccounts,\n    ) -&gt; Result&lt;(), FuzzingError&gt; {\n\n        FuzzTransactions::select_n_execute(fuzzer_data, &amp;mut self.client, accounts)?;\n\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/trident-fuzzing-flows/initialization/","title":"Initialization","text":"<p>Initialization configures the test environment before flow execution. It sets up program deployment and establishes necessary preconditions, for example program deployments.</p>"},{"location":"trident-advanced/trident-transactions/trident-fuzzing-flows/initialization/#the-init-attribute","title":"The <code>#[init]</code> Attribute","text":"<p>The <code>#[init]</code> attribute marks a method within a <code>#[flow_executor]</code> implementation block as the initialization method.</p> <p>Init Method definition</p> <ul> <li>There can be only one method marked as <code>#[init]</code>.</li> <li>The method interface is strict, meaning the method has to have the same interface as shown in the example below.</li> </ul> <pre><code>#[derive(FuzzTestExecutor)]\nstruct FuzzTest {\n    client: TridentSVM,\n}\n\n#[flow_executor]\nimpl FuzzTest {\n    #[init]\n    fn example_init_method(&amp;mut self) {\n        // ...\n    }\n    // ...\n}\n</code></pre>"},{"location":"trident-advanced/trident-transactions/trident-fuzzing-flows/initialization/#example","title":"Example","text":"<p>The following example demonstrates:</p> <ul> <li>Deploying a native program in the method marked with <code>#[init]</code></li> </ul> <pre><code>#[derive(FuzzTestExecutor)]\nstruct FuzzTest {\n    client: TridentSVM,\n}\n\n#[flow_executor]\nimpl FuzzTest {\n    #[init]\n    fn example_init_method(&amp;mut self) {\n        // Example deploy hello-world program\n\n        self.client.deploy_native_program(ProgramEntrypoint::new(\n            pubkey!(\"FtevoQoDMv6ZB3N9Lix5Tbjs8EVuNL8vDSqG9kzaZPit\"),\n            None,\n            processor!(entry_hello_world),\n        ));\n\n        // ...\n    }\n    // ...\n}\n</code></pre>"},{"location":"trident-api-macro/","title":"Trident API &amp; Macro Reference","text":"<p>This section contains the API and macro reference for Trident.</p>"},{"location":"trident-api-macro/#tridents-fuzz-client","title":"Trident's Fuzz Client","text":"<p>FuzzClient represents the fuzzing environment and provides methods to interact with the fuzzing environment.</p> <ul> <li>FuzzClient</li> </ul>"},{"location":"trident-api-macro/#trident-macros","title":"Trident Macros","text":"<p>Trident macros are used to define required methods for fuzzing.</p> <ul> <li>TridentTransaction</li> <li>TridentInstruction</li> <li>TridentAccounts</li> <li>TridentRemainingAccounts</li> <li>TridentFlowExecutor</li> <li>TridentSelector</li> </ul>"},{"location":"trident-api-macro/#trident-types","title":"Trident Types","text":"<p>Trident types represent the types utilized during fuzzing.</p> <ul> <li>FuzzTransactions</li> <li>FuzzAccounts</li> <li>TridentAccount</li> <li>TridentPubkey</li> <li>CustomTypes</li> </ul>"},{"location":"trident-api-macro/trident-fuzz-client/","title":"Trident's Fuzz Client","text":"<p>Trident's Client (<code>FuzzClient</code>) is a wrapper around the TridentSVM that provides methods to manipulate with the execution environment during fuzzing.</p> <p>This section describes the methods that are available in the <code>FuzzClient</code>.</p>"},{"location":"trident-api-macro/trident-fuzz-client/#trident-client-methods","title":"Trident Client Methods","text":""},{"location":"trident-api-macro/trident-fuzz-client/#new_client","title":"<code>new_client</code>","text":"<p>Creates a new instance of the fuzzing client with the specified programs and configuration. <pre><code>fn new_client(programs: &amp;[ProgramEntrypoint], config: &amp;TridentConfig) -&gt; Self\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/#deploy_native_program","title":"<code>deploy_native_program</code>","text":"<p>Deploys a native program to the fuzzing client. <pre><code>fn deploy_native_program(program: ProgramEntrypoint)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/#get_sysvar","title":"<code>get_sysvar</code>","text":"<p>Retrieves <code>Sysvars</code> like <code>Rent</code>, <code>Clock</code>, etc. <pre><code>fn get_sysvar&lt;T: Sysvar&gt;() -&gt; T\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/#warp_to_epoch","title":"<code>warp_to_epoch</code>","text":"<p>Advances the fuzz test to a specific epoch. <pre><code>fn warp_to_epoch(warp_epoch: u64)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/#warp_to_slot","title":"<code>warp_to_slot</code>","text":"<p>Advances the fuzz test to a specific slot. <pre><code>fn warp_to_slot(warp_slot: u64)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/#warp_to_timestamp","title":"<code>warp_to_timestamp</code>","text":"<p>Sets the fuzz test to a specific timestamp. <pre><code>fn warp_to_timestamp(warp_timestamp: i64)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/#forward_in_time","title":"<code>forward_in_time</code>","text":"<p>Advances the fuzz test by the specified number of seconds. <pre><code>fn forward_in_time(seconds: i64)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/#set_account_custom","title":"<code>set_account_custom</code>","text":"<p>Creates or overwrites an account at the specified address, bypassing normal runtime checks. <pre><code>fn set_account_custom(address: &amp;Pubkey, account: &amp;AccountSharedData)\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/#get_account","title":"<code>get_account</code>","text":"<p>Retrieves the account data at the specified address. <pre><code>fn get_account(key: &amp;Pubkey) -&gt; AccountSharedData\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/#payer","title":"<code>payer</code>","text":"<p>Returns the keypair of the client's payer account. <pre><code>fn payer() -&gt; Keypair\n</code></pre></p>"},{"location":"trident-api-macro/trident-fuzz-client/#clear_accounts","title":"<code>clear_accounts</code>","text":"<p>Removes temporary accounts created during the fuzzing iteration.</p> <p>Warning</p> <p>This method is called internally by Trident (after each fuzzing iteration, to reset state to default).</p> <pre><code>fn clear_accounts()\n</code></pre>"},{"location":"trident-api-macro/trident-fuzz-client/#get_last_blockhash","title":"<code>get_last_blockhash</code>","text":"<p>Retrieves the most recent blockhash.</p> <p>Warning</p> <p>Currently, this method is not implemented and call to this method will result in a panic.</p> <pre><code>fn get_last_blockhash() -&gt; Hash\n</code></pre>"},{"location":"trident-api-macro/trident-fuzz-client/#process_instructions","title":"<code>process_instructions</code>","text":"<p>Executes a set of instructions and waits for them to be either finalized or rejected.</p> <p>Warning</p> <p>This method is called internally by Trident, no need for manual invocation.</p> <pre><code>fn process_instructions(instructions: &amp;[Instruction]) -&gt; Result&lt;(), TransactionError&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/","title":"TridentAccounts","text":"<p>The <code>TridentAccounts</code> macro is used to derive required methods for account structures.</p>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#derived-traits","title":"Derived Traits","text":"<p>The macro implements the following trait:</p> <ul> <li><code>AccountsMethods</code> - Methods to resolve accounts</li> </ul> <p>Manual Implementation Note</p> <p>There is no need to manually implement any methods of this trait. The macro handles all implementations automatically based on the account structure and attributes.</p>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#accounts-methods","title":"Accounts Methods","text":"<p>Internal Method</p> <p>These methods are used internally by Trident and is not expected to use them manually.</p>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#resolve_accounts","title":"<code>resolve_accounts</code>","text":"<p>Resolves all accounts based on their constraints and dependencies. The macro automatically analyzes seed dependencies and sorts fields in the correct resolution order.</p> <pre><code>fn resolve_accounts(\n    &amp;mut self,\n    client: &amp;mut impl FuzzClient,\n    storage_accounts: &amp;mut Self::IxAccounts,\n    program_id: Pubkey,\n    instruction_data: &amp;Self::IxData,\n)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#to_account_meta","title":"<code>to_account_meta</code>","text":"<p>Converts all accounts to AccountMeta format for Solana instructions.</p> <pre><code>fn to_account_meta(&amp;mut self) -&gt; Vec&lt;AccountMeta&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#capture_before","title":"<code>capture_before</code>","text":"<p>Captures the state of accounts before transaction execution.</p> <pre><code>fn capture_before(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#capture_after","title":"<code>capture_after</code>","text":"<p>Captures the state of accounts after transaction execution.</p> <pre><code>fn capture_after(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#struct-level-attributes","title":"Struct-Level Attributes","text":"<p>These attributes are applied to the struct definition itself.</p>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#instruction_data","title":"<code>instruction_data</code>","text":"<p>Specifies the instruction data type that will be used with these accounts.</p> <p><code>This attribute is mandatory and applied at the struct level</code></p> <pre><code>#[derive(TridentAccounts)]\n#[instruction_data(ExampleInstructionData)]\npub struct ExampleAccounts {\n    // fields...\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#storage","title":"<code>storage</code>","text":"<p>Specifies the storage type for accounts, which is used to manage account state during fuzzing.</p> <p><code>This attribute is mandatory and applied at the struct level</code></p> <pre><code>#[derive(TridentAccounts)]\n#[storage(ExampleStorage)]\npub struct ExampleAccounts {\n    // fields...\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#field-level-attributes","title":"Field-Level Attributes","text":"<p>These attributes are applied to individual account fields using the <code>#[account(...)]</code> syntax.</p>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#accountmut","title":"<code>account(mut)</code>","text":"<p>Marks the account as mutable. This will set the <code>is_writable</code> flag to <code>true</code> in the generated <code>AccountMeta</code>.</p> <p><code>This attribute is optional</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(mut)]\n    pub mutable_account: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#accountsigner","title":"<code>account(signer)</code>","text":"<p>Marks the account as a signer. This will set the <code>is_signer</code> flag to <code>true</code> in the generated <code>AccountMeta</code>.</p> <p><code>This attribute is optional</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(signer)]\n    pub authority: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#accountaddress","title":"<code>account(address)</code>","text":"<p>Sets a fixed address for the account. Useful for program IDs that have known addresses.</p> <p><code>This attribute is optional</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(address = \"11111111111111111111111111111111\")]\n    pub system_program: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#accountstorage","title":"<code>account(storage)</code>","text":"<p>Specifies which storage to use for the account. This determines where the account address is stored and managed.</p> <p><code>This attribute is optional</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(storage = owner)]\n    pub owner: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#accountskip_snapshot","title":"<code>account(skip_snapshot)</code>","text":"<p>Excludes the account from state snapshots. Useful for accounts that don't need to be tracked for state changes.</p> <p><code>This attribute is optional</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(skip_snapshot)]\n    pub ignored_for_snapshots: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#accountseeds","title":"<code>account(seeds)</code>","text":"<p>Defines Program Derived Address (PDA) seeds for the account. The seeds can include references to other accounts in the struct, allowing for dependency-based PDA derivation.</p> <p><code>This attribute is optional but requires the storage attribute</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(storage = pdas, seeds = [b\"seed\", authority.key().as_ref()])]\n    pub pda_account: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-accounts/#accountprogram_id","title":"<code>account(program_id)</code>","text":"<p>Specifies the program ID for PDA derivation. If not provided, the program ID of Instruction will be used.</p> <p><code>This attribute is applied at the field level and is used with seeds</code></p> <pre><code>#[derive(TridentAccounts)]\npub struct ExampleAccounts {\n    #[account(\n        storage = custom_pda,\n        seeds = [b\"seed\"],\n        program_id = pubkey!(\"11111111111111111111111111111111\"))]\n    pub custom_pda: TridentAccount,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/","title":"Flow Executor","text":"<p>The Flow Executor macros are a set of attribute macros used to define and control execution flows. These macros help organize and manage the execution of complex test scenarios.</p>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#available-macros","title":"Available Macros","text":"<p>The Flow Executor functionality consists of four main attribute macros:</p> <ol> <li><code>#[flow_executor]</code> - Implements the flow executor for a struct</li> <li><code>#[flow]</code> - Marks a method as part of the execution flow</li> <li><code>#[init]</code> - Marks a method as the initialization method for the flow</li> <li><code>#[flow_ignore]</code> - Marks a flow method to be skipped during execution</li> </ol>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#usage","title":"Usage","text":"<p>Default callback</p> <p>If not flows are defined, or all of the flows are ignored, the default callback will execute a <code>random selection sequence</code> of transactions from the <code>FuzzTransactions</code> enum.</p> <pre><code>use trident_fuzz::prelude::*;\n\n\n#[derive(Default)]\nstruct FuzzTest&lt;C&gt; {\n    client: C,\n}\n\n#[flow_executor]\nimpl&lt;C: FuzzClient + std::panic::RefUnwindSafe&gt; FuzzTest&lt;C&gt; {\n    fn new(client: C) -&gt; Self {\n        Self { client }\n    }\n    #[init]\n    fn initialize(&amp;mut self, client: &amp;mut C) -&gt; Result&lt;(), FlowError&gt; {\n        // Initialization logic\n        Ok(())\n    }\n\n    #[flow]\n    fn flow1(&amp;mut self, client: &amp;mut C) -&gt; Result&lt;(), FlowError&gt; {\n        // First step in the flow\n        Ok(())\n    }\n\n    #[flow]\n    fn flow2(&amp;mut self, client: &amp;mut C) -&gt; Result&lt;(), FlowError&gt; {\n        // Second step in the flow\n        Ok(())\n    }\n\n    #[flow_ignore]\n    #[flow]\n    fn skipped_flow(&amp;mut self, client: &amp;mut C) -&gt; Result&lt;(), FlowError&gt; {\n        // This step will be skipped during execution\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#implementation-level-attributes","title":"Implementation-Level attributes","text":""},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#flow_executor","title":"<code>#[flow_executor]</code>","text":"<p>The <code>flow_executor</code> attribute macro is applied to an <code>impl</code> block and implements the flow executor functionality for the struct.</p> <pre><code>#[flow_executor]\nimpl&lt;C: FuzzClient + std::panic::RefUnwindSafe&gt; FuzzTest&lt;C&gt; {\n    // Flow methods...\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#random_tail","title":"<code>random_tail</code>","text":"<p>The <code>random_tail</code> attribute is used to specify if remaining random data after flow execution should be used to execute random transactions.</p> <pre><code>#[flow_executor(random_tail = true)]\nimpl&lt;C: FuzzClient + std::panic::RefUnwindSafe&gt; FuzzTest&lt;C&gt; {\n    // Flow methods...\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#method-level-attributes","title":"Method-Level attributes","text":""},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#flow","title":"<code>#[flow]</code>","text":"<p>The <code>flow</code> attribute macro marks a method as part of the execution flow.</p> <p>Flow Methods</p> <p>It is possible to define multiple flow methods.</p> <p>Multiple flows are executed sequentially.</p> <pre><code>#[flow]\nfn step_one(\n    &amp;mut self,\n    fuzzer_data: &amp;mut FuzzerData,\n    accounts: &amp;mut FuzzAccounts\n) -&gt; Result&lt;(), FuzzingError&gt; {\n    // Flow step implementation\n    Ok(())\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#init","title":"<code>#[init]</code>","text":"<p>The <code>init</code> attribute macro marks a method as the initialization method for the flow.</p> <p>Initialization Method</p> <p>It is possible to define only one initialization method.</p> <pre><code>#[init]\nfn initialize(&amp;mut self) {\n    // Initialization logic\n    // For example, deploy program here\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-flow-executor/#flow_ignore","title":"<code>#[flow_ignore]</code>","text":"<p>The <code>flow_ignore</code> attribute macro marks a flow method to be skipped during execution.</p> <pre><code>#[flow_ignore]\n#[flow]\nfn step_one(\n    &amp;mut self,\n    fuzzer_data: &amp;mut FuzzerData,\n    accounts: &amp;mut FuzzAccounts\n) -&gt; Result&lt;(), FuzzingError&gt; {\n    // Flow step implementation\n    Ok(())\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/","title":"TridentInstruction","text":"<p>The <code>TridentInstruction</code> macro is used to derive required methods for <code>Instructions</code>. This procedural macro automatically implements instruction-related functionality for structs that represent instructions.</p> <p>Required Field Names</p> <p>The macro parser strictly requires the struct to have an <code>accounts</code> field named exactly <code>accounts</code>. If a remaining accounts field is used, it must be named exactly <code>remaining_accounts</code>.</p>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#derived-traits","title":"Derived Traits","text":"<p>The macro implements the following traits:</p> <ul> <li><code>InstructionGetters</code> - Methods to retrieve instruction data</li> <li><code>InstructionSetters</code> - Methods to set up instruction state</li> </ul> <p>Manual Implementation Note</p> <p>There is no need to manually implement the getter, setter, or hook methods. The macro handles these implementations automatically based on the structure of your instruction.</p>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#instruction-getters","title":"Instruction Getters","text":"<p>Internal Method</p> <p>These methods are used internally by Trident and is not expected to use them manually.</p>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#get_discriminator","title":"<code>get_discriminator</code>","text":"<p>Returns the instruction discriminator (identifier bytes) that uniquely identifies this instruction of the program.</p> <pre><code>fn get_discriminator(&amp;self) -&gt; Vec&lt;u8&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#get_program_id","title":"<code>get_program_id</code>","text":"<p>Returns the program ID that will process this instruction.</p> <pre><code>fn get_program_id(&amp;self) -&gt; solana_sdk::pubkey::Pubkey\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#to_account_metas","title":"<code>to_account_metas</code>","text":"<p>Converts all accounts to AccountMeta format for Solana instructions.</p> <pre><code>fn to_account_metas(&amp;mut self) -&gt; Vec&lt;AccountMeta&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#instruction-setters","title":"Instruction Setters","text":"<p>Internal Method</p> <p>These methods are used internally by Trident and is not expected to use them manually.</p>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#set_snapshot_before","title":"<code>set_snapshot_before</code>","text":"<p>Captures the state of all accounts before instruction execution.</p> <pre><code>fn set_snapshot_before(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#set_snapshot_after","title":"<code>set_snapshot_after</code>","text":"<p>Captures the state of all accounts after instruction execution.</p> <pre><code>fn set_snapshot_after(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#resolve_accounts","title":"<code>resolve_accounts</code>","text":"<p>Resolves all accounts needed for this instruction.</p> <pre><code>fn resolve_accounts(\n    &amp;mut self,\n    client: &amp;mut impl FuzzClient,\n    fuzz_accounts: &amp;mut Self::IxAccounts,\n)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#struct-level-attributes","title":"Struct-Level Attributes","text":"<p>These attributes are applied to the struct definition itself.</p>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#program_id","title":"<code>program_id</code>","text":"<p>Specifies the program ID that will process this instruction. This can be provided as a string literal containing a base58-encoded public key.</p> <p><code>This attribute is mandatory</code></p> <pre><code>#[derive(Arbitrary, Debug, TridentInstruction)]\n#[program_id(\"KLend2g3cP87fffoy8q1mQqGKjrxjC8boSyAYavgmjD\")]\npub struct ExampleInstruction {\n    pub accounts: ExampleInstructionAccounts,\n    pub data: ExampleInstructionData,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-instruction/#discriminator","title":"<code>discriminator</code>","text":"<p>Specifies the instruction discriminator bytes that uniquely identify this instruction to the program. This is typically an 8-byte array.</p> <p><code>This attribute is mandatory</code></p> <pre><code>#[derive(Arbitrary, Debug, TridentInstruction)]\n#[discriminator([33u8, 132u8, 147u8, 228u8, 151u8, 192u8, 72u8, 89u8])]\npub struct ExampleInstruction {\n    pub accounts: ExampleInstructionAccounts,\n    pub data: ExampleInstructionData,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/","title":"TridentRemainingAccounts","text":"<p>The <code>TridentRemainingAccounts</code> macro is used to derive required methods for <code>remaining account structures</code>.</p> <p>The struct must have exactly one field that holds the remaining accounts and is of type <code>[TridentAccount; X]</code>, with <code>X</code> being the number of remaining accounts, required.</p> <pre><code>#[derive(Arbitrary, Debug, TridentRemainingAccounts)]\npub struct ExampleRemainingAccounts {\n    pub remaining_accounts: [TridentAccount; 2],\n}\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/#derived-traits","title":"Derived Traits","text":"<p>The macro implements the following trait:</p> <ul> <li><code>RemainingAccountsMethods</code> - Methods to resolve remaining accounts</li> </ul> <p>Manual Implementation Note</p> <p>There is no need to manually implement any methods of this trait. The macro handles all implementations automatically based on the account structure and attributes.</p> <p>Dynamic Sizing Behavior</p> <p>The macro will only process accounts until it encounters the first unset remaining account. This allows for dynamic sizing of remaining accounts.</p>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/#remaining-accounts-methods","title":"Remaining Accounts Methods","text":"<p>Internal Method</p> <p>These methods are used internally by Trident and is not expected to use them manually.</p> <p>The macro implements the <code>RemainingAccountsMethods</code> trait with the corresponding methods:</p>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/#to_account_meta","title":"<code>to_account_meta</code>","text":"<p>Convert accounts to account metas <pre><code>fn to_account_meta(&amp;mut self) -&gt; Vec&lt;AccountMeta&gt;;\n</code></pre></p>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/#capture_before","title":"<code>capture_before</code>","text":"<p>Capture account state before transaction execution <pre><code>fn capture_before(&amp;mut self, client: &amp;mut impl FuzzClient);\n</code></pre></p>"},{"location":"trident-api-macro/trident-macros/trident-remaining-accounts/#capture_after","title":"<code>capture_after</code>","text":"<p>Capture account state after transaction execution <pre><code>fn capture_after(&amp;mut self, client: &amp;mut impl FuzzClient);\n</code></pre></p>"},{"location":"trident-api-macro/trident-macros/trident-selector/","title":"TransactionSelector","text":"<p>The <code>TransactionSelector</code> macro is used to derive required methods for random transaction selection during fuzzing operations. This macro automatically implements functionality for selecting and executing transactions based on enum variants.</p>"},{"location":"trident-api-macro/trident-macros/trident-selector/#derived-traits","title":"Derived Traits","text":"<p>The macro implements the following trait:</p> <ul> <li><code>TransactionSelector&lt;T&gt;</code> - Methods to select and execute transactions</li> </ul> <p>Manual Implementation Note</p> <p>There is no need to manually implement any methods of this trait. The macro handles all implementations automatically based on the structure of your transaction selector.</p>"},{"location":"trident-api-macro/trident-macros/trident-selector/#transaction-selector-methods","title":"Transaction Selector Methods","text":""},{"location":"trident-api-macro/trident-macros/trident-selector/#transaction_selector","title":"<code>transaction_selector</code>","text":"<p>Internal method used by the fuzzer to execute selected transactions. This method should not be called directly - use <code>select_n_execute</code> instead.</p> <pre><code>fn transaction_selector(\n    &amp;mut self,\n    client: &amp;mut impl FuzzClient,\n    fuzz_accounts: &amp;mut T,\n) -&gt; Result&lt;(), FuzzingError&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-selector/#select_n_execute","title":"<code>select_n_execute</code>","text":"<p>Selects a random transaction variant and executes it.</p> <p>Transaction Hooks</p> <p>The <code>select_n_execute</code> method executes the transaction <code>with</code> all transaction hooks enabled.</p> <pre><code>fn select_n_execute(\n    fuzzer_data: &amp;mut FuzzerData,\n    client: &amp;mut impl FuzzClient,\n    accounts: &amp;mut T,\n) -&gt; Result&lt;(), FuzzingError&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-selector/#select_n_execute_no_hooks","title":"<code>select_n_execute_no_hooks</code>","text":"<p>Selects a random transaction variant and executes it.</p> <p>Transaction Hooks</p> <p>The <code>select_n_execute_no_hooks</code> method executes the transaction <code>without</code> any transaction hooks.</p> <pre><code>fn select_n_execute_no_hooks(\n    fuzzer_data: &amp;mut FuzzerData,\n    client: &amp;mut impl FuzzClient,\n    accounts: &amp;mut T,\n) -&gt; Result&lt;(), FuzzingError&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/","title":"TridentTransaction","text":"<p>The <code>TridentTransaction</code> macro is used to derive required methods for <code>Transactions</code>. This procedural macro automatically implements transaction-related functionality for structs that represent transactions.</p>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#derived-traits","title":"Derived Traits","text":"<p>The macro implements the following traits:</p> <ul> <li><code>TransactionGetters</code> - Methods to retrieve transaction data</li> <li><code>TransactionSetters</code> - Methods to set up transaction state</li> <li><code>TransactionMethods</code> - Core transaction execution methods</li> </ul> <p>Manual Implementation Note</p> <p>There is no need to manually implement the getter, setter, or core methods. The macro handles these implementations automatically based on the structure of your transaction.</p>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#transaction-methods","title":"Transaction Methods","text":""},{"location":"trident-api-macro/trident-macros/trident-transaction/#build","title":"<code>build</code>","text":"<p>Creates a new transaction instance from fuzzer data.</p> <pre><code>fn build(\n    fuzzer_data: &amp;mut FuzzerData,\n    client: &amp;mut impl FuzzClient,\n    fuzz_accounts: &amp;mut Self::IxAccounts,\n) -&gt; arbitrary::Result&lt;Self&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#execute","title":"<code>execute</code>","text":"<p>Execute the transaction with the TransactionHooks.</p> <pre><code>fn execute(&amp;mut self, client: &amp;mut impl FuzzClient) -&gt; Result&lt;(), FuzzingError&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#execute_no_hooks","title":"<code>execute_no_hooks</code>","text":"<p>Execute the transaction without the TransactionHooks (simplified version).</p> <pre><code>fn execute_no_hooks(&amp;mut self, client: &amp;mut impl FuzzClient) -&gt; Result&lt;(), TransactionError&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#transaction-getters","title":"Transaction Getters","text":"<p>Internal Method</p> <p>These methods are used internally by Trident and is not expected to use them manually.</p>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#get_transaction_name","title":"<code>get_transaction_name</code>","text":"<p>Returns the name of the transaction. If a custom name is provided via the <code>#[name(\"...\")]</code> attribute, that name will be used; otherwise, the struct name is used.</p> <pre><code>fn get_transaction_name(&amp;self) -&gt; String\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#get_instruction_discriminators","title":"<code>get_instruction_discriminators</code>","text":"<p>Returns the instruction discriminators (identifiers) for all instructions in the transaction.</p> <pre><code>fn get_instruction_discriminators(&amp;self) -&gt; Vec&lt;Vec&lt;u8&gt;&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#get_instruction_program_ids","title":"<code>get_instruction_program_ids</code>","text":"<p>Returns the program IDs that will process the instructions.</p> <pre><code>fn get_instruction_program_ids(&amp;self) -&gt; Vec&lt;solana_sdk::pubkey::Pubkey&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#get_instruction_data","title":"<code>get_instruction_data</code>","text":"<p>Returns the instruction-specific data/parameters for all instructions in the transaction.</p> <pre><code>fn get_instruction_data(&amp;mut self, client: &amp;mut impl FuzzClient) -&gt; Vec&lt;Vec&lt;u8&gt;&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#get_instruction_accounts","title":"<code>get_instruction_accounts</code>","text":"<p>Returns the account metadata needed for the instructions.</p> <pre><code>fn get_instruction_accounts(&amp;mut self, client: &amp;mut impl FuzzClient) -&gt; Vec&lt;Vec&lt;AccountMeta&gt;&gt;\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#transaction-setters","title":"Transaction Setters","text":"<p>Internal Method</p> <p>These methods are used internally by Trident and is not expected to use them manually.</p>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#set_snapshot_before","title":"<code>set_snapshot_before</code>","text":"<p>Captures the state of all accounts before transaction execution.</p> <pre><code>fn set_snapshot_before(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#set_snapshot_after","title":"<code>set_snapshot_after</code>","text":"<p>Captures the state of all accounts after transaction execution.</p> <pre><code>fn set_snapshot_after(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#set_instructions","title":"<code>set_instructions</code>","text":"<p>Sets up all instructions for the transaction.</p> <p>Instruction Setup Order</p> <p>The order in which the instructions inputs are set are:</p> <ol> <li><code>set_data</code> - Sets up instruction-specific data</li> <li><code>resolve_accounts</code> - Resolves account addresses</li> <li><code>set_accounts</code> - Sets up account metadata</li> <li><code>set_remaining_accounts</code> - Sets up any additional accounts</li> </ol> <pre><code>fn set_instructions(\n    &amp;mut self,\n    client: &amp;mut impl FuzzClient,\n    fuzz_accounts: &amp;mut Self::IxAccounts,\n)\n</code></pre>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#struct-level-attributes","title":"Struct-Level Attributes","text":"<p>These attributes are applied to the struct definition itself.</p>"},{"location":"trident-api-macro/trident-macros/trident-transaction/#name","title":"<code>name</code>","text":"<p>The custom name of the transaction. This is optional - if not provided, the struct name will be used.</p> <pre><code>#[derive(Arbitrary, Debug, TridentTransaction)]\n#[name(\"Custom Transaction Name\")]\npub struct ExampleTransaction {\n    pub instruction1: ExampleInstruction,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/custom-types/","title":"Custom types","text":"<p>Trident generates custom types within <code>types.rs</code> file. These types are taken from the program's IDL.</p> <p>You can add your own custom types to the <code>types.rs</code> file, or you can modify existing types.</p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/","title":"FuzzAccounts","text":"<p><code>FuzzAccounts</code> is a struct that contains <code>all the accounts that can be used in the fuzz test</code> i.e. <code>storage</code> for accounts.</p> <p>By default, Trident generates the struct based on the program's idl, i.e. for each account Trident generates a field in the struct.</p> <p>On demand, you can add your own accounts to the struct, these accounts are meant to be used within the <code>set_accounts</code>, <code>set_remaining_accounts</code> and potentially within the <code>set_data</code> methods, with the corresponding account indexes.</p> <pre><code>pub struct FuzzAccounts {\n    pub account1: AccountsStorage,\n    pub account2: AccountsStorage,\n    pub account3: AccountsStorage,\n    pub account4: AccountsStorage,\n    pub account5: AccountsStorage,\n    pub account6: AccountsStorage,\n    /// ....\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#implemented-methods","title":"Implemented Methods","text":"<p>The following section contains the methods that are available for the <code>AccountsStorage</code> struct.</p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#is_empty","title":"<code>is_empty</code>","text":"<p>Returns true if no accounts are stored. <pre><code>fn is_empty(&amp;self) -&gt; bool\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create","title":"<code>get_or_create</code>","text":"<p>Gets an existing account or creates a new one with specified metadata. <pre><code>fn get_or_create(\n    account_id: AccountId,\n    client: &amp;mut impl FuzzClient,\n    seeds: Option&lt;PdaSeeds&gt;,\n    account_metadata: Option&lt;AccountMetadata&gt;\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create_token_account","title":"<code>get_or_create_token_account</code>","text":"<p>Token Feature Requirement</p> <p>This method is only available if the <code>token</code> feature is enabled.</p> <p>Creates or retrieves a token account with specified parameters. <pre><code>fn get_or_create_token_account(\n    account_id: AccountId,\n    client: &amp;mut impl FuzzClient,\n    seeds: Option&lt;PdaSeeds&gt;,\n    mint: Pubkey,\n    owner: Pubkey,\n    amount: u64,\n    delegate: Option&lt;Pubkey&gt;,\n    is_native: bool,\n    delegated_amount: u64,\n    close_authority: Option&lt;Pubkey&gt;\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create_mint_account","title":"<code>get_or_create_mint_account</code>","text":"<p>Token Feature Requirement</p> <p>This method is only available if the <code>token</code> feature is enabled.</p> <p>Creates or retrieves a mint account for tokens. <pre><code>fn get_or_create_mint_account(\n    account_id: AccountId,\n    client: &amp;mut impl FuzzClient,\n    seeds: Option&lt;PdaSeeds&gt;,\n    decimals: u8,\n    owner: &amp;Pubkey,\n    freeze_authority: Option&lt;Pubkey&gt;\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create_delegated_account","title":"<code>get_or_create_delegated_account</code>","text":"<p>Stake Feature Requirement</p> <p>This method is only available if the <code>stake</code> feature is enabled.</p> <p>Creates or retrieves a delegated stake account. <pre><code>fn get_or_create_delegated_account(\n    account_id: AccountId,\n    client: &amp;mut impl FuzzClient,\n    seeds: Option&lt;PdaSeeds&gt;,\n    voter_pubkey: Pubkey,\n    staker: Pubkey,\n    withdrawer: Pubkey,\n    stake: u64,\n    activation_epoch: Epoch,\n    deactivation_epoch: Option&lt;Epoch&gt;,\n    lockup: Option&lt;Lockup&gt;\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create_initialized_account","title":"<code>get_or_create_initialized_account</code>","text":"<p>Stake Feature Requirement</p> <p>This method is only available if the <code>stake</code> feature is enabled.</p> <p>Creates or retrieves an initialized stake account. <pre><code>fn get_or_create_initialized_account(\n    account_id: AccountId,\n    client: &amp;mut impl FuzzClient,\n    seeds: Option&lt;PdaSeeds&gt;,\n    staker: Pubkey,\n    withdrawer: Pubkey,\n    lockup: Option&lt;Lockup&gt;\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#get_or_create_vote_account","title":"<code>get_or_create_vote_account</code>","text":"<p>Vote Feature Requirement</p> <p>This method is only available if the <code>vote</code> feature is enabled.</p> <p>Creates or retrieves a vote account. <pre><code>fn get_or_create_vote_account(\n    account_id: AccountId,\n    client: &amp;mut impl FuzzClient,\n    seeds: Option&lt;PdaSeeds&gt;,\n    node_pubkey: &amp;Pubkey,\n    authorized_voter: &amp;Pubkey,\n    authorized_withdrawer: &amp;Pubkey,\n    commission: u8,\n    clock: &amp;Clock\n) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#pdaseeds-and-accountmetadata","title":"PdaSeeds and AccountMetadata","text":"<p>The <code>PdaSeeds</code> and <code>AccountMetadata</code> types are optional parameters that can be used to create a Program Derived Address (<code>Pda</code>) and pass additional metadata to the account creation process, respectively.</p>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#pdaseeds","title":"<code>PdaSeeds</code>","text":"<pre><code>pub struct PdaSeeds&lt;'a&gt; {\n    pub seeds: &amp;'a [&amp;'a [u8]],\n    pub program_id: Pubkey,\n}\nimpl&lt;'a&gt; PdaSeeds&lt;'a&gt; {\n    pub fn new(seeds: &amp;'a [&amp;'a [u8]], program_id: Pubkey) -&gt; Self {\n        Self { seeds, program_id }\n    }\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/fuzz-accounts/#accountmetadata","title":"<code>AccountMetadata</code>","text":"<pre><code>pub struct AccountMetadata {\n    pub lamports: u64,\n    pub space: usize,\n    pub owner: Pubkey,\n}\nimpl AccountMetadata {\n    pub fn new(lamports: u64, space: usize, owner: Pubkey) -&gt; Self {\n        Self {\n            lamports,\n            space,\n            owner,\n        }\n    }\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/fuzz-transactions/","title":"FuzzTransactions","text":"<p><code>FuzzTransactions</code> is an enum that contains <code>all the transactions that can be used for random selection sequence</code>, if default callback is used.</p> <p>By default, Trident generates the enum based on the program's idl, i.e. for each instruction Trident generates a transaction which contains the instruction.</p> <p>On demand, you can add your own transactions to the enum.</p> <pre><code>#[derive(Arbitrary, FuzzTestExecutor)]\npub enum FuzzTransactions {\n    Transaction1(Transaction1),\n    Transaction2(Transaction2),\n    Transaction3(Transaction3),\n    Transaction4(Transaction4),\n    Transaction5(Transaction5),\n    Transaction6(Transaction6),\n    Transaction7(Transaction7),\n    Transaction8(Transaction8),\n    Transaction9(Transaction9),\n    Transaction10(Transaction10),\n    Transaction11(Transaction11),\n    /// ...\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/trident-account/","title":"TridentAccount","text":"<p>Trident Account is a wrapper around <code>AccountMeta</code>, <code>SnapshotAccount</code> and <code>AccountId</code>.</p> <p><code>AccountMeta</code> is type which is used within <code>Transaction</code>, it specifies account address, <code>isSigner</code> and <code>isWritable</code> flags.</p> <p><code>SnapshotAccount</code> is Trident's custom type which is used to capture account state before and after the transaction.</p> <p><code>AccountId</code> is randomly generated number which is used to identify account within its corresponding <code>AccountStorage</code>.</p> <pre><code>#[derive(Debug, Clone)]\npub struct TridentAccount {\n    pub account_id: AccountId,\n    account_meta: Option&lt;AccountMeta&gt;,\n    snapshot_before: Option&lt;SnapshotAccount&gt;,\n    snapshot_after: Option&lt;SnapshotAccount&gt;,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/trident-account/#implemented-methods","title":"Implemented Methods","text":"<p>The following section contains the methods that are available for the <code>TridentAccount</code> struct.</p>"},{"location":"trident-api-macro/trident-types/trident-account/#set_account_meta","title":"<code>set_account_meta</code>","text":"<p>Sets the account metadata with specified address and flags. <pre><code>fn set_account_meta(&amp;mut self, address: Pubkey, is_signer: bool, is_writable: bool)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#get_snapshot_before","title":"<code>get_snapshot_before</code>","text":"<p>Returns the account snapshot taken before transaction execution. <pre><code>fn get_snapshot_before(&amp;self) -&gt; &amp;SnapshotAccount\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#get_snapshot_after","title":"<code>get_snapshot_after</code>","text":"<p>Returns the account snapshot taken after transaction execution. <pre><code>fn get_snapshot_after(&amp;self) -&gt; &amp;SnapshotAccount\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#set_is_signer","title":"<code>set_is_signer</code>","text":"<p>Sets the account as a signer. <pre><code>fn set_is_signer(&amp;mut self)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#set_is_writable","title":"<code>set_is_writable</code>","text":"<p>Sets the account as writable. <pre><code>fn set_is_writable(&amp;mut self)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#set_address","title":"<code>set_address</code>","text":"<p>Sets the account's address. <pre><code>fn set_address(&amp;mut self, address: Pubkey)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#pubkey","title":"<code>pubkey</code>","text":"<p>Returns the account's public key. <pre><code>fn pubkey(&amp;self) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#capture_before","title":"<code>capture_before</code>","text":"<p>Internal Method</p> <p>This method is internal and should not be used directly.</p> <p>Captures the account state before transaction execution. <pre><code>fn capture_before(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#capture_after","title":"<code>capture_after</code>","text":"<p>Internal Method</p> <p>This method is internal and should not be used directly.</p> <p>Captures the account state after transaction execution. <pre><code>fn capture_after(&amp;mut self, client: &amp;mut impl FuzzClient)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#to_account_meta","title":"<code>to_account_meta</code>","text":"<p>Internal Method</p> <p>This method is internal and should not be used directly.</p> <p>Returns the <code>AccountMeta</code> if set, panics if not set. <pre><code>fn to_account_meta(&amp;self) -&gt; AccountMeta\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-account/#is_account_meta_set","title":"<code>is_account_meta_set</code>","text":"<p>Internal Method</p> <p>This method is internal and should not be used directly.</p> <p>Returns whether the account meta has been set. <pre><code>fn is_account_meta_set(&amp;self) -&gt; bool\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-pubkey/","title":"TridentPubkey","text":"<p><code>TridentPubkey</code> is a wrapper around <code>Pubkey</code> and <code>AccountId</code>.</p> <p><code>Pubkey</code> is a type from <code>solana-sdk</code> crate, corresponds to Solana account address.</p> <p><code>AccountId</code> is randomly generated number which is used to identify account within its corresponding <code>AccountStorage</code>.</p> <pre><code>#[derive(Debug, Clone)]\npub struct TridentPubkey {\n    pub account_id: AccountId,\n    pub pubkey: Pubkey,\n}\n</code></pre>"},{"location":"trident-api-macro/trident-types/trident-pubkey/#implemented-methods","title":"Implemented Methods","text":"<p>The following section contains the methods that are available for the <code>TridentPubkey</code> struct.</p>"},{"location":"trident-api-macro/trident-types/trident-pubkey/#set_pubkey","title":"<code>set_pubkey</code>","text":"<p>Sets the public key for this instance. <pre><code>fn set_pubkey(&amp;mut self, pubkey: Pubkey)\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-pubkey/#get_pubkey","title":"<code>get_pubkey</code>","text":"<p>Returns the stored public key. <pre><code>fn get_pubkey(&amp;self) -&gt; Pubkey\n</code></pre></p>"},{"location":"trident-api-macro/trident-types/trident-pubkey/#implemented-traits","title":"Implemented Traits","text":"<ul> <li><code>From&lt;AccountId&gt;</code> - Creates a new instance with the given account_id and default pubkey</li> <li><code>BorshSerialize</code> - Serializes only the pubkey field</li> <li><code>BorshDeserialize</code> - Deserializes only the pubkey field, sets default account_id</li> <li><code>Serialize</code> (serde) - Serializes only the pubkey field</li> <li><code>Deserialize</code> (serde) - Deserializes only the pubkey field, sets default account_id</li> <li><code>Arbitrary</code> - Generates random account_id and default pubkey</li> </ul>"},{"location":"trident-examples/trident-examples/","title":"Trident Examples","text":"<ul> <li> <p> Hello World!</p> <p>Hello World example with Trident.</p> <p>Hello World!</p> </li> <li> <p> Possible vulnerabilities and bugs</p> <p>Check the possible attack vectors and bugs that can be detected using Trident.</p> <p>Unchecked Arithmetic</p> <p>Incorrect Instruction Sequence</p> <p>Unauthorized Access</p> <p>Incorrect Integer Arithmetic</p> </li> <li> <p> Customize with Arbitrary</p> <p>You can use Arbitrary crate to your advantage and limit or customize the data that are sent to the instructions.</p> <p>Custom Data Types</p> <p>Limiting Instructions Inputs</p> </li> <li> <p> Cross-Program Invocation</p> <p>Trident supports Cross-Program Invocation, you can fuzz your programs and create NFTs at the same time.</p> <p>Simple CPI</p> <p>CPI with Metaplex Metadata Program</p> </li> <li> <p> Benchmarking</p> <p>Trident contains benchmarks of Daedaluzz: A Benchmark Generator for Smart-Contract Fuzzers rewritten in Rust.</p> <p>Trident Benchmark</p> </li> </ul>"},{"location":"trident-manifest/","title":"Trident Manifest","text":"<p>Trident supports its own Trident Manifest, called <code>Trident.toml</code>. This section describe all possible configuration fields.</p>"},{"location":"trident-manifest/afl/","title":"AFL Configuration","text":""},{"location":"trident-manifest/afl/#run_time","title":"<code>run_time</code>","text":"<ul> <li>Number of seconds this fuzzing session will last.</li> </ul> <p><code>(default: 0 [no limit])</code></p> <pre><code>[afl]\nrun_time = 0\n</code></pre>"},{"location":"trident-manifest/afl/#iterations","title":"<code>iterations</code>","text":"<ul> <li>Number of fuzzing iterations.</li> </ul> <p><code>(default: 0 [no limit])</code></p> <pre><code>[afl]\niterations = 0\n</code></pre>"},{"location":"trident-manifest/afl/#cargo_target_dir","title":"<code>cargo_target_dir</code>","text":"<ul> <li>Target compilation directory, to not clash with cargo build's default target directory.</li> </ul> <p><code>(default: \"\" [\"trident-tests/fuzz_tests/fuzzing/afl/afl_target\"])</code></p> <pre><code>[afl]\ncargo_target_dir = \"\"\n</code></pre>"},{"location":"trident-manifest/afl/#afl_workspace_in","title":"<code>afl_workspace_in</code>","text":"<ul> <li>AFL working input directory.</li> </ul> <p><code>(default: \"\" [\"trident-tests/fuzz_tests/fuzzing/afl/afl_workspace/in\"])</code></p> <pre><code>[afl]\nafl_workspace_in = \"\"\n</code></pre>"},{"location":"trident-manifest/afl/#afl_workspace_out","title":"<code>afl_workspace_out</code>","text":"<ul> <li>AFL working output directory.</li> </ul> <p><code>(default: \"\" [\"trident-tests/fuzz_tests/fuzzing/afl/afl_workspace/out\"])</code></p> <pre><code>[afl]\nafl_workspace_out = \"\"\n</code></pre>"},{"location":"trident-manifest/afl/#seeds","title":"<code>seeds</code>","text":"<ul> <li>Predefined inputs to the AFL. You can specify multiple input seeds.</li> </ul> <p>Seed Generation Priority</p> <p><code>bytes_count</code> has precedence before <code>seed</code>, in that case if both are specified. Seed is generated as random array of <code>bytes_count</code> bytes.</p> <ul> <li> <p><code>file_name</code></p> <ul> <li>Filename under which the test input is generated, the location of file is <code>afl_workspace_in</code> directory.</li> </ul> <p><code>(default: \"\" [\"trident-seed\"])</code></p> </li> <li> <p><code>seed</code></p> <ul> <li>String used as seed.</li> </ul> <p><code>(default: \"\" [\"trident\"])</code></p> </li> <li> <p><code>override_file</code></p> <ul> <li>If the file already exists at specific location, select if override.</li> </ul> <p><code>(default: false)</code></p> </li> <li> <p><code>bytes_count</code></p> <ul> <li>Number of randomly generated bytes.</li> </ul> </li> </ul> <pre><code>[[afl.seeds]]\nfile_name = \"\"\nseed = \"\"\noverride_file = true\nbytes_count = 20\n</code></pre>"},{"location":"trident-manifest/general/","title":"General Configuration","text":""},{"location":"trident-manifest/general/#programs","title":"<code>programs</code>","text":"<ul> <li>Use dumped program from desired cluster, during fuzzing.</li> </ul> <pre><code>[[fuzz.programs]]\naddress = \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\nprogram = \"metaplex-program/metaplex-token-metadata.so\"\n</code></pre>"},{"location":"trident-manifest/general/#accounts","title":"<code>accounts</code>","text":"<ul> <li>Use dumped accounts from desired cluster, during fuzzing.</li> </ul> <pre><code>[[fuzz.accounts]]\naddress = \"6YG3J7PaxyMnnbU67ifyrgF3BzNzc7cD8hPkqK6ATweE\"\nfilename = \"tests/accounts/core_bridge_mainnet/guardian_set_5_mock.json\"\n</code></pre>"},{"location":"trident-manifest/general/#fuzzing_with_stats","title":"<code>fuzzing_with_stats</code>","text":"<ul> <li>Trident will show statistics after the fuzzing session. This option forces use of honggfuzz parameter <code>keep_output</code> as true in order to be able to catch fuzzer stdout.</li> </ul> <p><code>(default: false)</code></p> <p>Statistics Support Limitation</p> <p>Fuzzing with stats is currently not supported with <code>AFL</code>.</p> <pre><code>[fuzz]\nfuzzing_with_stats = true\n</code></pre>"},{"location":"trident-manifest/general/#allow_duplicate_txs","title":"<code>allow_duplicate_txs</code>","text":"<ul> <li>Allow processing of duplicate transactions. Setting to true might speed up fuzzing but can cause false positive crashes.</li> </ul> <p><code>(default: false)</code></p> <p>Transaction Validity Check</p> <p>With swtich from <code>ProgramTest</code> to <code>TridentSVM</code>, there is no check for the transactions validity, so this check currently does nothing.</p> <pre><code>[fuzz]\nallow_duplicate_txs = false\n</code></pre>"},{"location":"trident-manifest/honggfuzz/","title":"Honggfuzz Configuration","text":""},{"location":"trident-manifest/honggfuzz/#run_time","title":"<code>run_time</code>","text":"<ul> <li>Number of seconds this fuzzing session will last.</li> </ul> <p><code>(default: 0 [no limit])</code></p> <pre><code>[honggfuzz]\nrun_time = 0\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#iterations","title":"<code>iterations</code>","text":"<ul> <li>Number of fuzzing iterations.</li> </ul> <p><code>(default: 0 [no limit])</code></p> <pre><code>[honggfuzz]\niterations = 0\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#threads","title":"<code>threads</code>","text":"<ul> <li>Number of concurrent fuzzing threads.</li> </ul> <p><code>(default: 0 [number of CPUs / 2])</code></p> <pre><code>```bash\n[honggfuzz]\nthreads = 0\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#keep_output","title":"<code>keep_output</code>","text":"<ul> <li>Don't close children's stdin, stdout, stderr; can be noisy.</li> </ul> <p><code>(default: false)</code></p> <pre><code>[honggfuzz]\nkeep_output = false\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#verbose","title":"<code>verbose</code>","text":"<ul> <li>Disable ANSI console; use simple log output.</li> </ul> <p><code>(default: false)</code></p> <pre><code>[honggfuzz]\nverbose = false\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#exit_upon_crash","title":"<code>exit_upon_crash</code>","text":"<ul> <li>Exit upon seeing the first crash.</li> </ul> <p><code>(default: false)</code></p> <pre><code>[honggfuzz]\nexit_upon_crash = false\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#mutations_per_run","title":"<code>mutations_per_run</code>","text":"<ul> <li>Maximal number of mutations per one run.</li> </ul> <p><code>(default: 6)</code></p> <pre><code>[honggfuzz]\nmutations_per_run = 6\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#cargo_target_dir","title":"<code>cargo_target_dir</code>","text":"<ul> <li>Target compilation directory, to not clash with cargo build's default target directory.</li> </ul> <p><code>(default: \"\" [\"trident-tests/fuzzing/honggfuzz/hfuzz_target\"])</code></p> <pre><code>[honggfuzz]\ncargo_target_dir = \"\"\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#hfuzz_workspace","title":"<code>hfuzz_workspace</code>","text":"<ul> <li>Honggfuzz working directory.</li> </ul> <p><code>(default: \"\" [\"trident-tests/fuzzing/honggfuzz/hfuzz_workspace\"])</code></p> <pre><code>[honggfuzz]\nhfuzz_workspace = \"\"\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#crashdir","title":"<code>crashdir</code>","text":"<ul> <li>Directory where crashes are saved to.</li> </ul> <p><code>(default: \"\" [workspace directory])</code></p> <pre><code>[honggfuzz]\ncrashdir = \"\"\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#extension","title":"<code>extension</code>","text":"<ul> <li>Input file extension.</li> </ul> <p><code>(default: \"\" ['fuzz'])</code></p> <pre><code>[honggfuzz]\nextension = \"fuzz\"\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#timeout","title":"<code>timeout</code>","text":"<ul> <li>Timeout in seconds. This will terminate the fuzzing thread if it's running for more than this time.</li> </ul> <p><code>(default: 10)</code></p> <pre><code>[honggfuzz]\ntimeout = 10\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#max_file_size","title":"<code>max_file_size</code>","text":"<ul> <li>Maximal size of files processed by the fuzzer in bytes.</li> </ul> <p><code>(default: 1048576 = 1MB)</code></p> <pre><code>[honggfuzz]\nmax_file_size = 1048576\n</code></pre>"},{"location":"trident-manifest/honggfuzz/#save_all","title":"<code>save_all</code>","text":"<ul> <li>Save all test-cases (not only the unique ones) by appending the current time-stamp to the filenames.</li> </ul> <p><code>(default: false)</code></p> <pre><code>[honggfuzz]\nsave_all = false\n</code></pre>"},{"location":"trident-svm/","title":"Trident SVM","text":"<p>TridentSVM is a fast execution and accounts storage environment which is utilized within the Trident.</p> <p>Github repository: Trident SVM</p> <p>TridentSVM uses Anza's SVM API</p>"}]}