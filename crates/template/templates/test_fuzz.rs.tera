use fuzz_transactions::*;
use trident_fuzz::fuzzing::*;
mod fuzz_transactions;
mod instructions;
mod transactions;
mod types;
{% for program in programs %}
use {{ program.lib_name }}::entry as entry_{{ program.name }};
{% endfor %}
pub use transactions::*;

#[derive(FuzzTestMethods)]
struct FuzzTest {
    /// for transaction executions
    client: TridentSVM,
    /// for storing fuzzing metrics
    metrics: FuzzingStatistics,
    /// for storing seed
    rng: TridentRng,
    /// for storing fuzzing accounts
    fuzz_accounts: FuzzAccounts,
}

#[flow_executor]
impl FuzzTest {
    fn new() -> Self {
        let mut client = TridentSVM::new_client(&TridentConfig::new());

        {% for program in programs %}
        client.deploy_entrypoint(TridentEntrypoint::new(
            pubkey!("{{ program.program_id }}"),
            None,
            processor!(entry_{{ program.name }}),
        ));
        {% endfor %}

        Self {
            client,
            metrics: FuzzingStatistics::default(),
            rng: TridentRng::random(),
            fuzz_accounts: FuzzAccounts::default(),
        }
    }

    #[init]
    fn start(&mut self) -> Result<(), FuzzingError> {
        Ok(())
    }

    #[flow]
    fn flow1(&mut self) -> Result<(), FuzzingError> {
        Ok(())
    }
}

fn main() {
    FuzzTest::fuzz(1000, 100);
}
